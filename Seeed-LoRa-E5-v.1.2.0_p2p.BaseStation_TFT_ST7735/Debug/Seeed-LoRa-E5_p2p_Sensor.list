
Seeed-LoRa-E5_p2p_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc2c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000628  0800dd6c  0800dd6c  0001dd6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e394  0800e394  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800e394  0800e394  0001e394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e39c  0800e39c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e39c  0800e39c  0001e39c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e3a0  0800e3a0  0001e3a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800e3a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000814  20000088  0800e42c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000089c  0800e42c  0002089c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029831  00000000  00000000  000200b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006dd6  00000000  00000000  000498e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002600  00000000  00000000  000506c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002320  00000000  00000000  00052cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023caf  00000000  00000000  00054fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c5fa  00000000  00000000  00078c8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000be964  00000000  00000000  000a5289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00163bed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a490  00000000  00000000  00163c40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000088 	.word	0x20000088
 800015c:	00000000 	.word	0x00000000
 8000160:	0800dd54 	.word	0x0800dd54

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000008c 	.word	0x2000008c
 800017c:	0800dd54 	.word	0x0800dd54

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	460d      	mov	r5, r1
 8000268:	4604      	mov	r4, r0
 800026a:	4688      	mov	r8, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14d      	bne.n	800030c <__udivmoddi4+0xac>
 8000270:	428a      	cmp	r2, r1
 8000272:	4694      	mov	ip, r2
 8000274:	d968      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000276:	fab2 f282 	clz	r2, r2
 800027a:	b152      	cbz	r2, 8000292 <__udivmoddi4+0x32>
 800027c:	fa01 f302 	lsl.w	r3, r1, r2
 8000280:	f1c2 0120 	rsb	r1, r2, #32
 8000284:	fa20 f101 	lsr.w	r1, r0, r1
 8000288:	fa0c fc02 	lsl.w	ip, ip, r2
 800028c:	ea41 0803 	orr.w	r8, r1, r3
 8000290:	4094      	lsls	r4, r2
 8000292:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000296:	0c21      	lsrs	r1, r4, #16
 8000298:	fbb8 fef5 	udiv	lr, r8, r5
 800029c:	fa1f f78c 	uxth.w	r7, ip
 80002a0:	fb05 831e 	mls	r3, r5, lr, r8
 80002a4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a8:	fb0e f107 	mul.w	r1, lr, r7
 80002ac:	4299      	cmp	r1, r3
 80002ae:	d90b      	bls.n	80002c8 <__udivmoddi4+0x68>
 80002b0:	eb1c 0303 	adds.w	r3, ip, r3
 80002b4:	f10e 30ff 	add.w	r0, lr, #4294967295
 80002b8:	f080 811e 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002bc:	4299      	cmp	r1, r3
 80002be:	f240 811b 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c2:	f1ae 0e02 	sub.w	lr, lr, #2
 80002c6:	4463      	add	r3, ip
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f5 	udiv	r0, r3, r5
 80002d0:	fb05 3310 	mls	r3, r5, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 f707 	mul.w	r7, r0, r7
 80002dc:	42a7      	cmp	r7, r4
 80002de:	d90a      	bls.n	80002f6 <__udivmoddi4+0x96>
 80002e0:	eb1c 0404 	adds.w	r4, ip, r4
 80002e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e8:	f080 8108 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002ec:	42a7      	cmp	r7, r4
 80002ee:	f240 8105 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002f2:	4464      	add	r4, ip
 80002f4:	3802      	subs	r0, #2
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002fc:	2100      	movs	r1, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa8>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	428b      	cmp	r3, r1
 800030e:	d908      	bls.n	8000322 <__udivmoddi4+0xc2>
 8000310:	2e00      	cmp	r6, #0
 8000312:	f000 80ee 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000316:	2100      	movs	r1, #0
 8000318:	e9c6 0500 	strd	r0, r5, [r6]
 800031c:	4608      	mov	r0, r1
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	42ab      	cmp	r3, r5
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb65 0303 	sbc.w	r3, r5, r3
 800033a:	2001      	movs	r0, #1
 800033c:	4698      	mov	r8, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d0e2      	beq.n	8000308 <__udivmoddi4+0xa8>
 8000342:	e9c6 4800 	strd	r4, r8, [r6]
 8000346:	e7df      	b.n	8000308 <__udivmoddi4+0xa8>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8091 	bne.w	8000478 <__udivmoddi4+0x218>
 8000356:	eba1 050c 	sub.w	r5, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb5 f3f7 	udiv	r3, r5, r7
 8000368:	fb07 5013 	mls	r0, r7, r3, r5
 800036c:	0c25      	lsrs	r5, r4, #16
 800036e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	42a8      	cmp	r0, r5
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0505 	adds.w	r5, ip, r5
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	42a8      	cmp	r0, r5
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a2d      	subs	r5, r5, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb5 f0f7 	udiv	r0, r5, r7
 8000394:	fb07 5510 	mls	r5, r7, r0, r5
 8000398:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 35ff 	add.w	r5, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4628      	mov	r0, r5
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79e      	b.n	80002fe <__udivmoddi4+0x9e>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa05 f301 	lsl.w	r3, r5, r1
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40fd      	lsrs	r5, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f301 	lsl.w	r3, r0, r1
 80003e2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 5518 	mls	r5, r9, r8, r5
 80003f0:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	42a8      	cmp	r0, r5
 80003fa:	fa02 f201 	lsl.w	r2, r2, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0505 	adds.w	r5, ip, r5
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	42a8      	cmp	r0, r5
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4465      	add	r5, ip
 8000418:	1a2d      	subs	r5, r5, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000420:	fb09 5510 	mls	r5, r9, r0, r5
 8000424:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	45ae      	cmp	lr, r5
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0505 	adds.w	r5, ip, r5
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	45ae      	cmp	lr, r5
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4465      	add	r5, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba5 050e 	sub.w	r5, r5, lr
 800044e:	42a5      	cmp	r5, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15e      	cbz	r6, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb65 050e 	sbc.w	r5, r5, lr
 8000462:	fa05 f707 	lsl.w	r7, r5, r7
 8000466:	fa22 f301 	lsr.w	r3, r2, r1
 800046a:	40cd      	lsrs	r5, r1
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c6 7500 	strd	r7, r5, [r6]
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f103 	lsr.w	r1, r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa25 f303 	lsr.w	r3, r5, r3
 8000488:	4095      	lsls	r5, r2
 800048a:	430d      	orrs	r5, r1
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f1f7 	udiv	r1, r3, r7
 8000498:	fb07 3011 	mls	r0, r7, r1, r3
 800049c:	0c2b      	lsrs	r3, r5, #16
 800049e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80004a2:	fb01 f00e 	mul.w	r0, r1, lr
 80004a6:	4298      	cmp	r0, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f101 38ff 	add.w	r8, r1, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	4298      	cmp	r0, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3902      	subs	r1, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1a1b      	subs	r3, r3, r0
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004c8:	fb07 3310 	mls	r3, r7, r0, r3
 80004cc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004d0:	fb00 f30e 	mul.w	r3, r0, lr
 80004d4:	42ab      	cmp	r3, r5
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0505 	adds.w	r5, ip, r5
 80004dc:	f100 38ff 	add.w	r8, r0, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	42ab      	cmp	r3, r5
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4465      	add	r5, ip
 80004ea:	1aed      	subs	r5, r5, r3
 80004ec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e707      	b.n	8000308 <__udivmoddi4+0xa8>
 80004f8:	4686      	mov	lr, r0
 80004fa:	e6e5      	b.n	80002c8 <__udivmoddi4+0x68>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6fa      	b.n	80002f6 <__udivmoddi4+0x96>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4640      	mov	r0, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4641      	mov	r1, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4465      	add	r5, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4608      	mov	r0, r1
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8000538:	4b03      	ldr	r3, [pc, #12]	; (8000548 <SYS_InitMeasurement+0x14>)
 800053a:	4a04      	ldr	r2, [pc, #16]	; (800054c <SYS_InitMeasurement+0x18>)
 800053c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 800053e:	bf00      	nop
 8000540:	46bd      	mov	sp, r7
 8000542:	bc80      	pop	{r7}
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	200000a4 	.word	0x200000a4
 800054c:	40012400 	.word	0x40012400

08000550 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000550:	b480      	push	{r7}
 8000552:	b085      	sub	sp, #20
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800055c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800055e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4313      	orrs	r3, r2
 8000566:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800056c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4013      	ands	r3, r2
 8000572:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000574:	68fb      	ldr	r3, [r7, #12]
}
 8000576:	bf00      	nop
 8000578:	3714      	adds	r7, #20
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr

08000580 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000584:	2004      	movs	r0, #4
 8000586:	f7ff ffe3 	bl	8000550 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800058a:	2001      	movs	r0, #1
 800058c:	f7ff ffe0 	bl	8000550 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8000590:	2200      	movs	r2, #0
 8000592:	2102      	movs	r1, #2
 8000594:	200b      	movs	r0, #11
 8000596:	f001 fe36 	bl	8002206 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800059a:	200b      	movs	r0, #11
 800059c:	f001 fe4d 	bl	800223a <HAL_NVIC_EnableIRQ>

}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4313      	orrs	r3, r2
 80005ba:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4013      	ands	r3, r2
 80005c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005c8:	68fb      	ldr	r3, [r7, #12]
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bc80      	pop	{r7}
 80005d2:	4770      	bx	lr

080005d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e8:	2001      	movs	r0, #1
 80005ea:	f7ff ffdb 	bl	80005a4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ee:	2002      	movs	r0, #2
 80005f0:	f7ff ffd8 	bl	80005a4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f4:	2004      	movs	r0, #4
 80005f6:	f7ff ffd5 	bl	80005a4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG3_Pin|DBG4_Pin|GPIO_PIN_5|DBG2_Pin, GPIO_PIN_RESET);
 80005fa:	2200      	movs	r2, #0
 80005fc:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000600:	4825      	ldr	r0, [pc, #148]	; (8000698 <MX_GPIO_Init+0xc4>)
 8000602:	f002 fc4f 	bl	8002ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	2131      	movs	r1, #49	; 0x31
 800060a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800060e:	f002 fc49 	bl	8002ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|DBG4_Pin|DBG2_Pin;
 8000612:	f44f 6383 	mov.w	r3, #1048	; 0x418
 8000616:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000618:	2301      	movs	r3, #1
 800061a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061c:	2300      	movs	r3, #0
 800061e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000620:	2303      	movs	r3, #3
 8000622:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	4619      	mov	r1, r3
 8000628:	481b      	ldr	r0, [pc, #108]	; (8000698 <MX_GPIO_Init+0xc4>)
 800062a:	f002 fa0d 	bl	8002a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800062e:	2320      	movs	r3, #32
 8000630:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000632:	2301      	movs	r3, #1
 8000634:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063a:	2300      	movs	r3, #0
 800063c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	4619      	mov	r1, r3
 8000642:	4815      	ldr	r0, [pc, #84]	; (8000698 <MX_GPIO_Init+0xc4>)
 8000644:	f002 fa00 	bl	8002a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 8000648:	2331      	movs	r3, #49	; 0x31
 800064a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064c:	2301      	movs	r3, #1
 800064e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000654:	2303      	movs	r3, #3
 8000656:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	4619      	mov	r1, r3
 800065c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000660:	f002 f9f2 	bl	8002a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 8000664:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000668:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800066a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800066e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000670:	2301      	movs	r3, #1
 8000672:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	4619      	mov	r1, r3
 8000678:	4807      	ldr	r0, [pc, #28]	; (8000698 <MX_GPIO_Init+0xc4>)
 800067a:	f002 f9e5 	bl	8002a48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800067e:	2200      	movs	r2, #0
 8000680:	2100      	movs	r1, #0
 8000682:	2029      	movs	r0, #41	; 0x29
 8000684:	f001 fdbf 	bl	8002206 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000688:	2029      	movs	r0, #41	; 0x29
 800068a:	f001 fdd6 	bl	800223a <HAL_NVIC_EnableIRQ>

}
 800068e:	bf00      	nop
 8000690:	3718      	adds	r7, #24
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	48000400 	.word	0x48000400

0800069c <LL_AHB2_GRP1_EnableClock>:
{
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80006a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4313      	orrs	r3, r2
 80006b2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80006b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4013      	ands	r3, r2
 80006be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006c0:	68fb      	ldr	r3, [r7, #12]
}
 80006c2:	bf00      	nop
 80006c4:	3714      	adds	r7, #20
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr

080006cc <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80006d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80006da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4313      	orrs	r3, r2
 80006e2:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80006e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4013      	ands	r3, r2
 80006ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006f0:	68fb      	ldr	r3, [r7, #12]
}
 80006f2:	bf00      	nop
 80006f4:	3714      	adds	r7, #20
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr

080006fc <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000700:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <MX_I2C2_Init+0x74>)
 8000702:	4a1c      	ldr	r2, [pc, #112]	; (8000774 <MX_I2C2_Init+0x78>)
 8000704:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8000706:	4b1a      	ldr	r3, [pc, #104]	; (8000770 <MX_I2C2_Init+0x74>)
 8000708:	4a1b      	ldr	r2, [pc, #108]	; (8000778 <MX_I2C2_Init+0x7c>)
 800070a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800070c:	4b18      	ldr	r3, [pc, #96]	; (8000770 <MX_I2C2_Init+0x74>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000712:	4b17      	ldr	r3, [pc, #92]	; (8000770 <MX_I2C2_Init+0x74>)
 8000714:	2201      	movs	r2, #1
 8000716:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000718:	4b15      	ldr	r3, [pc, #84]	; (8000770 <MX_I2C2_Init+0x74>)
 800071a:	2200      	movs	r2, #0
 800071c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800071e:	4b14      	ldr	r3, [pc, #80]	; (8000770 <MX_I2C2_Init+0x74>)
 8000720:	2200      	movs	r2, #0
 8000722:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000724:	4b12      	ldr	r3, [pc, #72]	; (8000770 <MX_I2C2_Init+0x74>)
 8000726:	2200      	movs	r2, #0
 8000728:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_I2C2_Init+0x74>)
 800072c:	2200      	movs	r2, #0
 800072e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <MX_I2C2_Init+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000736:	480e      	ldr	r0, [pc, #56]	; (8000770 <MX_I2C2_Init+0x74>)
 8000738:	f002 fbee 	bl	8002f18 <HAL_I2C_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000742:	f000 f8f7 	bl	8000934 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000746:	2100      	movs	r1, #0
 8000748:	4809      	ldr	r0, [pc, #36]	; (8000770 <MX_I2C2_Init+0x74>)
 800074a:	f002 fc74 	bl	8003036 <HAL_I2CEx_ConfigAnalogFilter>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000754:	f000 f8ee 	bl	8000934 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000758:	2100      	movs	r1, #0
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_I2C2_Init+0x74>)
 800075c:	f002 fcb5 	bl	80030ca <HAL_I2CEx_ConfigDigitalFilter>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000766:	f000 f8e5 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000108 	.word	0x20000108
 8000774:	40005800 	.word	0x40005800
 8000778:	20303e5d 	.word	0x20303e5d

0800077c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b096      	sub	sp, #88	; 0x58
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000784:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	2238      	movs	r2, #56	; 0x38
 800079a:	2100      	movs	r1, #0
 800079c:	4618      	mov	r0, r3
 800079e:	f00c fa73 	bl	800cc88 <memset>
  if(i2cHandle->Instance==I2C2)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4a21      	ldr	r2, [pc, #132]	; (800082c <HAL_I2C_MspInit+0xb0>)
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d13b      	bne.n	8000824 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80007ac:	2380      	movs	r3, #128	; 0x80
 80007ae:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80007b0:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007b6:	f107 030c 	add.w	r3, r7, #12
 80007ba:	4618      	mov	r0, r3
 80007bc:	f003 ff5a 	bl	8004674 <HAL_RCCEx_PeriphCLKConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80007c6:	f000 f8b5 	bl	8000934 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ca:	2002      	movs	r0, #2
 80007cc:	f7ff ff66 	bl	800069c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d0:	2001      	movs	r0, #1
 80007d2:	f7ff ff63 	bl	800069c <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PB15     ------> I2C2_SCL
    PA11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80007d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007da:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007dc:	2312      	movs	r3, #18
 80007de:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	2300      	movs	r3, #0
 80007e6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80007e8:	2304      	movs	r3, #4
 80007ea:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80007f0:	4619      	mov	r1, r3
 80007f2:	480f      	ldr	r0, [pc, #60]	; (8000830 <HAL_I2C_MspInit+0xb4>)
 80007f4:	f002 f928 	bl	8002a48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80007f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007fc:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007fe:	2312      	movs	r3, #18
 8000800:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2300      	movs	r3, #0
 8000808:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800080a:	2304      	movs	r3, #4
 800080c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000812:	4619      	mov	r1, r3
 8000814:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000818:	f002 f916 	bl	8002a48 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800081c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000820:	f7ff ff54 	bl	80006cc <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000824:	bf00      	nop
 8000826:	3758      	adds	r7, #88	; 0x58
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40005800 	.word	0x40005800
 8000830:	48000400 	.word	0x48000400

08000834 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800083c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000844:	f023 0218 	bic.w	r2, r3, #24
 8000848:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	4313      	orrs	r3, r2
 8000850:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	bc80      	pop	{r7}
 800085c:	4770      	bx	lr

0800085e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800085e:	b580      	push	{r7, lr}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000862:	f001 fa1f 	bl	8001ca4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000866:	f000 f80b 	bl	8000880 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800086a:	f7ff feb3 	bl	80005d4 <MX_GPIO_Init>
  MX_I2C2_Init();
 800086e:	f7ff ff45 	bl	80006fc <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8000872:	f000 fedf 	bl	8001634 <MX_USART2_UART_Init>
  MX_SubGHz_Phy_Init();
 8000876:	f00a fbe0 	bl	800b03a <MX_SubGHz_Phy_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_SubGHz_Phy_Process();
 800087a:	f00a fbe6 	bl	800b04a <MX_SubGHz_Phy_Process>
 800087e:	e7fc      	b.n	800087a <main+0x1c>

08000880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b09a      	sub	sp, #104	; 0x68
 8000884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000886:	f107 0320 	add.w	r3, r7, #32
 800088a:	2248      	movs	r2, #72	; 0x48
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f00c f9fa 	bl	800cc88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000894:	f107 0308 	add.w	r3, r7, #8
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
 80008a4:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008a6:	f002 fc5b 	bl	8003160 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80008aa:	2000      	movs	r0, #0
 80008ac:	f7ff ffc2 	bl	8000834 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008b0:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <SystemClock_Config+0xb0>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80008b8:	4a1d      	ldr	r2, [pc, #116]	; (8000930 <SystemClock_Config+0xb0>)
 80008ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008be:	6013      	str	r3, [r2, #0]
 80008c0:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <SystemClock_Config+0xb0>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80008cc:	2324      	movs	r3, #36	; 0x24
 80008ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80008d0:	2381      	movs	r3, #129	; 0x81
 80008d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008d4:	2301      	movs	r3, #1
 80008d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80008d8:	2300      	movs	r3, #0
 80008da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80008dc:	23b0      	movs	r3, #176	; 0xb0
 80008de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008e0:	2300      	movs	r3, #0
 80008e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e4:	f107 0320 	add.w	r3, r7, #32
 80008e8:	4618      	mov	r0, r3
 80008ea:	f002 ff85 	bl	80037f8 <HAL_RCC_OscConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80008f4:	f000 f81e 	bl	8000934 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80008f8:	234f      	movs	r3, #79	; 0x4f
 80008fa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000900:	2300      	movs	r3, #0
 8000902:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000908:	2300      	movs	r3, #0
 800090a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800090c:	2300      	movs	r3, #0
 800090e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000910:	f107 0308 	add.w	r3, r7, #8
 8000914:	2102      	movs	r1, #2
 8000916:	4618      	mov	r0, r3
 8000918:	f003 fb0a 	bl	8003f30 <HAL_RCC_ClockConfig>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000922:	f000 f807 	bl	8000934 <Error_Handler>
  }
}
 8000926:	bf00      	nop
 8000928:	3768      	adds	r7, #104	; 0x68
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	58000400 	.word	0x58000400

08000934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000938:	b672      	cpsid	i
}
 800093a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800093c:	e7fe      	b.n	800093c <Error_Handler+0x8>

0800093e <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000942:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800094a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800094e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000952:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000956:	bf00      	nop
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr

0800095e <LL_APB1_GRP1_EnableClock>:
{
 800095e:	b480      	push	{r7}
 8000960:	b085      	sub	sp, #20
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000966:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800096a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800096c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	4313      	orrs	r3, r2
 8000974:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000976:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800097a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	4013      	ands	r3, r2
 8000980:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000982:	68fb      	ldr	r3, [r7, #12]
}
 8000984:	bf00      	nop
 8000986:	3714      	adds	r7, #20
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr
	...

08000990 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08c      	sub	sp, #48	; 0x30
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	222c      	movs	r2, #44	; 0x2c
 800099a:	2100      	movs	r1, #0
 800099c:	4618      	mov	r0, r3
 800099e:	f00c f973 	bl	800cc88 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009a2:	4b22      	ldr	r3, [pc, #136]	; (8000a2c <MX_RTC_Init+0x9c>)
 80009a4:	4a22      	ldr	r2, [pc, #136]	; (8000a30 <MX_RTC_Init+0xa0>)
 80009a6:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80009a8:	4b20      	ldr	r3, [pc, #128]	; (8000a2c <MX_RTC_Init+0x9c>)
 80009aa:	221f      	movs	r2, #31
 80009ac:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009ae:	4b1f      	ldr	r3, [pc, #124]	; (8000a2c <MX_RTC_Init+0x9c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80009b4:	4b1d      	ldr	r3, [pc, #116]	; (8000a2c <MX_RTC_Init+0x9c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009ba:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <MX_RTC_Init+0x9c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009c0:	4b1a      	ldr	r3, [pc, #104]	; (8000a2c <MX_RTC_Init+0x9c>)
 80009c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009c6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80009c8:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <MX_RTC_Init+0x9c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 80009ce:	4b17      	ldr	r3, [pc, #92]	; (8000a2c <MX_RTC_Init+0x9c>)
 80009d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009d6:	4815      	ldr	r0, [pc, #84]	; (8000a2c <MX_RTC_Init+0x9c>)
 80009d8:	f003 ff66 	bl	80048a8 <HAL_RTC_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 80009e2:	f7ff ffa7 	bl	8000934 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 80009e6:	4811      	ldr	r0, [pc, #68]	; (8000a2c <MX_RTC_Init+0x9c>)
 80009e8:	f004 fa54 	bl	8004e94 <HAL_RTCEx_SetSSRU_IT>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80009f2:	f7ff ff9f 	bl	8000934 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80009f6:	2300      	movs	r3, #0
 80009f8:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8000a02:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000a06:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8000a08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	2200      	movs	r2, #0
 8000a12:	4619      	mov	r1, r3
 8000a14:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_RTC_Init+0x9c>)
 8000a16:	f003 ffc1 	bl	800499c <HAL_RTC_SetAlarm_IT>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8000a20:	f7ff ff88 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	3730      	adds	r7, #48	; 0x30
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000154 	.word	0x20000154
 8000a30:	40002800 	.word	0x40002800

08000a34 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b090      	sub	sp, #64	; 0x40
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a3c:	f107 0308 	add.w	r3, r7, #8
 8000a40:	2238      	movs	r2, #56	; 0x38
 8000a42:	2100      	movs	r1, #0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f00c f91f 	bl	800cc88 <memset>
  if(rtcHandle->Instance==RTC)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a16      	ldr	r2, [pc, #88]	; (8000aa8 <HAL_RTC_MspInit+0x74>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d125      	bne.n	8000aa0 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a58:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000a5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a5e:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a60:	f107 0308 	add.w	r3, r7, #8
 8000a64:	4618      	mov	r0, r3
 8000a66:	f003 fe05 	bl	8004674 <HAL_RCCEx_PeriphCLKConfig>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000a70:	f7ff ff60 	bl	8000934 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a74:	f7ff ff63 	bl	800093e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000a78:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000a7c:	f7ff ff6f 	bl	800095e <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2100      	movs	r1, #0
 8000a84:	2002      	movs	r0, #2
 8000a86:	f001 fbbe 	bl	8002206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8000a8a:	2002      	movs	r0, #2
 8000a8c:	f001 fbd5 	bl	800223a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2100      	movs	r1, #0
 8000a94:	202a      	movs	r0, #42	; 0x2a
 8000a96:	f001 fbb6 	bl	8002206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000a9a:	202a      	movs	r0, #42	; 0x2a
 8000a9c:	f001 fbcd 	bl	800223a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000aa0:	bf00      	nop
 8000aa2:	3740      	adds	r7, #64	; 0x40
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40002800 	.word	0x40002800

08000aac <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8000ab0:	4b03      	ldr	r3, [pc, #12]	; (8000ac0 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr
 8000ac0:	58000400 	.word	0x58000400

08000ac4 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr

08000ad0 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr

08000adc <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8000ae0:	f001 f900 	bl	8001ce4 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8000ae4:	f7ff ffe2 	bl	8000aac <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8000ae8:	2001      	movs	r0, #1
 8000aea:	f002 fbcb 	bl	8003284 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8000af6:	f001 f903 	bl	8001d00 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8000afa:	f000 ff79 	bl	80019f0 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */
  MX_I2C2_Init();
 8000afe:	f7ff fdfd 	bl	80006fc <MX_I2C2_Init>
  /* USER CODE END ExitStopMode_2 */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8000b0a:	f001 f8eb 	bl	8001ce4 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000b0e:	2101      	movs	r1, #1
 8000b10:	2000      	movs	r0, #0
 8000b12:	f002 fb33 	bl	800317c <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8000b1e:	f001 f8ef 	bl	8001d00 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bc80      	pop	{r7}
 8000b30:	4770      	bx	lr

08000b32 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <NMI_Handler+0x4>

08000b38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <HardFault_Handler+0x4>

08000b3e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <MemManage_Handler+0x4>

08000b44 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <BusFault_Handler+0x4>

08000b4a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <UsageFault_Handler+0x4>

08000b50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr

08000b5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bc80      	pop	{r7}
 8000b66:	4770      	bx	lr

08000b68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr

08000b74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr

08000b80 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8000b84:	4802      	ldr	r0, [pc, #8]	; (8000b90 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8000b86:	f004 f9c1 	bl	8004f0c <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000154 	.word	0x20000154

08000b94 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000b98:	4802      	ldr	r0, [pc, #8]	; (8000ba4 <DMA1_Channel1_IRQHandler+0x10>)
 8000b9a:	f001 fde5 	bl	8002768 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	200002c8 	.word	0x200002c8

08000ba8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC Interrupt.
  */
void ADC_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8000bac:	4802      	ldr	r0, [pc, #8]	; (8000bb8 <ADC_IRQHandler+0x10>)
 8000bae:	f001 f8f8 	bl	8001da2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200000a4 	.word	0x200000a4

08000bbc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bc0:	4802      	ldr	r0, [pc, #8]	; (8000bcc <USART1_IRQHandler+0x10>)
 8000bc2:	f005 f803 	bl	8005bcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	200001a8 	.word	0x200001a8

08000bd0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8000bd4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000bd8:	f002 f97c 	bl	8002ed4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000be4:	4802      	ldr	r0, [pc, #8]	; (8000bf0 <RTC_Alarm_IRQHandler+0x10>)
 8000be6:	f004 f841 	bl	8004c6c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000154 	.word	0x20000154

08000bf4 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8000bf8:	4802      	ldr	r0, [pc, #8]	; (8000c04 <SUBGHZ_Radio_IRQHandler+0x10>)
 8000bfa:	f004 fcef 	bl	80055dc <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	2000018c 	.word	0x2000018c

08000c08 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c14:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000c16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c24:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c2c:	68fb      	ldr	r3, [r7, #12]
}
 8000c2e:	bf00      	nop
 8000c30:	3714      	adds	r7, #20
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr

08000c38 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <MX_SUBGHZ_Init+0x20>)
 8000c3e:	2208      	movs	r2, #8
 8000c40:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8000c42:	4805      	ldr	r0, [pc, #20]	; (8000c58 <MX_SUBGHZ_Init+0x20>)
 8000c44:	f004 fa4e 	bl	80050e4 <HAL_SUBGHZ_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8000c4e:	f7ff fe71 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	2000018c 	.word	0x2000018c

08000c5c <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8000c64:	2001      	movs	r0, #1
 8000c66:	f7ff ffcf 	bl	8000c08 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2032      	movs	r0, #50	; 0x32
 8000c70:	f001 fac9 	bl	8002206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8000c74:	2032      	movs	r0, #50	; 0x32
 8000c76:	f001 fae0 	bl	800223a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <LL_RCC_SetClkAfterWakeFromStop>:
{
 8000c82:	b480      	push	{r7}
 8000c84:	b083      	sub	sp, #12
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000c8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c8e:	689b      	ldr	r3, [r3, #8]
 8000c90:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000c94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	608b      	str	r3, [r1, #8]
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr

08000ca8 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8000cac:	2000      	movs	r0, #0
 8000cae:	f7ff ffe8 	bl	8000c82 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8000cb2:	f00b fa8d 	bl	800c1d0 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <SystemApp_Init+0x38>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8000cbc:	f000 f8a2 	bl	8000e04 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8000cc0:	f00b fd16 	bl	800c6f0 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8000cc4:	4807      	ldr	r0, [pc, #28]	; (8000ce4 <SystemApp_Init+0x3c>)
 8000cc6:	f00b fdaf 	bl	800c828 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8000cca:	2003      	movs	r0, #3
 8000ccc:	f00b fdba 	bl	800c844 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8000cd0:	f00a fd32 	bl	800b738 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	f00a fd6e 	bl	800b7b8 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000198 	.word	0x20000198
 8000ce4:	08000cf5 	.word	0x08000cf5

08000ce8 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8000cec:	f00a fd94 	bl	800b818 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af02      	add	r7, sp, #8
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8000cfe:	f107 0308 	add.w	r3, r7, #8
 8000d02:	4618      	mov	r0, r3
 8000d04:	f00a fe32 	bl	800b96c <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000d0e:	9200      	str	r2, [sp, #0]
 8000d10:	4a07      	ldr	r2, [pc, #28]	; (8000d30 <TimestampNow+0x3c>)
 8000d12:	2110      	movs	r1, #16
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f000 f81d 	bl	8000d54 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f7ff fa30 	bl	8000180 <strlen>
 8000d20:	4603      	mov	r3, r0
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8000d28:	bf00      	nop
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	0800dd6c 	.word	0x0800dd6c

08000d34 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8000d38:	2101      	movs	r1, #1
 8000d3a:	2002      	movs	r0, #2
 8000d3c:	f00a fd0c 	bl	800b758 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8000d48:	2100      	movs	r1, #0
 8000d4a:	2002      	movs	r0, #2
 8000d4c:	f00a fd04 	bl	800b758 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8000d54:	b40c      	push	{r2, r3}
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b084      	sub	sp, #16
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
 8000d5e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8000d60:	f107 031c 	add.w	r3, r7, #28
 8000d64:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8000d66:	6839      	ldr	r1, [r7, #0]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f00a ff49 	bl	800bc04 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8000d72:	bf00      	nop
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d7c:	b002      	add	sp, #8
 8000d7e:	4770      	bx	lr

08000d80 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8000d88:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bc80      	pop	{r7}
 8000d92:	4770      	bx	lr

08000d94 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_GetTick+0x24>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d002      	beq.n	8000dac <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8000da6:	f000 fa0b 	bl	80011c0 <TIMER_IF_GetTimerValue>
 8000daa:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8000dac:	687b      	ldr	r3, [r7, #4]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000198 	.word	0x20000198

08000dbc <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f000 fa81 	bl	80012ce <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <LL_AHB2_GRP1_EnableClock>:
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000de0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000de2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000dec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000df0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4013      	ands	r3, r2
 8000df6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000df8:	68fb      	ldr	r3, [r7, #12]
}
 8000dfa:	bf00      	nop
 8000dfc:	3714      	adds	r7, #20
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bc80      	pop	{r7}
 8000e02:	4770      	bx	lr

08000e04 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 8000e0a:	f000 ff87 	bl	8001d1c <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8000e0e:	f000 ff8b 	bl	8001d28 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8000e12:	f000 ff8f 	bl	8001d34 <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8000e24:	2301      	movs	r3, #1
 8000e26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8000e30:	2001      	movs	r0, #1
 8000e32:	f7ff ffcf 	bl	8000dd4 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 8000e36:	2002      	movs	r0, #2
 8000e38:	f7ff ffcc 	bl	8000dd4 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE3_CLK_ENABLE();
 8000e3c:	2002      	movs	r0, #2
 8000e3e:	f7ff ffc9 	bl	8000dd4 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE4_CLK_ENABLE();
 8000e42:	2002      	movs	r0, #2
 8000e44:	f7ff ffc6 	bl	8000dd4 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	4619      	mov	r1, r3
 8000e50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e54:	f001 fdf8 	bl	8002a48 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8000e58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e5c:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	4619      	mov	r1, r3
 8000e62:	4815      	ldr	r0, [pc, #84]	; (8000eb8 <DBG_Init+0xb4>)
 8000e64:	f001 fdf0 	bl	8002a48 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 8000e68:	2308      	movs	r3, #8
 8000e6a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4811      	ldr	r0, [pc, #68]	; (8000eb8 <DBG_Init+0xb4>)
 8000e72:	f001 fde9 	bl	8002a48 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 8000e76:	2310      	movs	r3, #16
 8000e78:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 8000e7a:	1d3b      	adds	r3, r7, #4
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	480e      	ldr	r0, [pc, #56]	; (8000eb8 <DBG_Init+0xb4>)
 8000e80:	f001 fde2 	bl	8002a48 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8000e84:	2200      	movs	r2, #0
 8000e86:	2101      	movs	r1, #1
 8000e88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e8c:	f002 f80a 	bl	8002ea4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8000e90:	2200      	movs	r2, #0
 8000e92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e96:	4808      	ldr	r0, [pc, #32]	; (8000eb8 <DBG_Init+0xb4>)
 8000e98:	f002 f804 	bl	8002ea4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2108      	movs	r1, #8
 8000ea0:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <DBG_Init+0xb4>)
 8000ea2:	f001 ffff 	bl	8002ea4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2110      	movs	r1, #16
 8000eaa:	4803      	ldr	r0, [pc, #12]	; (8000eb8 <DBG_Init+0xb4>)
 8000eac:	f001 fffa 	bl	8002ea4 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8000eb0:	bf00      	nop
 8000eb2:	3718      	adds	r7, #24
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	48000400 	.word	0x48000400

08000ebc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
	return 1;
 8000ec0:	2301      	movs	r3, #1
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr

08000eca <_kill>:

int _kill(int pid, int sig)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
 8000ed2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000ed4:	f00b fea0 	bl	800cc18 <__errno>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2216      	movs	r2, #22
 8000edc:	601a      	str	r2, [r3, #0]
	return -1;
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <_exit>:

void _exit (int status)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ef2:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f7ff ffe7 	bl	8000eca <_kill>
	while (1) {}		/* Make sure we hang here */
 8000efc:	e7fe      	b.n	8000efc <_exit+0x12>

08000efe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b086      	sub	sp, #24
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	60f8      	str	r0, [r7, #12]
 8000f06:	60b9      	str	r1, [r7, #8]
 8000f08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
 8000f0e:	e00a      	b.n	8000f26 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f10:	f3af 8000 	nop.w
 8000f14:	4601      	mov	r1, r0
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	1c5a      	adds	r2, r3, #1
 8000f1a:	60ba      	str	r2, [r7, #8]
 8000f1c:	b2ca      	uxtb	r2, r1
 8000f1e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	3301      	adds	r3, #1
 8000f24:	617b      	str	r3, [r7, #20]
 8000f26:	697a      	ldr	r2, [r7, #20]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	dbf0      	blt.n	8000f10 <_read+0x12>
	}

return len;
 8000f2e:	687b      	ldr	r3, [r7, #4]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3718      	adds	r7, #24
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
 8000f48:	e009      	b.n	8000f5e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	1c5a      	adds	r2, r3, #1
 8000f4e:	60ba      	str	r2, [r7, #8]
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	617b      	str	r3, [r7, #20]
 8000f5e:	697a      	ldr	r2, [r7, #20]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	dbf1      	blt.n	8000f4a <_write+0x12>
	}
	return len;
 8000f66:	687b      	ldr	r3, [r7, #4]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <_close>:

int _close(int file)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	return -1;
 8000f78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr

08000f86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f86:	b480      	push	{r7}
 8000f88:	b083      	sub	sp, #12
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
 8000f8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f96:	605a      	str	r2, [r3, #4]
	return 0;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr

08000fa4 <_isatty>:

int _isatty(int file)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
	return 1;
 8000fac:	2301      	movs	r3, #1
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr

08000fb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
	return 0;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3714      	adds	r7, #20
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr

08000fd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fd8:	4a14      	ldr	r2, [pc, #80]	; (800102c <_sbrk+0x5c>)
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <_sbrk+0x60>)
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fe4:	4b13      	ldr	r3, [pc, #76]	; (8001034 <_sbrk+0x64>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d102      	bne.n	8000ff2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fec:	4b11      	ldr	r3, [pc, #68]	; (8001034 <_sbrk+0x64>)
 8000fee:	4a12      	ldr	r2, [pc, #72]	; (8001038 <_sbrk+0x68>)
 8000ff0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <_sbrk+0x64>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d207      	bcs.n	8001010 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001000:	f00b fe0a 	bl	800cc18 <__errno>
 8001004:	4603      	mov	r3, r0
 8001006:	220c      	movs	r2, #12
 8001008:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800100a:	f04f 33ff 	mov.w	r3, #4294967295
 800100e:	e009      	b.n	8001024 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <_sbrk+0x64>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001016:	4b07      	ldr	r3, [pc, #28]	; (8001034 <_sbrk+0x64>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4413      	add	r3, r2
 800101e:	4a05      	ldr	r2, [pc, #20]	; (8001034 <_sbrk+0x64>)
 8001020:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001022:	68fb      	ldr	r3, [r7, #12]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20010000 	.word	0x20010000
 8001030:	00000400 	.word	0x00000400
 8001034:	2000019c 	.word	0x2000019c
 8001038:	200008a0 	.word	0x200008a0

0800103c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr

08001048 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	689b      	ldr	r3, [r3, #8]
}
 8001054:	4618      	mov	r0, r3
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr
	...

08001060 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001066:	2300      	movs	r3, #0
 8001068:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 800106a:	4b14      	ldr	r3, [pc, #80]	; (80010bc <TIMER_IF_Init+0x5c>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	f083 0301 	eor.w	r3, r3, #1
 8001072:	b2db      	uxtb	r3, r3
 8001074:	2b00      	cmp	r3, #0
 8001076:	d01b      	beq.n	80010b0 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001078:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <TIMER_IF_Init+0x60>)
 800107a:	f04f 32ff 	mov.w	r2, #4294967295
 800107e:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8001080:	f7ff fc86 	bl	8000990 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8001084:	f000 f856 	bl	8001134 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001088:	f44f 7180 	mov.w	r1, #256	; 0x100
 800108c:	480c      	ldr	r0, [pc, #48]	; (80010c0 <TIMER_IF_Init+0x60>)
 800108e:	f003 fd91 	bl	8004bb4 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001092:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <TIMER_IF_Init+0x60>)
 8001094:	f04f 32ff 	mov.w	r2, #4294967295
 8001098:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 800109a:	4809      	ldr	r0, [pc, #36]	; (80010c0 <TIMER_IF_Init+0x60>)
 800109c:	f003 fec8 	bl	8004e30 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 80010a0:	2000      	movs	r0, #0
 80010a2:	f000 f9d3 	bl	800144c <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 80010a6:	f000 f85f 	bl	8001168 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 80010aa:	4b04      	ldr	r3, [pc, #16]	; (80010bc <TIMER_IF_Init+0x5c>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 80010b0:	79fb      	ldrb	r3, [r7, #7]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	200001a0 	.word	0x200001a0
 80010c0:	20000154 	.word	0x20000154

080010c4 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08e      	sub	sp, #56	; 0x38
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80010cc:	2300      	movs	r3, #0
 80010ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 80010d2:	f107 0308 	add.w	r3, r7, #8
 80010d6:	222c      	movs	r2, #44	; 0x2c
 80010d8:	2100      	movs	r1, #0
 80010da:	4618      	mov	r0, r3
 80010dc:	f00b fdd4 	bl	800cc88 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 80010e0:	f000 f828 	bl	8001134 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 80010e4:	4b11      	ldr	r3, [pc, #68]	; (800112c <TIMER_IF_StartTimer+0x68>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	4413      	add	r3, r2
 80010ec:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80010ee:	2300      	movs	r3, #0
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	43db      	mvns	r3, r3
 80010f6:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80010f8:	2300      	movs	r3, #0
 80010fa:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80010fc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001100:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001102:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001106:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001108:	f107 0308 	add.w	r3, r7, #8
 800110c:	2201      	movs	r2, #1
 800110e:	4619      	mov	r1, r3
 8001110:	4807      	ldr	r0, [pc, #28]	; (8001130 <TIMER_IF_StartTimer+0x6c>)
 8001112:	f003 fc43 	bl	800499c <HAL_RTC_SetAlarm_IT>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 800111c:	f7ff fc0a 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8001120:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001124:	4618      	mov	r0, r3
 8001126:	3738      	adds	r7, #56	; 0x38
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	200001a4 	.word	0x200001a4
 8001130:	20000154 	.word	0x20000154

08001134 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800113a:	2300      	movs	r3, #0
 800113c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800113e:	4b08      	ldr	r3, [pc, #32]	; (8001160 <TIMER_IF_StopTimer+0x2c>)
 8001140:	2201      	movs	r2, #1
 8001142:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001144:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001148:	4806      	ldr	r0, [pc, #24]	; (8001164 <TIMER_IF_StopTimer+0x30>)
 800114a:	f003 fd33 	bl	8004bb4 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800114e:	4b05      	ldr	r3, [pc, #20]	; (8001164 <TIMER_IF_StopTimer+0x30>)
 8001150:	f04f 32ff 	mov.w	r2, #4294967295
 8001154:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8001156:	79fb      	ldrb	r3, [r7, #7]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40002800 	.word	0x40002800
 8001164:	20000154 	.word	0x20000154

08001168 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 800116c:	f000 f98e 	bl	800148c <GetTimerTicks>
 8001170:	4603      	mov	r3, r0
 8001172:	4a03      	ldr	r2, [pc, #12]	; (8001180 <TIMER_IF_SetTimerContext+0x18>)
 8001174:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001176:	4b02      	ldr	r3, [pc, #8]	; (8001180 <TIMER_IF_SetTimerContext+0x18>)
 8001178:	681b      	ldr	r3, [r3, #0]
}
 800117a:	4618      	mov	r0, r3
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	200001a4 	.word	0x200001a4

08001184 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001188:	4b02      	ldr	r3, [pc, #8]	; (8001194 <TIMER_IF_GetTimerContext+0x10>)
 800118a:	681b      	ldr	r3, [r3, #0]
}
 800118c:	4618      	mov	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr
 8001194:	200001a4 	.word	0x200001a4

08001198 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 80011a2:	f000 f973 	bl	800148c <GetTimerTicks>
 80011a6:	4602      	mov	r2, r0
 80011a8:	4b04      	ldr	r3, [pc, #16]	; (80011bc <TIMER_IF_GetTimerElapsedTime+0x24>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 80011b0:	687b      	ldr	r3, [r7, #4]
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200001a4 	.word	0x200001a4

080011c0 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 80011ca:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <TIMER_IF_GetTimerValue+0x24>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d002      	beq.n	80011d8 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 80011d2:	f000 f95b 	bl	800148c <GetTimerTicks>
 80011d6:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 80011d8:	687b      	ldr	r3, [r7, #4]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200001a0 	.word	0x200001a0

080011e8 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 80011f2:	2303      	movs	r3, #3
 80011f4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 80011f6:	687b      	ldr	r3, [r7, #4]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr

08001202 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8001202:	b5b0      	push	{r4, r5, r7, lr}
 8001204:	b084      	sub	sp, #16
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 800120a:	2100      	movs	r1, #0
 800120c:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	2000      	movs	r0, #0
 8001212:	460a      	mov	r2, r1
 8001214:	4603      	mov	r3, r0
 8001216:	0d95      	lsrs	r5, r2, #22
 8001218:	0294      	lsls	r4, r2, #10
 800121a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800121e:	f04f 0300 	mov.w	r3, #0
 8001222:	4620      	mov	r0, r4
 8001224:	4629      	mov	r1, r5
 8001226:	f7ff f803 	bl	8000230 <__aeabi_uldivmod>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	4613      	mov	r3, r2
 8001230:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8001232:	68fb      	ldr	r3, [r7, #12]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bdb0      	pop	{r4, r5, r7, pc}

0800123c <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 800123c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001240:	b085      	sub	sp, #20
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001246:	2100      	movs	r1, #0
 8001248:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	2000      	movs	r0, #0
 800124e:	460c      	mov	r4, r1
 8001250:	4605      	mov	r5, r0
 8001252:	4620      	mov	r0, r4
 8001254:	4629      	mov	r1, r5
 8001256:	f04f 0a00 	mov.w	sl, #0
 800125a:	f04f 0b00 	mov.w	fp, #0
 800125e:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8001262:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8001266:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 800126a:	4650      	mov	r0, sl
 800126c:	4659      	mov	r1, fp
 800126e:	1b02      	subs	r2, r0, r4
 8001270:	eb61 0305 	sbc.w	r3, r1, r5
 8001274:	f04f 0000 	mov.w	r0, #0
 8001278:	f04f 0100 	mov.w	r1, #0
 800127c:	0099      	lsls	r1, r3, #2
 800127e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001282:	0090      	lsls	r0, r2, #2
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	eb12 0804 	adds.w	r8, r2, r4
 800128c:	eb43 0905 	adc.w	r9, r3, r5
 8001290:	f04f 0200 	mov.w	r2, #0
 8001294:	f04f 0300 	mov.w	r3, #0
 8001298:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800129c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80012a0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80012a4:	4690      	mov	r8, r2
 80012a6:	4699      	mov	r9, r3
 80012a8:	4640      	mov	r0, r8
 80012aa:	4649      	mov	r1, r9
 80012ac:	f04f 0200 	mov.w	r2, #0
 80012b0:	f04f 0300 	mov.w	r3, #0
 80012b4:	0a82      	lsrs	r2, r0, #10
 80012b6:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80012ba:	0a8b      	lsrs	r3, r1, #10
 80012bc:	4613      	mov	r3, r2
 80012be:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 80012c0:	68fb      	ldr	r3, [r7, #12]
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3714      	adds	r7, #20
 80012c6:	46bd      	mov	sp, r7
 80012c8:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80012cc:	4770      	bx	lr

080012ce <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b084      	sub	sp, #16
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff ff93 	bl	8001202 <TIMER_IF_Convert_ms2Tick>
 80012dc:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 80012de:	f000 f8d5 	bl	800148c <GetTimerTicks>
 80012e2:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80012e4:	e000      	b.n	80012e8 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 80012e6:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80012e8:	f000 f8d0 	bl	800148c <GetTimerTicks>
 80012ec:	4602      	mov	r2, r0
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d8f6      	bhi.n	80012e6 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 80012f8:	bf00      	nop
 80012fa:	bf00      	nop
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 800130a:	f00b f8af 	bl	800c46c <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b084      	sub	sp, #16
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 800131e:	f000 f8a5 	bl	800146c <TIMER_IF_BkUp_Read_MSBticks>
 8001322:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	3301      	adds	r3, #1
 8001328:	4618      	mov	r0, r3
 800132a:	f000 f88f 	bl	800144c <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 800132e:	bf00      	nop
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8001336:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800133a:	b08c      	sub	sp, #48	; 0x30
 800133c:	af00      	add	r7, sp, #0
 800133e:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8001344:	f000 f8a2 	bl	800148c <GetTimerTicks>
 8001348:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 800134a:	f000 f88f 	bl	800146c <TIMER_IF_BkUp_Read_MSBticks>
 800134e:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8001350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001352:	2200      	movs	r2, #0
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	60fa      	str	r2, [r7, #12]
 8001358:	f04f 0200 	mov.w	r2, #0
 800135c:	f04f 0300 	mov.w	r3, #0
 8001360:	68b9      	ldr	r1, [r7, #8]
 8001362:	000b      	movs	r3, r1
 8001364:	2200      	movs	r2, #0
 8001366:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001368:	2000      	movs	r0, #0
 800136a:	460c      	mov	r4, r1
 800136c:	4605      	mov	r5, r0
 800136e:	eb12 0804 	adds.w	r8, r2, r4
 8001372:	eb43 0905 	adc.w	r9, r3, r5
 8001376:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 800137a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800137e:	f04f 0200 	mov.w	r2, #0
 8001382:	f04f 0300 	mov.w	r3, #0
 8001386:	0a82      	lsrs	r2, r0, #10
 8001388:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 800138c:	0a8b      	lsrs	r3, r1, #10
 800138e:	4613      	mov	r3, r2
 8001390:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	2200      	movs	r2, #0
 8001396:	603b      	str	r3, [r7, #0]
 8001398:	607a      	str	r2, [r7, #4]
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 80013a0:	f04f 0b00 	mov.w	fp, #0
 80013a4:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff ff46 	bl	800123c <TIMER_IF_Convert_Tick2ms>
 80013b0:	4603      	mov	r3, r0
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 80013b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3730      	adds	r7, #48	; 0x30
 80013be:	46bd      	mov	sp, r7
 80013c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080013c4 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	2100      	movs	r1, #0
 80013d0:	4803      	ldr	r0, [pc, #12]	; (80013e0 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 80013d2:	f003 fdbf 	bl	8004f54 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000154 	.word	0x20000154

080013e4 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	2101      	movs	r1, #1
 80013f0:	4803      	ldr	r0, [pc, #12]	; (8001400 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 80013f2:	f003 fdaf 	bl	8004f54 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000154 	.word	0x20000154

08001404 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 800140e:	2100      	movs	r1, #0
 8001410:	4804      	ldr	r0, [pc, #16]	; (8001424 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8001412:	f003 fdb7 	bl	8004f84 <HAL_RTCEx_BKUPRead>
 8001416:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8001418:	687b      	ldr	r3, [r7, #4]
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000154 	.word	0x20000154

08001428 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8001432:	2101      	movs	r1, #1
 8001434:	4804      	ldr	r0, [pc, #16]	; (8001448 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8001436:	f003 fda5 	bl	8004f84 <HAL_RTCEx_BKUPRead>
 800143a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 800143c:	687b      	ldr	r3, [r7, #4]
}
 800143e:	4618      	mov	r0, r3
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000154 	.word	0x20000154

0800144c <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	2102      	movs	r1, #2
 8001458:	4803      	ldr	r0, [pc, #12]	; (8001468 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 800145a:	f003 fd7b 	bl	8004f54 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000154 	.word	0x20000154

0800146c <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8001472:	2102      	movs	r1, #2
 8001474:	4804      	ldr	r0, [pc, #16]	; (8001488 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8001476:	f003 fd85 	bl	8004f84 <HAL_RTCEx_BKUPRead>
 800147a:	6078      	str	r0, [r7, #4]
  return MSBticks;
 800147c:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000154 	.word	0x20000154

0800148c <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8001492:	480b      	ldr	r0, [pc, #44]	; (80014c0 <GetTimerTicks+0x34>)
 8001494:	f7ff fdd8 	bl	8001048 <LL_RTC_TIME_GetSubSecond>
 8001498:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800149a:	e003      	b.n	80014a4 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 800149c:	4808      	ldr	r0, [pc, #32]	; (80014c0 <GetTimerTicks+0x34>)
 800149e:	f7ff fdd3 	bl	8001048 <LL_RTC_TIME_GetSubSecond>
 80014a2:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80014a4:	4806      	ldr	r0, [pc, #24]	; (80014c0 <GetTimerTicks+0x34>)
 80014a6:	f7ff fdcf 	bl	8001048 <LL_RTC_TIME_GetSubSecond>
 80014aa:	4602      	mov	r2, r0
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d1f4      	bne.n	800149c <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40002800 	.word	0x40002800

080014c4 <LL_AHB2_GRP1_EnableClock>:
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80014cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4313      	orrs	r3, r2
 80014da:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80014dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4013      	ands	r3, r2
 80014e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014e8:	68fb      	ldr	r3, [r7, #12]
}
 80014ea:	bf00      	nop
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr

080014f4 <LL_APB1_GRP1_EnableClock>:
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80014fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001500:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001502:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4313      	orrs	r3, r2
 800150a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800150c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001510:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4013      	ands	r3, r2
 8001516:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001518:	68fb      	ldr	r3, [r7, #12]
}
 800151a:	bf00      	nop
 800151c:	3714      	adds	r7, #20
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr

08001524 <LL_APB1_GRP1_DisableClock>:
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 800152c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001530:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	43db      	mvns	r3, r3
 8001536:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800153a:	4013      	ands	r3, r2
 800153c:	658b      	str	r3, [r1, #88]	; 0x58
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr

08001548 <LL_APB2_GRP1_EnableClock>:
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001550:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001554:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001556:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4313      	orrs	r3, r2
 800155e:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001564:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4013      	ands	r3, r2
 800156a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800156c:	68fb      	ldr	r3, [r7, #12]
}
 800156e:	bf00      	nop
 8001570:	3714      	adds	r7, #20
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr

08001578 <LL_APB2_GRP1_DisableClock>:
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001580:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001584:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	43db      	mvns	r3, r3
 800158a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800158e:	4013      	ands	r3, r2
 8001590:	660b      	str	r3, [r1, #96]	; 0x60
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr

0800159c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015a0:	4b22      	ldr	r3, [pc, #136]	; (800162c <MX_USART1_UART_Init+0x90>)
 80015a2:	4a23      	ldr	r2, [pc, #140]	; (8001630 <MX_USART1_UART_Init+0x94>)
 80015a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015a6:	4b21      	ldr	r3, [pc, #132]	; (800162c <MX_USART1_UART_Init+0x90>)
 80015a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015ae:	4b1f      	ldr	r3, [pc, #124]	; (800162c <MX_USART1_UART_Init+0x90>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015b4:	4b1d      	ldr	r3, [pc, #116]	; (800162c <MX_USART1_UART_Init+0x90>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015ba:	4b1c      	ldr	r3, [pc, #112]	; (800162c <MX_USART1_UART_Init+0x90>)
 80015bc:	2200      	movs	r2, #0
 80015be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015c0:	4b1a      	ldr	r3, [pc, #104]	; (800162c <MX_USART1_UART_Init+0x90>)
 80015c2:	220c      	movs	r2, #12
 80015c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015c6:	4b19      	ldr	r3, [pc, #100]	; (800162c <MX_USART1_UART_Init+0x90>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015cc:	4b17      	ldr	r3, [pc, #92]	; (800162c <MX_USART1_UART_Init+0x90>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015d2:	4b16      	ldr	r3, [pc, #88]	; (800162c <MX_USART1_UART_Init+0x90>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015d8:	4b14      	ldr	r3, [pc, #80]	; (800162c <MX_USART1_UART_Init+0x90>)
 80015da:	2200      	movs	r2, #0
 80015dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015de:	4b13      	ldr	r3, [pc, #76]	; (800162c <MX_USART1_UART_Init+0x90>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015e4:	4811      	ldr	r0, [pc, #68]	; (800162c <MX_USART1_UART_Init+0x90>)
 80015e6:	f004 f9b8 	bl	800595a <HAL_UART_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80015f0:	f7ff f9a0 	bl	8000934 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015f4:	2100      	movs	r1, #0
 80015f6:	480d      	ldr	r0, [pc, #52]	; (800162c <MX_USART1_UART_Init+0x90>)
 80015f8:	f006 fa67 	bl	8007aca <HAL_UARTEx_SetTxFifoThreshold>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001602:	f7ff f997 	bl	8000934 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001606:	2100      	movs	r1, #0
 8001608:	4808      	ldr	r0, [pc, #32]	; (800162c <MX_USART1_UART_Init+0x90>)
 800160a:	f006 fa9c 	bl	8007b46 <HAL_UARTEx_SetRxFifoThreshold>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001614:	f7ff f98e 	bl	8000934 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8001618:	4804      	ldr	r0, [pc, #16]	; (800162c <MX_USART1_UART_Init+0x90>)
 800161a:	f006 f9e3 	bl	80079e4 <HAL_UARTEx_EnableFifoMode>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001624:	f7ff f986 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}
 800162c:	200001a8 	.word	0x200001a8
 8001630:	40013800 	.word	0x40013800

08001634 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001638:	4b22      	ldr	r3, [pc, #136]	; (80016c4 <MX_USART2_UART_Init+0x90>)
 800163a:	4a23      	ldr	r2, [pc, #140]	; (80016c8 <MX_USART2_UART_Init+0x94>)
 800163c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800163e:	4b21      	ldr	r3, [pc, #132]	; (80016c4 <MX_USART2_UART_Init+0x90>)
 8001640:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001644:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001646:	4b1f      	ldr	r3, [pc, #124]	; (80016c4 <MX_USART2_UART_Init+0x90>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800164c:	4b1d      	ldr	r3, [pc, #116]	; (80016c4 <MX_USART2_UART_Init+0x90>)
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001652:	4b1c      	ldr	r3, [pc, #112]	; (80016c4 <MX_USART2_UART_Init+0x90>)
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001658:	4b1a      	ldr	r3, [pc, #104]	; (80016c4 <MX_USART2_UART_Init+0x90>)
 800165a:	220c      	movs	r2, #12
 800165c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800165e:	4b19      	ldr	r3, [pc, #100]	; (80016c4 <MX_USART2_UART_Init+0x90>)
 8001660:	2200      	movs	r2, #0
 8001662:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001664:	4b17      	ldr	r3, [pc, #92]	; (80016c4 <MX_USART2_UART_Init+0x90>)
 8001666:	2200      	movs	r2, #0
 8001668:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800166a:	4b16      	ldr	r3, [pc, #88]	; (80016c4 <MX_USART2_UART_Init+0x90>)
 800166c:	2200      	movs	r2, #0
 800166e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001670:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <MX_USART2_UART_Init+0x90>)
 8001672:	2200      	movs	r2, #0
 8001674:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001676:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <MX_USART2_UART_Init+0x90>)
 8001678:	2200      	movs	r2, #0
 800167a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800167c:	4811      	ldr	r0, [pc, #68]	; (80016c4 <MX_USART2_UART_Init+0x90>)
 800167e:	f004 f96c 	bl	800595a <HAL_UART_Init>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001688:	f7ff f954 	bl	8000934 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800168c:	2100      	movs	r1, #0
 800168e:	480d      	ldr	r0, [pc, #52]	; (80016c4 <MX_USART2_UART_Init+0x90>)
 8001690:	f006 fa1b 	bl	8007aca <HAL_UARTEx_SetTxFifoThreshold>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800169a:	f7ff f94b 	bl	8000934 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800169e:	2100      	movs	r1, #0
 80016a0:	4808      	ldr	r0, [pc, #32]	; (80016c4 <MX_USART2_UART_Init+0x90>)
 80016a2:	f006 fa50 	bl	8007b46 <HAL_UARTEx_SetRxFifoThreshold>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80016ac:	f7ff f942 	bl	8000934 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80016b0:	4804      	ldr	r0, [pc, #16]	; (80016c4 <MX_USART2_UART_Init+0x90>)
 80016b2:	f006 f9d2 	bl	8007a5a <HAL_UARTEx_DisableFifoMode>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80016bc:	f7ff f93a 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016c0:	bf00      	nop
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000238 	.word	0x20000238
 80016c8:	40004400 	.word	0x40004400

080016cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b096      	sub	sp, #88	; 0x58
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016e4:	f107 030c 	add.w	r3, r7, #12
 80016e8:	2238      	movs	r2, #56	; 0x38
 80016ea:	2100      	movs	r1, #0
 80016ec:	4618      	mov	r0, r3
 80016ee:	f00b facb 	bl	800cc88 <memset>
  if(uartHandle->Instance==USART1)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a45      	ldr	r2, [pc, #276]	; (800180c <HAL_UART_MspInit+0x140>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d157      	bne.n	80017ac <HAL_UART_MspInit+0xe0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80016fc:	2301      	movs	r3, #1
 80016fe:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001700:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001704:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001706:	f107 030c 	add.w	r3, r7, #12
 800170a:	4618      	mov	r0, r3
 800170c:	f002 ffb2 	bl	8004674 <HAL_RCCEx_PeriphCLKConfig>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001716:	f7ff f90d 	bl	8000934 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800171a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800171e:	f7ff ff13 	bl	8001548 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001722:	2002      	movs	r0, #2
 8001724:	f7ff fece 	bl	80014c4 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8001728:	23c0      	movs	r3, #192	; 0xc0
 800172a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172c:	2302      	movs	r3, #2
 800172e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001734:	2303      	movs	r3, #3
 8001736:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001738:	2307      	movs	r3, #7
 800173a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001740:	4619      	mov	r1, r3
 8001742:	4833      	ldr	r0, [pc, #204]	; (8001810 <HAL_UART_MspInit+0x144>)
 8001744:	f001 f980 	bl	8002a48 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8001748:	4b32      	ldr	r3, [pc, #200]	; (8001814 <HAL_UART_MspInit+0x148>)
 800174a:	4a33      	ldr	r2, [pc, #204]	; (8001818 <HAL_UART_MspInit+0x14c>)
 800174c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800174e:	4b31      	ldr	r3, [pc, #196]	; (8001814 <HAL_UART_MspInit+0x148>)
 8001750:	2212      	movs	r2, #18
 8001752:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001754:	4b2f      	ldr	r3, [pc, #188]	; (8001814 <HAL_UART_MspInit+0x148>)
 8001756:	2210      	movs	r2, #16
 8001758:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800175a:	4b2e      	ldr	r3, [pc, #184]	; (8001814 <HAL_UART_MspInit+0x148>)
 800175c:	2200      	movs	r2, #0
 800175e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001760:	4b2c      	ldr	r3, [pc, #176]	; (8001814 <HAL_UART_MspInit+0x148>)
 8001762:	2280      	movs	r2, #128	; 0x80
 8001764:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001766:	4b2b      	ldr	r3, [pc, #172]	; (8001814 <HAL_UART_MspInit+0x148>)
 8001768:	2200      	movs	r2, #0
 800176a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800176c:	4b29      	ldr	r3, [pc, #164]	; (8001814 <HAL_UART_MspInit+0x148>)
 800176e:	2200      	movs	r2, #0
 8001770:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001772:	4b28      	ldr	r3, [pc, #160]	; (8001814 <HAL_UART_MspInit+0x148>)
 8001774:	2200      	movs	r2, #0
 8001776:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001778:	4b26      	ldr	r3, [pc, #152]	; (8001814 <HAL_UART_MspInit+0x148>)
 800177a:	2200      	movs	r2, #0
 800177c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800177e:	4825      	ldr	r0, [pc, #148]	; (8001814 <HAL_UART_MspInit+0x148>)
 8001780:	f000 fd78 	bl	8002274 <HAL_DMA_Init>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 800178a:	f7ff f8d3 	bl	8000934 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a20      	ldr	r2, [pc, #128]	; (8001814 <HAL_UART_MspInit+0x148>)
 8001792:	679a      	str	r2, [r3, #120]	; 0x78
 8001794:	4a1f      	ldr	r2, [pc, #124]	; (8001814 <HAL_UART_MspInit+0x148>)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	2102      	movs	r1, #2
 800179e:	2024      	movs	r0, #36	; 0x24
 80017a0:	f000 fd31 	bl	8002206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017a4:	2024      	movs	r0, #36	; 0x24
 80017a6:	f000 fd48 	bl	800223a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80017aa:	e02b      	b.n	8001804 <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART2)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a1a      	ldr	r2, [pc, #104]	; (800181c <HAL_UART_MspInit+0x150>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d126      	bne.n	8001804 <HAL_UART_MspInit+0x138>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80017b6:	2302      	movs	r3, #2
 80017b8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80017ba:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80017be:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017c0:	f107 030c 	add.w	r3, r7, #12
 80017c4:	4618      	mov	r0, r3
 80017c6:	f002 ff55 	bl	8004674 <HAL_RCCEx_PeriphCLKConfig>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <HAL_UART_MspInit+0x108>
      Error_Handler();
 80017d0:	f7ff f8b0 	bl	8000934 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80017d4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80017d8:	f7ff fe8c 	bl	80014f4 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017dc:	2001      	movs	r0, #1
 80017de:	f7ff fe71 	bl	80014c4 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 80017e2:	230c      	movs	r3, #12
 80017e4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e6:	2302      	movs	r3, #2
 80017e8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ee:	2300      	movs	r3, #0
 80017f0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017f2:	2307      	movs	r3, #7
 80017f4:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80017fa:	4619      	mov	r1, r3
 80017fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001800:	f001 f922 	bl	8002a48 <HAL_GPIO_Init>
}
 8001804:	bf00      	nop
 8001806:	3758      	adds	r7, #88	; 0x58
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40013800 	.word	0x40013800
 8001810:	48000400 	.word	0x48000400
 8001814:	200002c8 	.word	0x200002c8
 8001818:	40020008 	.word	0x40020008
 800181c:	40004400 	.word	0x40004400

08001820 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a12      	ldr	r2, [pc, #72]	; (8001878 <HAL_UART_MspDeInit+0x58>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d110      	bne.n	8001854 <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8001832:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001836:	f7ff fe9f 	bl	8001578 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 800183a:	21c0      	movs	r1, #192	; 0xc0
 800183c:	480f      	ldr	r0, [pc, #60]	; (800187c <HAL_UART_MspDeInit+0x5c>)
 800183e:	f001 fa63 	bl	8002d08 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001846:	4618      	mov	r0, r3
 8001848:	f000 fdbc 	bl	80023c4 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800184c:	2024      	movs	r0, #36	; 0x24
 800184e:	f000 fd02 	bl	8002256 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8001852:	e00d      	b.n	8001870 <HAL_UART_MspDeInit+0x50>
  else if(uartHandle->Instance==USART2)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a09      	ldr	r2, [pc, #36]	; (8001880 <HAL_UART_MspDeInit+0x60>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d108      	bne.n	8001870 <HAL_UART_MspDeInit+0x50>
    __HAL_RCC_USART2_CLK_DISABLE();
 800185e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001862:	f7ff fe5f 	bl	8001524 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 8001866:	210c      	movs	r1, #12
 8001868:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800186c:	f001 fa4c 	bl	8002d08 <HAL_GPIO_DeInit>
}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40013800 	.word	0x40013800
 800187c:	48000400 	.word	0x48000400
 8001880:	40004400 	.word	0x40004400

08001884 <LL_APB2_GRP1_ForceReset>:
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 800188c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001890:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001892:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4313      	orrs	r3, r2
 800189a:	640b      	str	r3, [r1, #64]	; 0x40
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr

080018a6 <LL_APB2_GRP1_ReleaseReset>:
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 80018ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	43db      	mvns	r3, r3
 80018b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018bc:	4013      	ands	r3, r2
 80018be:	640b      	str	r3, [r1, #64]	; 0x40
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bc80      	pop	{r7}
 80018c8:	4770      	bx	lr
	...

080018cc <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80018d4:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <LL_EXTI_EnableIT_0_31+0x24>)
 80018d6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80018da:	4905      	ldr	r1, [pc, #20]	; (80018f0 <LL_EXTI_EnableIT_0_31+0x24>)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4313      	orrs	r3, r2
 80018e0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	58000800 	.word	0x58000800

080018f4 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80018fc:	4a07      	ldr	r2, [pc, #28]	; (800191c <vcom_Init+0x28>)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8001902:	f7fe fe3d 	bl	8000580 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001906:	f7ff fe49 	bl	800159c <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 800190a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800190e:	f7ff ffdd 	bl	80018cc <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8001912:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8001914:	4618      	mov	r0, r3
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	2000032c 	.word	0x2000032c

08001920 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 8001924:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001928:	f7ff ffac 	bl	8001884 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 800192c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001930:	f7ff ffb9 	bl	80018a6 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8001934:	4804      	ldr	r0, [pc, #16]	; (8001948 <vcom_DeInit+0x28>)
 8001936:	f7ff ff73 	bl	8001820 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 800193a:	200f      	movs	r0, #15
 800193c:	f000 fc8b 	bl	8002256 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8001940:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8001942:	4618      	mov	r0, r3
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	200001a8 	.word	0x200001a8

0800194c <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	460b      	mov	r3, r1
 8001956:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8001958:	887b      	ldrh	r3, [r7, #2]
 800195a:	461a      	mov	r2, r3
 800195c:	6879      	ldr	r1, [r7, #4]
 800195e:	4804      	ldr	r0, [pc, #16]	; (8001970 <vcom_Trace_DMA+0x24>)
 8001960:	f004 f8a2 	bl	8005aa8 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8001964:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	200001a8 	.word	0x200001a8

08001974 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 800197c:	4a19      	ldr	r2, [pc, #100]	; (80019e4 <vcom_ReceiveInit+0x70>)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8001982:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001986:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8001988:	f107 0308 	add.w	r3, r7, #8
 800198c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001990:	4815      	ldr	r0, [pc, #84]	; (80019e8 <vcom_ReceiveInit+0x74>)
 8001992:	f005 ff9a 	bl	80078ca <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8001996:	bf00      	nop
 8001998:	4b13      	ldr	r3, [pc, #76]	; (80019e8 <vcom_ReceiveInit+0x74>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019a6:	d0f7      	beq.n	8001998 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 80019a8:	bf00      	nop
 80019aa:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <vcom_ReceiveInit+0x74>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	69db      	ldr	r3, [r3, #28]
 80019b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019b8:	d1f7      	bne.n	80019aa <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 80019ba:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <vcom_ReceiveInit+0x74>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <vcom_ReceiveInit+0x74>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80019c8:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 80019ca:	4807      	ldr	r0, [pc, #28]	; (80019e8 <vcom_ReceiveInit+0x74>)
 80019cc:	f005 ffd8 	bl	8007980 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 80019d0:	2201      	movs	r2, #1
 80019d2:	4906      	ldr	r1, [pc, #24]	; (80019ec <vcom_ReceiveInit+0x78>)
 80019d4:	4804      	ldr	r0, [pc, #16]	; (80019e8 <vcom_ReceiveInit+0x74>)
 80019d6:	f004 f811 	bl	80059fc <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 80019da:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20000330 	.word	0x20000330
 80019e8:	200001a8 	.word	0x200001a8
 80019ec:	20000328 	.word	0x20000328

080019f0 <vcom_Resume>:

void vcom_Resume(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019f4:	480c      	ldr	r0, [pc, #48]	; (8001a28 <vcom_Resume+0x38>)
 80019f6:	f003 ffb0 	bl	800595a <HAL_UART_Init>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <vcom_Resume+0x14>
  {
    Error_Handler();
 8001a00:	f7fe ff98 	bl	8000934 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001a04:	4809      	ldr	r0, [pc, #36]	; (8001a2c <vcom_Resume+0x3c>)
 8001a06:	f000 fc35 	bl	8002274 <HAL_DMA_Init>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <vcom_Resume+0x24>
  {
    Error_Handler();
 8001a10:	f7fe ff90 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a14:	4806      	ldr	r0, [pc, #24]	; (8001a30 <vcom_Resume+0x40>)
 8001a16:	f003 ffa0 	bl	800595a <HAL_UART_Init>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <vcom_Resume+0x34>
    {
      Error_Handler();
 8001a20:	f7fe ff88 	bl	8000934 <Error_Handler>
    }
  /* USER CODE END vcom_Resume_2 */
}
 8001a24:	bf00      	nop
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	200001a8 	.word	0x200001a8
 8001a2c:	200002c8 	.word	0x200002c8
 8001a30:	20000238 	.word	0x20000238

08001a34 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a05      	ldr	r2, [pc, #20]	; (8001a58 <HAL_UART_TxCpltCallback+0x24>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d103      	bne.n	8001a4e <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8001a46:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <HAL_UART_TxCpltCallback+0x28>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40013800 	.word	0x40013800
 8001a5c:	2000032c 	.word	0x2000032c

08001a60 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a0d      	ldr	r2, [pc, #52]	; (8001aa4 <HAL_UART_RxCpltCallback+0x44>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d113      	bne.n	8001a9a <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8001a72:	4b0d      	ldr	r3, [pc, #52]	; (8001aa8 <HAL_UART_RxCpltCallback+0x48>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d00a      	beq.n	8001a90 <HAL_UART_RxCpltCallback+0x30>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d105      	bne.n	8001a90 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8001a84:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <HAL_UART_RxCpltCallback+0x48>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	4807      	ldr	r0, [pc, #28]	; (8001aac <HAL_UART_RxCpltCallback+0x4c>)
 8001a8e:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8001a90:	2201      	movs	r2, #1
 8001a92:	4906      	ldr	r1, [pc, #24]	; (8001aac <HAL_UART_RxCpltCallback+0x4c>)
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f003 ffb1 	bl	80059fc <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40013800 	.word	0x40013800
 8001aa8:	20000330 	.word	0x20000330
 8001aac:	20000328 	.word	0x20000328

08001ab0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ab0:	480d      	ldr	r0, [pc, #52]	; (8001ae8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ab2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ab4:	f7ff fac2 	bl	800103c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ab8:	480c      	ldr	r0, [pc, #48]	; (8001aec <LoopForever+0x6>)
  ldr r1, =_edata
 8001aba:	490d      	ldr	r1, [pc, #52]	; (8001af0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001abc:	4a0d      	ldr	r2, [pc, #52]	; (8001af4 <LoopForever+0xe>)
  movs r3, #0
 8001abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ac0:	e002      	b.n	8001ac8 <LoopCopyDataInit>

08001ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ac6:	3304      	adds	r3, #4

08001ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001acc:	d3f9      	bcc.n	8001ac2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ace:	4a0a      	ldr	r2, [pc, #40]	; (8001af8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ad0:	4c0a      	ldr	r4, [pc, #40]	; (8001afc <LoopForever+0x16>)
  movs r3, #0
 8001ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ad4:	e001      	b.n	8001ada <LoopFillZerobss>

08001ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ad8:	3204      	adds	r2, #4

08001ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001adc:	d3fb      	bcc.n	8001ad6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001ade:	f00b f8a1 	bl	800cc24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ae2:	f7fe febc 	bl	800085e <main>

08001ae6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ae6:	e7fe      	b.n	8001ae6 <LoopForever>
  ldr   r0, =_estack
 8001ae8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001aec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001af4:	0800e3a4 	.word	0x0800e3a4
  ldr r2, =_sbss
 8001af8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001afc:	2000089c 	.word	0x2000089c

08001b00 <AES_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b00:	e7fe      	b.n	8001b00 <AES_IRQHandler>

08001b02 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b086      	sub	sp, #24
 8001b06:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8001b08:	1d3b      	adds	r3, r7, #4
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	605a      	str	r2, [r3, #4]
 8001b10:	609a      	str	r2, [r3, #8]
 8001b12:	60da      	str	r2, [r3, #12]
 8001b14:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8001b16:	2310      	movs	r3, #16
 8001b18:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b22:	2303      	movs	r3, #3
 8001b24:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8001b26:	1d3b      	adds	r3, r7, #4
 8001b28:	4619      	mov	r1, r3
 8001b2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b2e:	f000 ff8b 	bl	8002a48 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8001b32:	2320      	movs	r3, #32
 8001b34:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8001b36:	1d3b      	adds	r3, r7, #4
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b3e:	f000 ff83 	bl	8002a48 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001b42:	2200      	movs	r2, #0
 8001b44:	2120      	movs	r1, #32
 8001b46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b4a:	f001 f9ab 	bl	8002ea4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2110      	movs	r1, #16
 8001b52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b56:	f001 f9a5 	bl	8002ea4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	2b03      	cmp	r3, #3
 8001b72:	d83f      	bhi.n	8001bf4 <BSP_RADIO_ConfigRFSwitch+0x90>
 8001b74:	a201      	add	r2, pc, #4	; (adr r2, 8001b7c <BSP_RADIO_ConfigRFSwitch+0x18>)
 8001b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b7a:	bf00      	nop
 8001b7c:	08001b8d 	.word	0x08001b8d
 8001b80:	08001ba7 	.word	0x08001ba7
 8001b84:	08001bc1 	.word	0x08001bc1
 8001b88:	08001bdb 	.word	0x08001bdb
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2110      	movs	r1, #16
 8001b90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b94:	f001 f986 	bl	8002ea4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	2120      	movs	r1, #32
 8001b9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ba0:	f001 f980 	bl	8002ea4 <HAL_GPIO_WritePin>
      break;      
 8001ba4:	e027      	b.n	8001bf6 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	2110      	movs	r1, #16
 8001baa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bae:	f001 f979 	bl	8002ea4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2120      	movs	r1, #32
 8001bb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bba:	f001 f973 	bl	8002ea4 <HAL_GPIO_WritePin>
      break;
 8001bbe:	e01a      	b.n	8001bf6 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	2110      	movs	r1, #16
 8001bc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bc8:	f001 f96c 	bl	8002ea4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8001bcc:	2201      	movs	r2, #1
 8001bce:	2120      	movs	r1, #32
 8001bd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bd4:	f001 f966 	bl	8002ea4 <HAL_GPIO_WritePin>
      break;
 8001bd8:	e00d      	b.n	8001bf6 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2110      	movs	r1, #16
 8001bde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001be2:	f001 f95f 	bl	8002ea4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8001be6:	2201      	movs	r2, #1
 8001be8:	2120      	movs	r1, #32
 8001bea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bee:	f001 f959 	bl	8002ea4 <HAL_GPIO_WritePin>
      break;
 8001bf2:	e000      	b.n	8001bf6 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8001bf4:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8001c04:	2302      	movs	r3, #2
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr

08001c0e <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8001c12:	2301      	movs	r3, #1
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr

08001c1c <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8001c20:	2301      	movs	r3, #1
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr

08001c2a <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b085      	sub	sp, #20
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	4603      	mov	r3, r0
 8001c32:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d102      	bne.n	8001c40 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8001c3a:	230f      	movs	r3, #15
 8001c3c:	60fb      	str	r3, [r7, #12]
 8001c3e:	e001      	b.n	8001c44 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8001c40:	2316      	movs	r3, #22
 8001c42:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001c44:	68fb      	ldr	r3, [r7, #12]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr

08001c50 <LL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_DisableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGSleepMode(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8001c54:	4b04      	ldr	r3, [pc, #16]	; (8001c68 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	4a03      	ldr	r2, [pc, #12]	; (8001c68 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8001c5a:	f023 0301 	bic.w	r3, r3, #1
 8001c5e:	6053      	str	r3, [r2, #4]
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr
 8001c68:	e0042000 	.word	0xe0042000

08001c6c <LL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_DisableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStopMode(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8001c70:	4b04      	ldr	r3, [pc, #16]	; (8001c84 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	4a03      	ldr	r2, [pc, #12]	; (8001c84 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8001c76:	f023 0302 	bic.w	r3, r3, #2
 8001c7a:	6053      	str	r3, [r2, #4]
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr
 8001c84:	e0042000 	.word	0xe0042000

08001c88 <LL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disable the Debug Module during STANDBY mode
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_DisableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStandbyMode(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8001c8c:	4b04      	ldr	r3, [pc, #16]	; (8001ca0 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	4a03      	ldr	r2, [pc, #12]	; (8001ca0 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8001c92:	f023 0304 	bic.w	r3, r3, #4
 8001c96:	6053      	str	r3, [r2, #4]
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr
 8001ca0:	e0042000 	.word	0xe0042000

08001ca4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001caa:	2300      	movs	r3, #0
 8001cac:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cae:	2003      	movs	r0, #3
 8001cb0:	f000 fa9e 	bl	80021f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001cb4:	f002 fb00 	bl	80042b8 <HAL_RCC_GetHCLKFreq>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	4a09      	ldr	r2, [pc, #36]	; (8001ce0 <HAL_Init+0x3c>)
 8001cbc:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cbe:	200f      	movs	r0, #15
 8001cc0:	f7ff f85e 	bl	8000d80 <HAL_InitTick>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d002      	beq.n	8001cd0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	71fb      	strb	r3, [r7, #7]
 8001cce:	e001      	b.n	8001cd4 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cd0:	f7fe ff29 	bl	8000b26 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cd4:	79fb      	ldrb	r3, [r7, #7]
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000000 	.word	0x20000000

08001ce4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001ce8:	4b04      	ldr	r3, [pc, #16]	; (8001cfc <HAL_SuspendTick+0x18>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a03      	ldr	r2, [pc, #12]	; (8001cfc <HAL_SuspendTick+0x18>)
 8001cee:	f023 0302 	bic.w	r3, r3, #2
 8001cf2:	6013      	str	r3, [r2, #0]
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr
 8001cfc:	e000e010 	.word	0xe000e010

08001d00 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001d04:	4b04      	ldr	r3, [pc, #16]	; (8001d18 <HAL_ResumeTick+0x18>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a03      	ldr	r2, [pc, #12]	; (8001d18 <HAL_ResumeTick+0x18>)
 8001d0a:	f043 0302 	orr.w	r3, r3, #2
 8001d0e:	6013      	str	r3, [r2, #0]
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bc80      	pop	{r7}
 8001d16:	4770      	bx	lr
 8001d18:	e000e010 	.word	0xe000e010

08001d1c <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8001d20:	f7ff ff96 	bl	8001c50 <LL_DBGMCU_DisableDBGSleepMode>
}
 8001d24:	bf00      	nop
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8001d2c:	f7ff ff9e 	bl	8001c6c <LL_DBGMCU_DisableDBGStopMode>
}
 8001d30:	bf00      	nop
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8001d38:	f7ff ffa6 	bl	8001c88 <LL_DBGMCU_DisableDBGStandbyMode>
}
 8001d3c:	bf00      	nop
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d101      	bne.n	8001d58 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d54:	2301      	movs	r3, #1
 8001d56:	e000      	b.n	8001d5a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr

08001d64 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	f003 0303 	and.w	r3, r3, #3
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr

08001d7e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 0304 	and.w	r3, r3, #4
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	d101      	bne.n	8001d96 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d92:	2301      	movs	r3, #1
 8001d94:	e000      	b.n	8001d98 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bc80      	pop	{r7}
 8001da0:	4770      	bx	lr

08001da2 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b086      	sub	sp, #24
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001daa:	2300      	movs	r3, #0
 8001dac:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d017      	beq.n	8001df8 <HAL_ADC_IRQHandler+0x56>
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d012      	beq.n	8001df8 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd6:	f003 0310 	and.w	r3, r3, #16
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d105      	bne.n	8001dea <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f920 	bl	8002030 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2202      	movs	r2, #2
 8001df6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	f003 0304 	and.w	r3, r3, #4
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d004      	beq.n	8001e0c <HAL_ADC_IRQHandler+0x6a>
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d109      	bne.n	8001e20 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d051      	beq.n	8001eba <HAL_ADC_IRQHandler+0x118>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f003 0308 	and.w	r3, r3, #8
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d04c      	beq.n	8001eba <HAL_ADC_IRQHandler+0x118>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e24:	f003 0310 	and.w	r3, r3, #16
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d105      	bne.n	8001e38 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e30:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff ff7f 	bl	8001d40 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d031      	beq.n	8001eac <HAL_ADC_IRQHandler+0x10a>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	7e9b      	ldrb	r3, [r3, #26]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d12d      	bne.n	8001eac <HAL_ADC_IRQHandler+0x10a>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0308 	and.w	r3, r3, #8
 8001e5a:	2b08      	cmp	r3, #8
 8001e5c:	d126      	bne.n	8001eac <HAL_ADC_IRQHandler+0x10a>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff ff8b 	bl	8001d7e <LL_ADC_REG_IsConversionOngoing>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d112      	bne.n	8001e94 <HAL_ADC_IRQHandler+0xf2>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	685a      	ldr	r2, [r3, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 020c 	bic.w	r2, r2, #12
 8001e7c:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e86:	f023 0301 	bic.w	r3, r3, #1
 8001e8a:	f043 0201 	orr.w	r2, r3, #1
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	659a      	str	r2, [r3, #88]	; 0x58
 8001e92:	e00b      	b.n	8001eac <HAL_ADC_IRQHandler+0x10a>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e98:	f043 0220 	orr.w	r2, r3, #32
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea4:	f043 0201 	orr.w	r2, r3, #1
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f892 	bl	8001fd6 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	220c      	movs	r2, #12
 8001eb8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d011      	beq.n	8001ee8 <HAL_ADC_IRQHandler+0x146>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d00c      	beq.n	8001ee8 <HAL_ADC_IRQHandler+0x146>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f884 	bl	8001fe8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2280      	movs	r2, #128	; 0x80
 8001ee6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d012      	beq.n	8001f18 <HAL_ADC_IRQHandler+0x176>
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00d      	beq.n	8001f18 <HAL_ADC_IRQHandler+0x176>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f00:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 f87f 	bl	800200c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f16:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d012      	beq.n	8001f48 <HAL_ADC_IRQHandler+0x1a6>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d00d      	beq.n	8001f48 <HAL_ADC_IRQHandler+0x1a6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f30:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 f870 	bl	800201e <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f46:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	f003 0310 	and.w	r3, r3, #16
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d02b      	beq.n	8001faa <HAL_ADC_IRQHandler+0x208>
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f003 0310 	and.w	r3, r3, #16
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d026      	beq.n	8001faa <HAL_ADC_IRQHandler+0x208>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d102      	bne.n	8001f6a <HAL_ADC_IRQHandler+0x1c8>
    {
      overrun_error = 1UL;
 8001f64:	2301      	movs	r3, #1
 8001f66:	617b      	str	r3, [r7, #20]
 8001f68:	e009      	b.n	8001f7e <HAL_ADC_IRQHandler+0x1dc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff fef8 	bl	8001d64 <LL_ADC_REG_GetDMATransfer>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <HAL_ADC_IRQHandler+0x1dc>
      {
        overrun_error = 1UL;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d10e      	bne.n	8001fa2 <HAL_ADC_IRQHandler+0x200>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f88:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f94:	f043 0202 	orr.w	r2, r3, #2
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 f82c 	bl	8001ffa <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2210      	movs	r2, #16
 8001fa8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00c      	beq.n	8001fce <HAL_ADC_IRQHandler+0x22c>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d007      	beq.n	8001fce <HAL_ADC_IRQHandler+0x22c>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f83f 	bl	8002042 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fcc:	601a      	str	r2, [r3, #0]
  }
}
 8001fce:	bf00      	nop
 8001fd0:	3718      	adds	r7, #24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr

08001fe8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bc80      	pop	{r7}
 8001ff8:	4770      	bx	lr

08001ffa <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr

0800200c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr

0800201e <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800201e:	b480      	push	{r7}
 8002020:	b083      	sub	sp, #12
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr

08002030 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	bc80      	pop	{r7}
 8002040:	4770      	bx	lr

08002042 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr

08002054 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002064:	4b0c      	ldr	r3, [pc, #48]	; (8002098 <__NVIC_SetPriorityGrouping+0x44>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002070:	4013      	ands	r3, r2
 8002072:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800207c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002084:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002086:	4a04      	ldr	r2, [pc, #16]	; (8002098 <__NVIC_SetPriorityGrouping+0x44>)
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	60d3      	str	r3, [r2, #12]
}
 800208c:	bf00      	nop
 800208e:	3714      	adds	r7, #20
 8002090:	46bd      	mov	sp, r7
 8002092:	bc80      	pop	{r7}
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	e000ed00 	.word	0xe000ed00

0800209c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020a0:	4b04      	ldr	r3, [pc, #16]	; (80020b4 <__NVIC_GetPriorityGrouping+0x18>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	0a1b      	lsrs	r3, r3, #8
 80020a6:	f003 0307 	and.w	r3, r3, #7
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bc80      	pop	{r7}
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	e000ed00 	.word	0xe000ed00

080020b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	db0b      	blt.n	80020e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ca:	79fb      	ldrb	r3, [r7, #7]
 80020cc:	f003 021f 	and.w	r2, r3, #31
 80020d0:	4906      	ldr	r1, [pc, #24]	; (80020ec <__NVIC_EnableIRQ+0x34>)
 80020d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d6:	095b      	lsrs	r3, r3, #5
 80020d8:	2001      	movs	r0, #1
 80020da:	fa00 f202 	lsl.w	r2, r0, r2
 80020de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bc80      	pop	{r7}
 80020ea:	4770      	bx	lr
 80020ec:	e000e100 	.word	0xe000e100

080020f0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	db12      	blt.n	8002128 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	f003 021f 	and.w	r2, r3, #31
 8002108:	490a      	ldr	r1, [pc, #40]	; (8002134 <__NVIC_DisableIRQ+0x44>)
 800210a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210e:	095b      	lsrs	r3, r3, #5
 8002110:	2001      	movs	r0, #1
 8002112:	fa00 f202 	lsl.w	r2, r0, r2
 8002116:	3320      	adds	r3, #32
 8002118:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800211c:	f3bf 8f4f 	dsb	sy
}
 8002120:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002122:	f3bf 8f6f 	isb	sy
}
 8002126:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	bc80      	pop	{r7}
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	e000e100 	.word	0xe000e100

08002138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	6039      	str	r1, [r7, #0]
 8002142:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002148:	2b00      	cmp	r3, #0
 800214a:	db0a      	blt.n	8002162 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	b2da      	uxtb	r2, r3
 8002150:	490c      	ldr	r1, [pc, #48]	; (8002184 <__NVIC_SetPriority+0x4c>)
 8002152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002156:	0112      	lsls	r2, r2, #4
 8002158:	b2d2      	uxtb	r2, r2
 800215a:	440b      	add	r3, r1
 800215c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002160:	e00a      	b.n	8002178 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	b2da      	uxtb	r2, r3
 8002166:	4908      	ldr	r1, [pc, #32]	; (8002188 <__NVIC_SetPriority+0x50>)
 8002168:	79fb      	ldrb	r3, [r7, #7]
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	3b04      	subs	r3, #4
 8002170:	0112      	lsls	r2, r2, #4
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	440b      	add	r3, r1
 8002176:	761a      	strb	r2, [r3, #24]
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	bc80      	pop	{r7}
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	e000e100 	.word	0xe000e100
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800218c:	b480      	push	{r7}
 800218e:	b089      	sub	sp, #36	; 0x24
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	f1c3 0307 	rsb	r3, r3, #7
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	bf28      	it	cs
 80021aa:	2304      	movcs	r3, #4
 80021ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	3304      	adds	r3, #4
 80021b2:	2b06      	cmp	r3, #6
 80021b4:	d902      	bls.n	80021bc <NVIC_EncodePriority+0x30>
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	3b03      	subs	r3, #3
 80021ba:	e000      	b.n	80021be <NVIC_EncodePriority+0x32>
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c0:	f04f 32ff 	mov.w	r2, #4294967295
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	43da      	mvns	r2, r3
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	401a      	ands	r2, r3
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021d4:	f04f 31ff 	mov.w	r1, #4294967295
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	fa01 f303 	lsl.w	r3, r1, r3
 80021de:	43d9      	mvns	r1, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e4:	4313      	orrs	r3, r2
         );
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3724      	adds	r7, #36	; 0x24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc80      	pop	{r7}
 80021ee:	4770      	bx	lr

080021f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f7ff ff2b 	bl	8002054 <__NVIC_SetPriorityGrouping>
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b086      	sub	sp, #24
 800220a:	af00      	add	r7, sp, #0
 800220c:	4603      	mov	r3, r0
 800220e:	60b9      	str	r1, [r7, #8]
 8002210:	607a      	str	r2, [r7, #4]
 8002212:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002214:	f7ff ff42 	bl	800209c <__NVIC_GetPriorityGrouping>
 8002218:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	68b9      	ldr	r1, [r7, #8]
 800221e:	6978      	ldr	r0, [r7, #20]
 8002220:	f7ff ffb4 	bl	800218c <NVIC_EncodePriority>
 8002224:	4602      	mov	r2, r0
 8002226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800222a:	4611      	mov	r1, r2
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff ff83 	bl	8002138 <__NVIC_SetPriority>
}
 8002232:	bf00      	nop
 8002234:	3718      	adds	r7, #24
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b082      	sub	sp, #8
 800223e:	af00      	add	r7, sp, #0
 8002240:	4603      	mov	r3, r0
 8002242:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff ff35 	bl	80020b8 <__NVIC_EnableIRQ>
}
 800224e:	bf00      	nop
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
 800225c:	4603      	mov	r3, r0
 800225e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff ff43 	bl	80020f0 <__NVIC_DisableIRQ>
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e08e      	b.n	80023a4 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	461a      	mov	r2, r3
 800228c:	4b47      	ldr	r3, [pc, #284]	; (80023ac <HAL_DMA_Init+0x138>)
 800228e:	429a      	cmp	r2, r3
 8002290:	d80f      	bhi.n	80022b2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	461a      	mov	r2, r3
 8002298:	4b45      	ldr	r3, [pc, #276]	; (80023b0 <HAL_DMA_Init+0x13c>)
 800229a:	4413      	add	r3, r2
 800229c:	4a45      	ldr	r2, [pc, #276]	; (80023b4 <HAL_DMA_Init+0x140>)
 800229e:	fba2 2303 	umull	r2, r3, r2, r3
 80022a2:	091b      	lsrs	r3, r3, #4
 80022a4:	009a      	lsls	r2, r3, #2
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a42      	ldr	r2, [pc, #264]	; (80023b8 <HAL_DMA_Init+0x144>)
 80022ae:	641a      	str	r2, [r3, #64]	; 0x40
 80022b0:	e00e      	b.n	80022d0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	461a      	mov	r2, r3
 80022b8:	4b40      	ldr	r3, [pc, #256]	; (80023bc <HAL_DMA_Init+0x148>)
 80022ba:	4413      	add	r3, r2
 80022bc:	4a3d      	ldr	r2, [pc, #244]	; (80023b4 <HAL_DMA_Init+0x140>)
 80022be:	fba2 2303 	umull	r2, r3, r2, r3
 80022c2:	091b      	lsrs	r3, r3, #4
 80022c4:	009a      	lsls	r2, r3, #2
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a3c      	ldr	r2, [pc, #240]	; (80023c0 <HAL_DMA_Init+0x14c>)
 80022ce:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2202      	movs	r2, #2
 80022d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	6812      	ldr	r2, [r2, #0]
 80022e2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80022e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022ea:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6819      	ldr	r1, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689a      	ldr	r2, [r3, #8]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	431a      	orrs	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	431a      	orrs	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	431a      	orrs	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	431a      	orrs	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	431a      	orrs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	431a      	orrs	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	430a      	orrs	r2, r1
 8002320:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 fb24 	bl	8002970 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002330:	d102      	bne.n	8002338 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685a      	ldr	r2, [r3, #4]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002340:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002344:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800234e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d010      	beq.n	800237a <HAL_DMA_Init+0x106>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	2b04      	cmp	r3, #4
 800235e:	d80c      	bhi.n	800237a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 fb4d 	bl	8002a00 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002376:	605a      	str	r2, [r3, #4]
 8002378:	e008      	b.n	800238c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40020407 	.word	0x40020407
 80023b0:	bffdfff8 	.word	0xbffdfff8
 80023b4:	cccccccd 	.word	0xcccccccd
 80023b8:	40020000 	.word	0x40020000
 80023bc:	bffdfbf8 	.word	0xbffdfbf8
 80023c0:	40020400 	.word	0x40020400

080023c4 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e07b      	b.n	80024ce <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 0201 	bic.w	r2, r2, #1
 80023e4:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	461a      	mov	r2, r3
 80023ec:	4b3a      	ldr	r3, [pc, #232]	; (80024d8 <HAL_DMA_DeInit+0x114>)
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d80f      	bhi.n	8002412 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	461a      	mov	r2, r3
 80023f8:	4b38      	ldr	r3, [pc, #224]	; (80024dc <HAL_DMA_DeInit+0x118>)
 80023fa:	4413      	add	r3, r2
 80023fc:	4a38      	ldr	r2, [pc, #224]	; (80024e0 <HAL_DMA_DeInit+0x11c>)
 80023fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002402:	091b      	lsrs	r3, r3, #4
 8002404:	009a      	lsls	r2, r3, #2
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a35      	ldr	r2, [pc, #212]	; (80024e4 <HAL_DMA_DeInit+0x120>)
 800240e:	641a      	str	r2, [r3, #64]	; 0x40
 8002410:	e00e      	b.n	8002430 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	461a      	mov	r2, r3
 8002418:	4b33      	ldr	r3, [pc, #204]	; (80024e8 <HAL_DMA_DeInit+0x124>)
 800241a:	4413      	add	r3, r2
 800241c:	4a30      	ldr	r2, [pc, #192]	; (80024e0 <HAL_DMA_DeInit+0x11c>)
 800241e:	fba2 2303 	umull	r2, r3, r2, r3
 8002422:	091b      	lsrs	r3, r3, #4
 8002424:	009a      	lsls	r2, r3, #2
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a2f      	ldr	r2, [pc, #188]	; (80024ec <HAL_DMA_DeInit+0x128>)
 800242e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243c:	f003 021c 	and.w	r2, r3, #28
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002444:	2101      	movs	r1, #1
 8002446:	fa01 f202 	lsl.w	r2, r1, r2
 800244a:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f000 fa8f 	bl	8002970 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002462:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00f      	beq.n	800248c <HAL_DMA_DeInit+0xc8>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2b04      	cmp	r3, #4
 8002472:	d80b      	bhi.n	800248c <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 fac3 	bl	8002a00 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800248a:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40020407 	.word	0x40020407
 80024dc:	bffdfff8 	.word	0xbffdfff8
 80024e0:	cccccccd 	.word	0xcccccccd
 80024e4:	40020000 	.word	0x40020000
 80024e8:	bffdfbf8 	.word	0xbffdfbf8
 80024ec:	40020400 	.word	0x40020400

080024f0 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
 80024fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024fe:	2300      	movs	r3, #0
 8002500:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002508:	2b01      	cmp	r3, #1
 800250a:	d101      	bne.n	8002510 <HAL_DMA_Start_IT+0x20>
 800250c:	2302      	movs	r3, #2
 800250e:	e069      	b.n	80025e4 <HAL_DMA_Start_IT+0xf4>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b01      	cmp	r3, #1
 8002522:	d155      	bne.n	80025d0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2202      	movs	r2, #2
 8002528:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 0201 	bic.w	r2, r2, #1
 8002540:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	68b9      	ldr	r1, [r7, #8]
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 f9d3 	bl	80028f4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	2b00      	cmp	r3, #0
 8002554:	d008      	beq.n	8002568 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f042 020e 	orr.w	r2, r2, #14
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	e00f      	b.n	8002588 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 0204 	bic.w	r2, r2, #4
 8002576:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f042 020a 	orr.w	r2, r2, #10
 8002586:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d007      	beq.n	80025a6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025a4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d007      	beq.n	80025be <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025bc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f042 0201 	orr.w	r2, r2, #1
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	e008      	b.n	80025e2 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2280      	movs	r2, #128	; 0x80
 80025d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80025e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3718      	adds	r7, #24
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e04f      	b.n	800269e <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d008      	beq.n	800261c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2204      	movs	r2, #4
 800260e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e040      	b.n	800269e <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 020e 	bic.w	r2, r2, #14
 800262a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002636:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800263a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f022 0201 	bic.w	r2, r2, #1
 800264a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002650:	f003 021c 	and.w	r2, r3, #28
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	2101      	movs	r1, #1
 800265a:	fa01 f202 	lsl.w	r2, r1, r2
 800265e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002668:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00c      	beq.n	800268c <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002680:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800268a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr

080026a8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026b0:	2300      	movs	r3, #0
 80026b2:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d005      	beq.n	80026cc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2204      	movs	r2, #4
 80026c4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	73fb      	strb	r3, [r7, #15]
 80026ca:	e047      	b.n	800275c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 020e 	bic.w	r2, r2, #14
 80026da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0201 	bic.w	r2, r2, #1
 80026ea:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002700:	f003 021c 	and.w	r2, r3, #28
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	2101      	movs	r1, #1
 800270a:	fa01 f202 	lsl.w	r2, r1, r2
 800270e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002718:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00c      	beq.n	800273c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002730:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800273a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002750:	2b00      	cmp	r3, #0
 8002752:	d003      	beq.n	800275c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	4798      	blx	r3
    }
  }
  return status;
 800275c:	7bfb      	ldrb	r3, [r7, #15]
}
 800275e:	4618      	mov	r0, r3
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
	...

08002768 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002784:	f003 031c 	and.w	r3, r3, #28
 8002788:	2204      	movs	r2, #4
 800278a:	409a      	lsls	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4013      	ands	r3, r2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d027      	beq.n	80027e4 <HAL_DMA_IRQHandler+0x7c>
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	f003 0304 	and.w	r3, r3, #4
 800279a:	2b00      	cmp	r3, #0
 800279c:	d022      	beq.n	80027e4 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0320 	and.w	r3, r3, #32
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d107      	bne.n	80027bc <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 0204 	bic.w	r2, r2, #4
 80027ba:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c0:	f003 021c 	and.w	r2, r3, #28
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c8:	2104      	movs	r1, #4
 80027ca:	fa01 f202 	lsl.w	r2, r1, r2
 80027ce:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 8081 	beq.w	80028dc <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80027e2:	e07b      	b.n	80028dc <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e8:	f003 031c 	and.w	r3, r3, #28
 80027ec:	2202      	movs	r2, #2
 80027ee:	409a      	lsls	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	4013      	ands	r3, r2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d03d      	beq.n	8002874 <HAL_DMA_IRQHandler+0x10c>
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d038      	beq.n	8002874 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0320 	and.w	r3, r3, #32
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10b      	bne.n	8002828 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 020a 	bic.w	r2, r2, #10
 800281e:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	461a      	mov	r2, r3
 800282e:	4b2e      	ldr	r3, [pc, #184]	; (80028e8 <HAL_DMA_IRQHandler+0x180>)
 8002830:	429a      	cmp	r2, r3
 8002832:	d909      	bls.n	8002848 <HAL_DMA_IRQHandler+0xe0>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002838:	f003 031c 	and.w	r3, r3, #28
 800283c:	4a2b      	ldr	r2, [pc, #172]	; (80028ec <HAL_DMA_IRQHandler+0x184>)
 800283e:	2102      	movs	r1, #2
 8002840:	fa01 f303 	lsl.w	r3, r1, r3
 8002844:	6053      	str	r3, [r2, #4]
 8002846:	e008      	b.n	800285a <HAL_DMA_IRQHandler+0xf2>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284c:	f003 031c 	and.w	r3, r3, #28
 8002850:	4a27      	ldr	r2, [pc, #156]	; (80028f0 <HAL_DMA_IRQHandler+0x188>)
 8002852:	2102      	movs	r1, #2
 8002854:	fa01 f303 	lsl.w	r3, r1, r3
 8002858:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002866:	2b00      	cmp	r3, #0
 8002868:	d038      	beq.n	80028dc <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8002872:	e033      	b.n	80028dc <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002878:	f003 031c 	and.w	r3, r3, #28
 800287c:	2208      	movs	r2, #8
 800287e:	409a      	lsls	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4013      	ands	r3, r2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d02a      	beq.n	80028de <HAL_DMA_IRQHandler+0x176>
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	f003 0308 	and.w	r3, r3, #8
 800288e:	2b00      	cmp	r3, #0
 8002890:	d025      	beq.n	80028de <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 020e 	bic.w	r2, r2, #14
 80028a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a6:	f003 021c 	and.w	r2, r3, #28
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	2101      	movs	r1, #1
 80028b0:	fa01 f202 	lsl.w	r2, r1, r2
 80028b4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d004      	beq.n	80028de <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80028dc:	bf00      	nop
 80028de:	bf00      	nop
}
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	40020080 	.word	0x40020080
 80028ec:	40020400 	.word	0x40020400
 80028f0:	40020000 	.word	0x40020000

080028f4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
 8002900:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800290a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002910:	2b00      	cmp	r3, #0
 8002912:	d004      	beq.n	800291e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800291c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002922:	f003 021c 	and.w	r2, r3, #28
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	2101      	movs	r1, #1
 800292c:	fa01 f202 	lsl.w	r2, r1, r2
 8002930:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	2b10      	cmp	r3, #16
 8002940:	d108      	bne.n	8002954 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68ba      	ldr	r2, [r7, #8]
 8002950:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002952:	e007      	b.n	8002964 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68ba      	ldr	r2, [r7, #8]
 800295a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	60da      	str	r2, [r3, #12]
}
 8002964:	bf00      	nop
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr
	...

08002970 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	461a      	mov	r2, r3
 800297e:	4b1c      	ldr	r3, [pc, #112]	; (80029f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8002980:	429a      	cmp	r2, r3
 8002982:	d813      	bhi.n	80029ac <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002988:	089b      	lsrs	r3, r3, #2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002990:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	b2db      	uxtb	r3, r3
 800299e:	3b08      	subs	r3, #8
 80029a0:	4a14      	ldr	r2, [pc, #80]	; (80029f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80029a2:	fba2 2303 	umull	r2, r3, r2, r3
 80029a6:	091b      	lsrs	r3, r3, #4
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	e011      	b.n	80029d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b0:	089b      	lsrs	r3, r3, #2
 80029b2:	009a      	lsls	r2, r3, #2
 80029b4:	4b10      	ldr	r3, [pc, #64]	; (80029f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80029b6:	4413      	add	r3, r2
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	3b08      	subs	r3, #8
 80029c4:	4a0b      	ldr	r2, [pc, #44]	; (80029f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80029c6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ca:	091b      	lsrs	r3, r3, #4
 80029cc:	3307      	adds	r3, #7
 80029ce:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a0a      	ldr	r2, [pc, #40]	; (80029fc <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80029d4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f003 031f 	and.w	r3, r3, #31
 80029dc:	2201      	movs	r2, #1
 80029de:	409a      	lsls	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80029e4:	bf00      	nop
 80029e6:	3714      	adds	r7, #20
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bc80      	pop	{r7}
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	40020407 	.word	0x40020407
 80029f4:	cccccccd 	.word	0xcccccccd
 80029f8:	4002081c 	.word	0x4002081c
 80029fc:	40020880 	.word	0x40020880

08002a00 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a10:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	4b0a      	ldr	r3, [pc, #40]	; (8002a40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002a16:	4413      	add	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a08      	ldr	r2, [pc, #32]	; (8002a44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002a24:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	f003 0303 	and.w	r3, r3, #3
 8002a2e:	2201      	movs	r2, #1
 8002a30:	409a      	lsls	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002a36:	bf00      	nop
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr
 8002a40:	1000823f 	.word	0x1000823f
 8002a44:	40020940 	.word	0x40020940

08002a48 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b087      	sub	sp, #28
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a52:	2300      	movs	r3, #0
 8002a54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a56:	e140      	b.n	8002cda <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	fa01 f303 	lsl.w	r3, r1, r3
 8002a64:	4013      	ands	r3, r2
 8002a66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 8132 	beq.w	8002cd4 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f003 0303 	and.w	r3, r3, #3
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d005      	beq.n	8002a88 <HAL_GPIO_Init+0x40>
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f003 0303 	and.w	r3, r3, #3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d130      	bne.n	8002aea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	2203      	movs	r2, #3
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	68da      	ldr	r2, [r3, #12]
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002abe:	2201      	movs	r2, #1
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	4013      	ands	r3, r2
 8002acc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	091b      	lsrs	r3, r3, #4
 8002ad4:	f003 0201 	and.w	r2, r3, #1
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f003 0303 	and.w	r3, r3, #3
 8002af2:	2b03      	cmp	r3, #3
 8002af4:	d017      	beq.n	8002b26 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	2203      	movs	r2, #3
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	43db      	mvns	r3, r3
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f003 0303 	and.w	r3, r3, #3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d123      	bne.n	8002b7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	08da      	lsrs	r2, r3, #3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	3208      	adds	r2, #8
 8002b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	220f      	movs	r2, #15
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	4013      	ands	r3, r2
 8002b54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	691a      	ldr	r2, [r3, #16]
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	08da      	lsrs	r2, r3, #3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3208      	adds	r2, #8
 8002b74:	6939      	ldr	r1, [r7, #16]
 8002b76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	2203      	movs	r2, #3
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	43db      	mvns	r3, r3
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f003 0203 	and.w	r2, r3, #3
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f000 808c 	beq.w	8002cd4 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002bbc:	4a4e      	ldr	r2, [pc, #312]	; (8002cf8 <HAL_GPIO_Init+0x2b0>)
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	089b      	lsrs	r3, r3, #2
 8002bc2:	3302      	adds	r3, #2
 8002bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	f003 0303 	and.w	r3, r3, #3
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	2207      	movs	r2, #7
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002be6:	d00d      	beq.n	8002c04 <HAL_GPIO_Init+0x1bc>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a44      	ldr	r2, [pc, #272]	; (8002cfc <HAL_GPIO_Init+0x2b4>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d007      	beq.n	8002c00 <HAL_GPIO_Init+0x1b8>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a43      	ldr	r2, [pc, #268]	; (8002d00 <HAL_GPIO_Init+0x2b8>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d101      	bne.n	8002bfc <HAL_GPIO_Init+0x1b4>
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	e004      	b.n	8002c06 <HAL_GPIO_Init+0x1be>
 8002bfc:	2307      	movs	r3, #7
 8002bfe:	e002      	b.n	8002c06 <HAL_GPIO_Init+0x1be>
 8002c00:	2301      	movs	r3, #1
 8002c02:	e000      	b.n	8002c06 <HAL_GPIO_Init+0x1be>
 8002c04:	2300      	movs	r3, #0
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	f002 0203 	and.w	r2, r2, #3
 8002c0c:	0092      	lsls	r2, r2, #2
 8002c0e:	4093      	lsls	r3, r2
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c16:	4938      	ldr	r1, [pc, #224]	; (8002cf8 <HAL_GPIO_Init+0x2b0>)
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	089b      	lsrs	r3, r3, #2
 8002c1c:	3302      	adds	r3, #2
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c24:	4b37      	ldr	r3, [pc, #220]	; (8002d04 <HAL_GPIO_Init+0x2bc>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	4013      	ands	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d003      	beq.n	8002c48 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c48:	4a2e      	ldr	r2, [pc, #184]	; (8002d04 <HAL_GPIO_Init+0x2bc>)
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002c4e:	4b2d      	ldr	r3, [pc, #180]	; (8002d04 <HAL_GPIO_Init+0x2bc>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	43db      	mvns	r3, r3
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c72:	4a24      	ldr	r2, [pc, #144]	; (8002d04 <HAL_GPIO_Init+0x2bc>)
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8002c78:	4b22      	ldr	r3, [pc, #136]	; (8002d04 <HAL_GPIO_Init+0x2bc>)
 8002c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c7e:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	43db      	mvns	r3, r3
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	4013      	ands	r3, r2
 8002c88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8002c9e:	4a19      	ldr	r2, [pc, #100]	; (8002d04 <HAL_GPIO_Init+0x2bc>)
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8002ca6:	4b17      	ldr	r3, [pc, #92]	; (8002d04 <HAL_GPIO_Init+0x2bc>)
 8002ca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cac:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d003      	beq.n	8002ccc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002ccc:	4a0d      	ldr	r2, [pc, #52]	; (8002d04 <HAL_GPIO_Init+0x2bc>)
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f47f aeb7 	bne.w	8002a58 <HAL_GPIO_Init+0x10>
  }
}
 8002cea:	bf00      	nop
 8002cec:	bf00      	nop
 8002cee:	371c      	adds	r7, #28
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bc80      	pop	{r7}
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	40010000 	.word	0x40010000
 8002cfc:	48000400 	.word	0x48000400
 8002d00:	48000800 	.word	0x48000800
 8002d04:	58000800 	.word	0x58000800

08002d08 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b087      	sub	sp, #28
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d12:	2300      	movs	r3, #0
 8002d14:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002d16:	e0af      	b.n	8002e78 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002d18:	2201      	movs	r2, #1
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	4013      	ands	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 80a2 	beq.w	8002e72 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002d2e:	4a59      	ldr	r2, [pc, #356]	; (8002e94 <HAL_GPIO_DeInit+0x18c>)
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	089b      	lsrs	r3, r3, #2
 8002d34:	3302      	adds	r3, #2
 8002d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d3a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	2207      	movs	r2, #7
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d56:	d00d      	beq.n	8002d74 <HAL_GPIO_DeInit+0x6c>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a4f      	ldr	r2, [pc, #316]	; (8002e98 <HAL_GPIO_DeInit+0x190>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d007      	beq.n	8002d70 <HAL_GPIO_DeInit+0x68>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a4e      	ldr	r2, [pc, #312]	; (8002e9c <HAL_GPIO_DeInit+0x194>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d101      	bne.n	8002d6c <HAL_GPIO_DeInit+0x64>
 8002d68:	2302      	movs	r3, #2
 8002d6a:	e004      	b.n	8002d76 <HAL_GPIO_DeInit+0x6e>
 8002d6c:	2307      	movs	r3, #7
 8002d6e:	e002      	b.n	8002d76 <HAL_GPIO_DeInit+0x6e>
 8002d70:	2301      	movs	r3, #1
 8002d72:	e000      	b.n	8002d76 <HAL_GPIO_DeInit+0x6e>
 8002d74:	2300      	movs	r3, #0
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	f002 0203 	and.w	r2, r2, #3
 8002d7c:	0092      	lsls	r2, r2, #2
 8002d7e:	4093      	lsls	r3, r2
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d136      	bne.n	8002df4 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8002d86:	4b46      	ldr	r3, [pc, #280]	; (8002ea0 <HAL_GPIO_DeInit+0x198>)
 8002d88:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	43db      	mvns	r3, r3
 8002d90:	4943      	ldr	r1, [pc, #268]	; (8002ea0 <HAL_GPIO_DeInit+0x198>)
 8002d92:	4013      	ands	r3, r2
 8002d94:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8002d98:	4b41      	ldr	r3, [pc, #260]	; (8002ea0 <HAL_GPIO_DeInit+0x198>)
 8002d9a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	43db      	mvns	r3, r3
 8002da2:	493f      	ldr	r1, [pc, #252]	; (8002ea0 <HAL_GPIO_DeInit+0x198>)
 8002da4:	4013      	ands	r3, r2
 8002da6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8002daa:	4b3d      	ldr	r3, [pc, #244]	; (8002ea0 <HAL_GPIO_DeInit+0x198>)
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	43db      	mvns	r3, r3
 8002db2:	493b      	ldr	r1, [pc, #236]	; (8002ea0 <HAL_GPIO_DeInit+0x198>)
 8002db4:	4013      	ands	r3, r2
 8002db6:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8002db8:	4b39      	ldr	r3, [pc, #228]	; (8002ea0 <HAL_GPIO_DeInit+0x198>)
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	4937      	ldr	r1, [pc, #220]	; (8002ea0 <HAL_GPIO_DeInit+0x198>)
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	f003 0303 	and.w	r3, r3, #3
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	2207      	movs	r2, #7
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002dd6:	4a2f      	ldr	r2, [pc, #188]	; (8002e94 <HAL_GPIO_DeInit+0x18c>)
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	089b      	lsrs	r3, r3, #2
 8002ddc:	3302      	adds	r3, #2
 8002dde:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	43da      	mvns	r2, r3
 8002de6:	482b      	ldr	r0, [pc, #172]	; (8002e94 <HAL_GPIO_DeInit+0x18c>)
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	089b      	lsrs	r3, r3, #2
 8002dec:	400a      	ands	r2, r1
 8002dee:	3302      	adds	r3, #2
 8002df0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	2103      	movs	r1, #3
 8002dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	08da      	lsrs	r2, r3, #3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	3208      	adds	r2, #8
 8002e10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	f003 0307 	and.w	r3, r3, #7
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	220f      	movs	r2, #15
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	43db      	mvns	r3, r3
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	08d2      	lsrs	r2, r2, #3
 8002e28:	4019      	ands	r1, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	3208      	adds	r2, #8
 8002e2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689a      	ldr	r2, [r3, #8]
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	2103      	movs	r1, #3
 8002e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e40:	43db      	mvns	r3, r3
 8002e42:	401a      	ands	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	fa01 f303 	lsl.w	r3, r1, r3
 8002e54:	43db      	mvns	r3, r3
 8002e56:	401a      	ands	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	68da      	ldr	r2, [r3, #12]
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	2103      	movs	r1, #3
 8002e66:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	401a      	ands	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	3301      	adds	r3, #1
 8002e76:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f47f af49 	bne.w	8002d18 <HAL_GPIO_DeInit+0x10>
  }
}
 8002e86:	bf00      	nop
 8002e88:	bf00      	nop
 8002e8a:	371c      	adds	r7, #28
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bc80      	pop	{r7}
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	40010000 	.word	0x40010000
 8002e98:	48000400 	.word	0x48000400
 8002e9c:	48000800 	.word	0x48000800
 8002ea0:	58000800 	.word	0x58000800

08002ea4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	460b      	mov	r3, r1
 8002eae:	807b      	strh	r3, [r7, #2]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002eb4:	787b      	ldrb	r3, [r7, #1]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002eba:	887a      	ldrh	r2, [r7, #2]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ec0:	e002      	b.n	8002ec8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ec2:	887a      	ldrh	r2, [r7, #2]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bc80      	pop	{r7}
 8002ed0:	4770      	bx	lr
	...

08002ed4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	4603      	mov	r3, r0
 8002edc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002ede:	4b08      	ldr	r3, [pc, #32]	; (8002f00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ee0:	68da      	ldr	r2, [r3, #12]
 8002ee2:	88fb      	ldrh	r3, [r7, #6]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d006      	beq.n	8002ef8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002eea:	4a05      	ldr	r2, [pc, #20]	; (8002f00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002eec:	88fb      	ldrh	r3, [r7, #6]
 8002eee:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ef0:	88fb      	ldrh	r3, [r7, #6]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f000 f806 	bl	8002f04 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ef8:	bf00      	nop
 8002efa:	3708      	adds	r7, #8
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	58000800 	.word	0x58000800

08002f04 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bc80      	pop	{r7}
 8002f16:	4770      	bx	lr

08002f18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e081      	b.n	800302e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d106      	bne.n	8002f44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7fd fc1c 	bl	800077c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2224      	movs	r2, #36	; 0x24
 8002f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 0201 	bic.w	r2, r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f68:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f78:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d107      	bne.n	8002f92 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689a      	ldr	r2, [r3, #8]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f8e:	609a      	str	r2, [r3, #8]
 8002f90:	e006      	b.n	8002fa0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689a      	ldr	r2, [r3, #8]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002f9e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d104      	bne.n	8002fb2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fb0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	6812      	ldr	r2, [r2, #0]
 8002fbc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002fc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fc4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68da      	ldr	r2, [r3, #12]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fd4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	691a      	ldr	r2, [r3, #16]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	430a      	orrs	r2, r1
 8002fee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	69d9      	ldr	r1, [r3, #28]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a1a      	ldr	r2, [r3, #32]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f042 0201 	orr.w	r2, r2, #1
 800300e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2220      	movs	r2, #32
 800301a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003036:	b480      	push	{r7}
 8003038:	b083      	sub	sp, #12
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
 800303e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b20      	cmp	r3, #32
 800304a:	d138      	bne.n	80030be <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003052:	2b01      	cmp	r3, #1
 8003054:	d101      	bne.n	800305a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003056:	2302      	movs	r3, #2
 8003058:	e032      	b.n	80030c0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2224      	movs	r2, #36	; 0x24
 8003066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 0201 	bic.w	r2, r2, #1
 8003078:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003088:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6819      	ldr	r1, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f042 0201 	orr.w	r2, r2, #1
 80030a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2220      	movs	r2, #32
 80030ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030ba:	2300      	movs	r3, #0
 80030bc:	e000      	b.n	80030c0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80030be:	2302      	movs	r3, #2
  }
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bc80      	pop	{r7}
 80030c8:	4770      	bx	lr

080030ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b085      	sub	sp, #20
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
 80030d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	2b20      	cmp	r3, #32
 80030de:	d139      	bne.n	8003154 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d101      	bne.n	80030ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80030ea:	2302      	movs	r3, #2
 80030ec:	e033      	b.n	8003156 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2224      	movs	r2, #36	; 0x24
 80030fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 0201 	bic.w	r2, r2, #1
 800310c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800311c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	021b      	lsls	r3, r3, #8
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	4313      	orrs	r3, r2
 8003126:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0201 	orr.w	r2, r2, #1
 800313e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2220      	movs	r2, #32
 8003144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003150:	2300      	movs	r3, #0
 8003152:	e000      	b.n	8003156 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003154:	2302      	movs	r3, #2
  }
}
 8003156:	4618      	mov	r0, r3
 8003158:	3714      	adds	r7, #20
 800315a:	46bd      	mov	sp, r7
 800315c:	bc80      	pop	{r7}
 800315e:	4770      	bx	lr

08003160 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003164:	4b04      	ldr	r3, [pc, #16]	; (8003178 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a03      	ldr	r2, [pc, #12]	; (8003178 <HAL_PWR_EnableBkUpAccess+0x18>)
 800316a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800316e:	6013      	str	r3, [r2, #0]
}
 8003170:	bf00      	nop
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr
 8003178:	58000400 	.word	0x58000400

0800317c <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	460b      	mov	r3, r1
 8003186:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10c      	bne.n	80031a8 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800318e:	4b13      	ldr	r3, [pc, #76]	; (80031dc <HAL_PWR_EnterSLEEPMode+0x60>)
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003196:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800319a:	d10d      	bne.n	80031b8 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800319c:	f000 f83c 	bl	8003218 <HAL_PWREx_DisableLowPowerRunMode>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d008      	beq.n	80031b8 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 80031a6:	e015      	b.n	80031d4 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 80031a8:	4b0c      	ldr	r3, [pc, #48]	; (80031dc <HAL_PWR_EnterSLEEPMode+0x60>)
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 80031b4:	f000 f822 	bl	80031fc <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80031b8:	4b09      	ldr	r3, [pc, #36]	; (80031e0 <HAL_PWR_EnterSLEEPMode+0x64>)
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	4a08      	ldr	r2, [pc, #32]	; (80031e0 <HAL_PWR_EnterSLEEPMode+0x64>)
 80031be:	f023 0304 	bic.w	r3, r3, #4
 80031c2:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80031c4:	78fb      	ldrb	r3, [r7, #3]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d101      	bne.n	80031ce <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80031ca:	bf30      	wfi
 80031cc:	e002      	b.n	80031d4 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80031ce:	bf40      	sev
    __WFE();
 80031d0:	bf20      	wfe
    __WFE();
 80031d2:	bf20      	wfe
  }
}
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	58000400 	.word	0x58000400
 80031e0:	e000ed00 	.word	0xe000ed00

080031e4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80031e8:	4b03      	ldr	r3, [pc, #12]	; (80031f8 <HAL_PWREx_GetVoltageRange+0x14>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc80      	pop	{r7}
 80031f6:	4770      	bx	lr
 80031f8:	58000400 	.word	0x58000400

080031fc <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8003200:	4b04      	ldr	r3, [pc, #16]	; (8003214 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a03      	ldr	r2, [pc, #12]	; (8003214 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8003206:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800320a:	6013      	str	r3, [r2, #0]
}
 800320c:	bf00      	nop
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr
 8003214:	58000400 	.word	0x58000400

08003218 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800321e:	4b16      	ldr	r3, [pc, #88]	; (8003278 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a15      	ldr	r2, [pc, #84]	; (8003278 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8003224:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003228:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 800322a:	4b14      	ldr	r3, [pc, #80]	; (800327c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2232      	movs	r2, #50	; 0x32
 8003230:	fb02 f303 	mul.w	r3, r2, r3
 8003234:	4a12      	ldr	r2, [pc, #72]	; (8003280 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8003236:	fba2 2303 	umull	r2, r3, r2, r3
 800323a:	0c9b      	lsrs	r3, r3, #18
 800323c:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800323e:	e002      	b.n	8003246 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	3b01      	subs	r3, #1
 8003244:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8003246:	4b0c      	ldr	r3, [pc, #48]	; (8003278 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800324e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003252:	d102      	bne.n	800325a <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1f2      	bne.n	8003240 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800325a:	4b07      	ldr	r3, [pc, #28]	; (8003278 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003262:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003266:	d101      	bne.n	800326c <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e000      	b.n	800326e <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	bc80      	pop	{r7}
 8003276:	4770      	bx	lr
 8003278:	58000400 	.word	0x58000400
 800327c:	20000000 	.word	0x20000000
 8003280:	431bde83 	.word	0x431bde83

08003284 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	4603      	mov	r3, r0
 800328c:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 800328e:	4b10      	ldr	r3, [pc, #64]	; (80032d0 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f023 0307 	bic.w	r3, r3, #7
 8003296:	4a0e      	ldr	r2, [pc, #56]	; (80032d0 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8003298:	f043 0302 	orr.w	r3, r3, #2
 800329c:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800329e:	4b0d      	ldr	r3, [pc, #52]	; (80032d4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	4a0c      	ldr	r2, [pc, #48]	; (80032d4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80032a4:	f043 0304 	orr.w	r3, r3, #4
 80032a8:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80032aa:	79fb      	ldrb	r3, [r7, #7]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d101      	bne.n	80032b4 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80032b0:	bf30      	wfi
 80032b2:	e002      	b.n	80032ba <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80032b4:	bf40      	sev
    __WFE();
 80032b6:	bf20      	wfe
    __WFE();
 80032b8:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80032ba:	4b06      	ldr	r3, [pc, #24]	; (80032d4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	4a05      	ldr	r2, [pc, #20]	; (80032d4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80032c0:	f023 0304 	bic.w	r3, r3, #4
 80032c4:	6113      	str	r3, [r2, #16]
}
 80032c6:	bf00      	nop
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bc80      	pop	{r7}
 80032ce:	4770      	bx	lr
 80032d0:	58000400 	.word	0x58000400
 80032d4:	e000ed00 	.word	0xe000ed00

080032d8 <LL_PWR_IsEnabledBkUpAccess>:
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80032dc:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032e8:	d101      	bne.n	80032ee <LL_PWR_IsEnabledBkUpAccess+0x16>
 80032ea:	2301      	movs	r3, #1
 80032ec:	e000      	b.n	80032f0 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bc80      	pop	{r7}
 80032f6:	4770      	bx	lr
 80032f8:	58000400 	.word	0x58000400

080032fc <LL_RCC_HSE_EnableTcxo>:
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800330a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800330e:	6013      	str	r3, [r2, #0]
}
 8003310:	bf00      	nop
 8003312:	46bd      	mov	sp, r7
 8003314:	bc80      	pop	{r7}
 8003316:	4770      	bx	lr

08003318 <LL_RCC_HSE_DisableTcxo>:
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800331c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003326:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800332a:	6013      	str	r3, [r2, #0]
}
 800332c:	bf00      	nop
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr

08003334 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003338:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003342:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003346:	d101      	bne.n	800334c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003348:	2301      	movs	r3, #1
 800334a:	e000      	b.n	800334e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	46bd      	mov	sp, r7
 8003352:	bc80      	pop	{r7}
 8003354:	4770      	bx	lr

08003356 <LL_RCC_HSE_Enable>:
{
 8003356:	b480      	push	{r7}
 8003358:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800335a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003368:	6013      	str	r3, [r2, #0]
}
 800336a:	bf00      	nop
 800336c:	46bd      	mov	sp, r7
 800336e:	bc80      	pop	{r7}
 8003370:	4770      	bx	lr

08003372 <LL_RCC_HSE_Disable>:
{
 8003372:	b480      	push	{r7}
 8003374:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003380:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003384:	6013      	str	r3, [r2, #0]
}
 8003386:	bf00      	nop
 8003388:	46bd      	mov	sp, r7
 800338a:	bc80      	pop	{r7}
 800338c:	4770      	bx	lr

0800338e <LL_RCC_HSE_IsReady>:
{
 800338e:	b480      	push	{r7}
 8003390:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003392:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033a0:	d101      	bne.n	80033a6 <LL_RCC_HSE_IsReady+0x18>
 80033a2:	2301      	movs	r3, #1
 80033a4:	e000      	b.n	80033a8 <LL_RCC_HSE_IsReady+0x1a>
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bc80      	pop	{r7}
 80033ae:	4770      	bx	lr

080033b0 <LL_RCC_HSI_Enable>:
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80033b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033c2:	6013      	str	r3, [r2, #0]
}
 80033c4:	bf00      	nop
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bc80      	pop	{r7}
 80033ca:	4770      	bx	lr

080033cc <LL_RCC_HSI_Disable>:
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80033d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033de:	6013      	str	r3, [r2, #0]
}
 80033e0:	bf00      	nop
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bc80      	pop	{r7}
 80033e6:	4770      	bx	lr

080033e8 <LL_RCC_HSI_IsReady>:
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80033ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033fa:	d101      	bne.n	8003400 <LL_RCC_HSI_IsReady+0x18>
 80033fc:	2301      	movs	r3, #1
 80033fe:	e000      	b.n	8003402 <LL_RCC_HSI_IsReady+0x1a>
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	46bd      	mov	sp, r7
 8003406:	bc80      	pop	{r7}
 8003408:	4770      	bx	lr

0800340a <LL_RCC_HSI_SetCalibTrimming>:
{
 800340a:	b480      	push	{r7}
 800340c:	b083      	sub	sp, #12
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	061b      	lsls	r3, r3, #24
 8003420:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003424:	4313      	orrs	r3, r2
 8003426:	604b      	str	r3, [r1, #4]
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	bc80      	pop	{r7}
 8003430:	4770      	bx	lr

08003432 <LL_RCC_LSE_IsReady>:
{
 8003432:	b480      	push	{r7}
 8003434:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003436:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800343a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b02      	cmp	r3, #2
 8003444:	d101      	bne.n	800344a <LL_RCC_LSE_IsReady+0x18>
 8003446:	2301      	movs	r3, #1
 8003448:	e000      	b.n	800344c <LL_RCC_LSE_IsReady+0x1a>
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	46bd      	mov	sp, r7
 8003450:	bc80      	pop	{r7}
 8003452:	4770      	bx	lr

08003454 <LL_RCC_LSI_Enable>:
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8003458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800345c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003460:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003464:	f043 0301 	orr.w	r3, r3, #1
 8003468:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800346c:	bf00      	nop
 800346e:	46bd      	mov	sp, r7
 8003470:	bc80      	pop	{r7}
 8003472:	4770      	bx	lr

08003474 <LL_RCC_LSI_Disable>:
{
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003478:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800347c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003480:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003484:	f023 0301 	bic.w	r3, r3, #1
 8003488:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800348c:	bf00      	nop
 800348e:	46bd      	mov	sp, r7
 8003490:	bc80      	pop	{r7}
 8003492:	4770      	bx	lr

08003494 <LL_RCC_LSI_IsReady>:
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8003498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800349c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d101      	bne.n	80034ac <LL_RCC_LSI_IsReady+0x18>
 80034a8:	2301      	movs	r3, #1
 80034aa:	e000      	b.n	80034ae <LL_RCC_LSI_IsReady+0x1a>
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bc80      	pop	{r7}
 80034b4:	4770      	bx	lr

080034b6 <LL_RCC_MSI_Enable>:
{
 80034b6:	b480      	push	{r7}
 80034b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80034ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034c4:	f043 0301 	orr.w	r3, r3, #1
 80034c8:	6013      	str	r3, [r2, #0]
}
 80034ca:	bf00      	nop
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bc80      	pop	{r7}
 80034d0:	4770      	bx	lr

080034d2 <LL_RCC_MSI_Disable>:
{
 80034d2:	b480      	push	{r7}
 80034d4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80034d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034e0:	f023 0301 	bic.w	r3, r3, #1
 80034e4:	6013      	str	r3, [r2, #0]
}
 80034e6:	bf00      	nop
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bc80      	pop	{r7}
 80034ec:	4770      	bx	lr

080034ee <LL_RCC_MSI_IsReady>:
{
 80034ee:	b480      	push	{r7}
 80034f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80034f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d101      	bne.n	8003504 <LL_RCC_MSI_IsReady+0x16>
 8003500:	2301      	movs	r3, #1
 8003502:	e000      	b.n	8003506 <LL_RCC_MSI_IsReady+0x18>
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	46bd      	mov	sp, r7
 800350a:	bc80      	pop	{r7}
 800350c:	4770      	bx	lr

0800350e <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 800350e:	b480      	push	{r7}
 8003510:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8003512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0308 	and.w	r3, r3, #8
 800351c:	2b08      	cmp	r3, #8
 800351e:	d101      	bne.n	8003524 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8003520:	2301      	movs	r3, #1
 8003522:	e000      	b.n	8003526 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	46bd      	mov	sp, r7
 800352a:	bc80      	pop	{r7}
 800352c:	4770      	bx	lr

0800352e <LL_RCC_MSI_GetRange>:
{
 800352e:	b480      	push	{r7}
 8003530:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8003532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800353c:	4618      	mov	r0, r3
 800353e:	46bd      	mov	sp, r7
 8003540:	bc80      	pop	{r7}
 8003542:	4770      	bx	lr

08003544 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8003548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800354c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003550:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8003554:	4618      	mov	r0, r3
 8003556:	46bd      	mov	sp, r7
 8003558:	bc80      	pop	{r7}
 800355a:	4770      	bx	lr

0800355c <LL_RCC_MSI_SetCalibTrimming>:
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	021b      	lsls	r3, r3, #8
 8003572:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003576:	4313      	orrs	r3, r2
 8003578:	604b      	str	r3, [r1, #4]
}
 800357a:	bf00      	nop
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	bc80      	pop	{r7}
 8003582:	4770      	bx	lr

08003584 <LL_RCC_SetSysClkSource>:
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800358c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f023 0203 	bic.w	r2, r3, #3
 8003596:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4313      	orrs	r3, r2
 800359e:	608b      	str	r3, [r1, #8]
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bc80      	pop	{r7}
 80035a8:	4770      	bx	lr

080035aa <LL_RCC_GetSysClkSource>:
{
 80035aa:	b480      	push	{r7}
 80035ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80035ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f003 030c 	and.w	r3, r3, #12
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bc80      	pop	{r7}
 80035be:	4770      	bx	lr

080035c0 <LL_RCC_SetAHBPrescaler>:
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80035c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4313      	orrs	r3, r2
 80035da:	608b      	str	r3, [r1, #8]
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bc80      	pop	{r7}
 80035e4:	4770      	bx	lr

080035e6 <LL_RCC_SetAHB3Prescaler>:
{
 80035e6:	b480      	push	{r7}
 80035e8:	b083      	sub	sp, #12
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80035ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035f2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80035f6:	f023 020f 	bic.w	r2, r3, #15
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	091b      	lsrs	r3, r3, #4
 80035fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003602:	4313      	orrs	r3, r2
 8003604:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	bc80      	pop	{r7}
 8003610:	4770      	bx	lr

08003612 <LL_RCC_SetAPB1Prescaler>:
{
 8003612:	b480      	push	{r7}
 8003614:	b083      	sub	sp, #12
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800361a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003624:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4313      	orrs	r3, r2
 800362c:	608b      	str	r3, [r1, #8]
}
 800362e:	bf00      	nop
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	bc80      	pop	{r7}
 8003636:	4770      	bx	lr

08003638 <LL_RCC_SetAPB2Prescaler>:
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800364a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4313      	orrs	r3, r2
 8003652:	608b      	str	r3, [r1, #8]
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	bc80      	pop	{r7}
 800365c:	4770      	bx	lr

0800365e <LL_RCC_GetAHBPrescaler>:
{
 800365e:	b480      	push	{r7}
 8003660:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800366c:	4618      	mov	r0, r3
 800366e:	46bd      	mov	sp, r7
 8003670:	bc80      	pop	{r7}
 8003672:	4770      	bx	lr

08003674 <LL_RCC_GetAHB3Prescaler>:
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800367c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003680:	011b      	lsls	r3, r3, #4
 8003682:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003686:	4618      	mov	r0, r3
 8003688:	46bd      	mov	sp, r7
 800368a:	bc80      	pop	{r7}
 800368c:	4770      	bx	lr

0800368e <LL_RCC_GetAPB1Prescaler>:
{
 800368e:	b480      	push	{r7}
 8003690:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800369c:	4618      	mov	r0, r3
 800369e:	46bd      	mov	sp, r7
 80036a0:	bc80      	pop	{r7}
 80036a2:	4770      	bx	lr

080036a4 <LL_RCC_GetAPB2Prescaler>:
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80036a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bc80      	pop	{r7}
 80036b8:	4770      	bx	lr

080036ba <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80036ba:	b480      	push	{r7}
 80036bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80036be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036cc:	6013      	str	r3, [r2, #0]
}
 80036ce:	bf00      	nop
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bc80      	pop	{r7}
 80036d4:	4770      	bx	lr

080036d6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80036d6:	b480      	push	{r7}
 80036d8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80036da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036e8:	6013      	str	r3, [r2, #0]
}
 80036ea:	bf00      	nop
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bc80      	pop	{r7}
 80036f0:	4770      	bx	lr

080036f2 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80036f2:	b480      	push	{r7}
 80036f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80036f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003700:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003704:	d101      	bne.n	800370a <LL_RCC_PLL_IsReady+0x18>
 8003706:	2301      	movs	r3, #1
 8003708:	e000      	b.n	800370c <LL_RCC_PLL_IsReady+0x1a>
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	46bd      	mov	sp, r7
 8003710:	bc80      	pop	{r7}
 8003712:	4770      	bx	lr

08003714 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003718:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	0a1b      	lsrs	r3, r3, #8
 8003720:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003724:	4618      	mov	r0, r3
 8003726:	46bd      	mov	sp, r7
 8003728:	bc80      	pop	{r7}
 800372a:	4770      	bx	lr

0800372c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003730:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800373a:	4618      	mov	r0, r3
 800373c:	46bd      	mov	sp, r7
 800373e:	bc80      	pop	{r7}
 8003740:	4770      	bx	lr

08003742 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003742:	b480      	push	{r7}
 8003744:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003750:	4618      	mov	r0, r3
 8003752:	46bd      	mov	sp, r7
 8003754:	bc80      	pop	{r7}
 8003756:	4770      	bx	lr

08003758 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800375c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	f003 0303 	and.w	r3, r3, #3
}
 8003766:	4618      	mov	r0, r3
 8003768:	46bd      	mov	sp, r7
 800376a:	bc80      	pop	{r7}
 800376c:	4770      	bx	lr

0800376e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800376e:	b480      	push	{r7}
 8003770:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003772:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800377c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003780:	d101      	bne.n	8003786 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003782:	2301      	movs	r3, #1
 8003784:	e000      	b.n	8003788 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	46bd      	mov	sp, r7
 800378c:	bc80      	pop	{r7}
 800378e:	4770      	bx	lr

08003790 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003794:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003798:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800379c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a4:	d101      	bne.n	80037aa <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80037a6:	2301      	movs	r3, #1
 80037a8:	e000      	b.n	80037ac <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bc80      	pop	{r7}
 80037b2:	4770      	bx	lr

080037b4 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80037b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037c6:	d101      	bne.n	80037cc <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80037c8:	2301      	movs	r3, #1
 80037ca:	e000      	b.n	80037ce <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bc80      	pop	{r7}
 80037d4:	4770      	bx	lr

080037d6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80037d6:	b480      	push	{r7}
 80037d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80037da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037e8:	d101      	bne.n	80037ee <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80037ea:	2301      	movs	r3, #1
 80037ec:	e000      	b.n	80037f0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bc80      	pop	{r7}
 80037f6:	4770      	bx	lr

080037f8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b088      	sub	sp, #32
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e38b      	b.n	8003f22 <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800380a:	f7ff fece 	bl	80035aa <LL_RCC_GetSysClkSource>
 800380e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003810:	f7ff ffa2 	bl	8003758 <LL_RCC_PLL_GetMainSource>
 8003814:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0320 	and.w	r3, r3, #32
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 80c9 	beq.w	80039b6 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d005      	beq.n	8003836 <HAL_RCC_OscConfig+0x3e>
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	2b0c      	cmp	r3, #12
 800382e:	d17b      	bne.n	8003928 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d178      	bne.n	8003928 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003836:	f7ff fe5a 	bl	80034ee <LL_RCC_MSI_IsReady>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <HAL_RCC_OscConfig+0x54>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d101      	bne.n	800384c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e36a      	b.n	8003f22 <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003850:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0308 	and.w	r3, r3, #8
 800385a:	2b00      	cmp	r3, #0
 800385c:	d005      	beq.n	800386a <HAL_RCC_OscConfig+0x72>
 800385e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003868:	e006      	b.n	8003878 <HAL_RCC_OscConfig+0x80>
 800386a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800386e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003872:	091b      	lsrs	r3, r3, #4
 8003874:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003878:	4293      	cmp	r3, r2
 800387a:	d222      	bcs.n	80038c2 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003880:	4618      	mov	r0, r3
 8003882:	f000 fd51 	bl	8004328 <RCC_SetFlashLatencyFromMSIRange>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e348      	b.n	8003f22 <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800389a:	f043 0308 	orr.w	r3, r3, #8
 800389e:	6013      	str	r3, [r2, #0]
 80038a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038b2:	4313      	orrs	r3, r2
 80038b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7ff fe4e 	bl	800355c <LL_RCC_MSI_SetCalibTrimming>
 80038c0:	e021      	b.n	8003906 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038cc:	f043 0308 	orr.w	r3, r3, #8
 80038d0:	6013      	str	r3, [r2, #0]
 80038d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038e4:	4313      	orrs	r3, r2
 80038e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff fe35 	bl	800355c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 fd16 	bl	8004328 <RCC_SetFlashLatencyFromMSIRange>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e30d      	b.n	8003f22 <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003906:	f000 fcd7 	bl	80042b8 <HAL_RCC_GetHCLKFreq>
 800390a:	4603      	mov	r3, r0
 800390c:	4aa1      	ldr	r2, [pc, #644]	; (8003b94 <HAL_RCC_OscConfig+0x39c>)
 800390e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003910:	4ba1      	ldr	r3, [pc, #644]	; (8003b98 <HAL_RCC_OscConfig+0x3a0>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4618      	mov	r0, r3
 8003916:	f7fd fa33 	bl	8000d80 <HAL_InitTick>
 800391a:	4603      	mov	r3, r0
 800391c:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 800391e:	7cfb      	ldrb	r3, [r7, #19]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d047      	beq.n	80039b4 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8003924:	7cfb      	ldrb	r3, [r7, #19]
 8003926:	e2fc      	b.n	8003f22 <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d02c      	beq.n	800398a <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003930:	f7ff fdc1 	bl	80034b6 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003934:	f7fd fa2e 	bl	8000d94 <HAL_GetTick>
 8003938:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800393a:	e008      	b.n	800394e <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800393c:	f7fd fa2a 	bl	8000d94 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e2e9      	b.n	8003f22 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 800394e:	f7ff fdce 	bl	80034ee <LL_RCC_MSI_IsReady>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d0f1      	beq.n	800393c <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003958:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003962:	f043 0308 	orr.w	r3, r3, #8
 8003966:	6013      	str	r3, [r2, #0]
 8003968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003976:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800397a:	4313      	orrs	r3, r2
 800397c:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003982:	4618      	mov	r0, r3
 8003984:	f7ff fdea 	bl	800355c <LL_RCC_MSI_SetCalibTrimming>
 8003988:	e015      	b.n	80039b6 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800398a:	f7ff fda2 	bl	80034d2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800398e:	f7fd fa01 	bl	8000d94 <HAL_GetTick>
 8003992:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003994:	e008      	b.n	80039a8 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003996:	f7fd f9fd 	bl	8000d94 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d901      	bls.n	80039a8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e2bc      	b.n	8003f22 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 80039a8:	f7ff fda1 	bl	80034ee <LL_RCC_MSI_IsReady>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1f1      	bne.n	8003996 <HAL_RCC_OscConfig+0x19e>
 80039b2:	e000      	b.n	80039b6 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039b4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d05f      	beq.n	8003a82 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	d005      	beq.n	80039d4 <HAL_RCC_OscConfig+0x1dc>
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	2b0c      	cmp	r3, #12
 80039cc:	d10d      	bne.n	80039ea <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	2b03      	cmp	r3, #3
 80039d2:	d10a      	bne.n	80039ea <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d4:	f7ff fcdb 	bl	800338e <LL_RCC_HSE_IsReady>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d050      	beq.n	8003a80 <HAL_RCC_OscConfig+0x288>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d14c      	bne.n	8003a80 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e29b      	b.n	8003f22 <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80039ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039fc:	4313      	orrs	r3, r2
 80039fe:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a08:	d102      	bne.n	8003a10 <HAL_RCC_OscConfig+0x218>
 8003a0a:	f7ff fca4 	bl	8003356 <LL_RCC_HSE_Enable>
 8003a0e:	e00d      	b.n	8003a2c <HAL_RCC_OscConfig+0x234>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8003a18:	d104      	bne.n	8003a24 <HAL_RCC_OscConfig+0x22c>
 8003a1a:	f7ff fc6f 	bl	80032fc <LL_RCC_HSE_EnableTcxo>
 8003a1e:	f7ff fc9a 	bl	8003356 <LL_RCC_HSE_Enable>
 8003a22:	e003      	b.n	8003a2c <HAL_RCC_OscConfig+0x234>
 8003a24:	f7ff fca5 	bl	8003372 <LL_RCC_HSE_Disable>
 8003a28:	f7ff fc76 	bl	8003318 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d012      	beq.n	8003a5a <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a34:	f7fd f9ae 	bl	8000d94 <HAL_GetTick>
 8003a38:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a3c:	f7fd f9aa 	bl	8000d94 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b64      	cmp	r3, #100	; 0x64
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e269      	b.n	8003f22 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003a4e:	f7ff fc9e 	bl	800338e <LL_RCC_HSE_IsReady>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0f1      	beq.n	8003a3c <HAL_RCC_OscConfig+0x244>
 8003a58:	e013      	b.n	8003a82 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5a:	f7fd f99b 	bl	8000d94 <HAL_GetTick>
 8003a5e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003a60:	e008      	b.n	8003a74 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a62:	f7fd f997 	bl	8000d94 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	2b64      	cmp	r3, #100	; 0x64
 8003a6e:	d901      	bls.n	8003a74 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e256      	b.n	8003f22 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003a74:	f7ff fc8b 	bl	800338e <LL_RCC_HSE_IsReady>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1f1      	bne.n	8003a62 <HAL_RCC_OscConfig+0x26a>
 8003a7e:	e000      	b.n	8003a82 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a80:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d04b      	beq.n	8003b26 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	2b04      	cmp	r3, #4
 8003a92:	d005      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x2a8>
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	2b0c      	cmp	r3, #12
 8003a98:	d113      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d110      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003aa0:	f7ff fca2 	bl	80033e8 <LL_RCC_HSI_IsReady>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d005      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x2be>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e235      	b.n	8003f22 <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7ff fca5 	bl	800340a <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ac0:	e031      	b.n	8003b26 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d019      	beq.n	8003afe <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003aca:	f7ff fc71 	bl	80033b0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ace:	f7fd f961 	bl	8000d94 <HAL_GetTick>
 8003ad2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003ad4:	e008      	b.n	8003ae8 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ad6:	f7fd f95d 	bl	8000d94 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e21c      	b.n	8003f22 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003ae8:	f7ff fc7e 	bl	80033e8 <LL_RCC_HSI_IsReady>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d0f1      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7ff fc87 	bl	800340a <LL_RCC_HSI_SetCalibTrimming>
 8003afc:	e013      	b.n	8003b26 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003afe:	f7ff fc65 	bl	80033cc <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b02:	f7fd f947 	bl	8000d94 <HAL_GetTick>
 8003b06:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003b08:	e008      	b.n	8003b1c <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b0a:	f7fd f943 	bl	8000d94 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e202      	b.n	8003f22 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003b1c:	f7ff fc64 	bl	80033e8 <LL_RCC_HSI_IsReady>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1f1      	bne.n	8003b0a <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0308 	and.w	r3, r3, #8
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d06f      	beq.n	8003c12 <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d057      	beq.n	8003bea <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 8003b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b42:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	69da      	ldr	r2, [r3, #28]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f003 0310 	and.w	r3, r3, #16
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d036      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d006      	beq.n	8003b6a <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e1db      	b.n	8003f22 <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d018      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 8003b74:	f7ff fc7e 	bl	8003474 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b78:	f7fd f90c 	bl	8000d94 <HAL_GetTick>
 8003b7c:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8003b7e:	e00d      	b.n	8003b9c <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b80:	f7fd f908 	bl	8000d94 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b11      	cmp	r3, #17
 8003b8c:	d906      	bls.n	8003b9c <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e1c7      	b.n	8003f22 <HAL_RCC_OscConfig+0x72a>
 8003b92:	bf00      	nop
 8003b94:	20000000 	.word	0x20000000
 8003b98:	20000004 	.word	0x20000004
          while (LL_RCC_LSI_IsReady() != 0U)
 8003b9c:	f7ff fc7a 	bl	8003494 <LL_RCC_LSI_IsReady>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1ec      	bne.n	8003b80 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8003ba6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003baa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bae:	f023 0210 	bic.w	r2, r3, #16
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bc0:	f7ff fc48 	bl	8003454 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc4:	f7fd f8e6 	bl	8000d94 <HAL_GetTick>
 8003bc8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bcc:	f7fd f8e2 	bl	8000d94 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b11      	cmp	r3, #17
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e1a1      	b.n	8003f22 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 8003bde:	f7ff fc59 	bl	8003494 <LL_RCC_LSI_IsReady>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d0f1      	beq.n	8003bcc <HAL_RCC_OscConfig+0x3d4>
 8003be8:	e013      	b.n	8003c12 <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bea:	f7ff fc43 	bl	8003474 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bee:	f7fd f8d1 	bl	8000d94 <HAL_GetTick>
 8003bf2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8003bf4:	e008      	b.n	8003c08 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bf6:	f7fd f8cd 	bl	8000d94 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b11      	cmp	r3, #17
 8003c02:	d901      	bls.n	8003c08 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e18c      	b.n	8003f22 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 8003c08:	f7ff fc44 	bl	8003494 <LL_RCC_LSI_IsReady>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1f1      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0304 	and.w	r3, r3, #4
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 80d8 	beq.w	8003dd0 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003c20:	f7ff fb5a 	bl	80032d8 <LL_PWR_IsEnabledBkUpAccess>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d113      	bne.n	8003c52 <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003c2a:	f7ff fa99 	bl	8003160 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c2e:	f7fd f8b1 	bl	8000d94 <HAL_GetTick>
 8003c32:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003c34:	e008      	b.n	8003c48 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c36:	f7fd f8ad 	bl	8000d94 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e16c      	b.n	8003f22 <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003c48:	f7ff fb46 	bl	80032d8 <LL_PWR_IsEnabledBkUpAccess>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0f1      	beq.n	8003c36 <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d07b      	beq.n	8003d52 <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	2b85      	cmp	r3, #133	; 0x85
 8003c60:	d003      	beq.n	8003c6a <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	2b05      	cmp	r3, #5
 8003c68:	d109      	bne.n	8003c7e <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003c6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c76:	f043 0304 	orr.w	r3, r3, #4
 8003c7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c7e:	f7fd f889 	bl	8000d94 <HAL_GetTick>
 8003c82:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c90:	f043 0301 	orr.w	r3, r3, #1
 8003c94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003c98:	e00a      	b.n	8003cb0 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c9a:	f7fd f87b 	bl	8000d94 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e138      	b.n	8003f22 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003cb0:	f7ff fbbf 	bl	8003432 <LL_RCC_LSE_IsReady>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d0ef      	beq.n	8003c9a <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	2b81      	cmp	r3, #129	; 0x81
 8003cc0:	d003      	beq.n	8003cca <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	2b85      	cmp	r3, #133	; 0x85
 8003cc8:	d121      	bne.n	8003d0e <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cca:	f7fd f863 	bl	8000d94 <HAL_GetTick>
 8003cce:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ce0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003ce4:	e00a      	b.n	8003cfc <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ce6:	f7fd f855 	bl	8000d94 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d901      	bls.n	8003cfc <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e112      	b.n	8003f22 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d0ec      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003d0c:	e060      	b.n	8003dd0 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0e:	f7fd f841 	bl	8000d94 <HAL_GetTick>
 8003d12:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003d14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003d28:	e00a      	b.n	8003d40 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d2a:	f7fd f833 	bl	8000d94 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d901      	bls.n	8003d40 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e0f0      	b.n	8003f22 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1ec      	bne.n	8003d2a <HAL_RCC_OscConfig+0x532>
 8003d50:	e03e      	b.n	8003dd0 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d52:	f7fd f81f 	bl	8000d94 <HAL_GetTick>
 8003d56:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003d58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003d6c:	e00a      	b.n	8003d84 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d6e:	f7fd f811 	bl	8000d94 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e0ce      	b.n	8003f22 <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003d84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1ec      	bne.n	8003d6e <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d94:	f7fc fffe 	bl	8000d94 <HAL_GetTick>
 8003d98:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003d9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003da6:	f023 0301 	bic.w	r3, r3, #1
 8003daa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003dae:	e00a      	b.n	8003dc6 <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003db0:	f7fc fff0 	bl	8000d94 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e0ad      	b.n	8003f22 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003dc6:	f7ff fb34 	bl	8003432 <LL_RCC_LSE_IsReady>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1ef      	bne.n	8003db0 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f000 80a3 	beq.w	8003f20 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	2b0c      	cmp	r3, #12
 8003dde:	d076      	beq.n	8003ece <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d14b      	bne.n	8003e80 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003de8:	f7ff fc75 	bl	80036d6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dec:	f7fc ffd2 	bl	8000d94 <HAL_GetTick>
 8003df0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003df4:	f7fc ffce 	bl	8000d94 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b0a      	cmp	r3, #10
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e08d      	b.n	8003f22 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003e06:	f7ff fc74 	bl	80036f2 <LL_RCC_PLL_IsReady>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1f1      	bne.n	8003df4 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e14:	68da      	ldr	r2, [r3, #12]
 8003e16:	4b45      	ldr	r3, [pc, #276]	; (8003f2c <HAL_RCC_OscConfig+0x734>)
 8003e18:	4013      	ands	r3, r2
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e22:	4311      	orrs	r1, r2
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e28:	0212      	lsls	r2, r2, #8
 8003e2a:	4311      	orrs	r1, r2
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e30:	4311      	orrs	r1, r2
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e36:	4311      	orrs	r1, r2
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e42:	4313      	orrs	r3, r2
 8003e44:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e46:	f7ff fc38 	bl	80036ba <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e58:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e5a:	f7fc ff9b 	bl	8000d94 <HAL_GetTick>
 8003e5e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8003e60:	e008      	b.n	8003e74 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e62:	f7fc ff97 	bl	8000d94 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b0a      	cmp	r3, #10
 8003e6e:	d901      	bls.n	8003e74 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e056      	b.n	8003f22 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 8003e74:	f7ff fc3d 	bl	80036f2 <LL_RCC_PLL_IsReady>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d0f1      	beq.n	8003e62 <HAL_RCC_OscConfig+0x66a>
 8003e7e:	e04f      	b.n	8003f20 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e80:	f7ff fc29 	bl	80036d6 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e8e:	f023 0303 	bic.w	r3, r3, #3
 8003e92:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8003e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e9e:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8003ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ea6:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea8:	f7fc ff74 	bl	8000d94 <HAL_GetTick>
 8003eac:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eb0:	f7fc ff70 	bl	8000d94 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b0a      	cmp	r3, #10
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e02f      	b.n	8003f22 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003ec2:	f7ff fc16 	bl	80036f2 <LL_RCC_PLL_IsReady>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1f1      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x6b8>
 8003ecc:	e028      	b.n	8003f20 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d101      	bne.n	8003eda <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e023      	b.n	8003f22 <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	f003 0203 	and.w	r2, r3, #3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d115      	bne.n	8003f1c <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d10e      	bne.n	8003f1c <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f08:	021b      	lsls	r3, r3, #8
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d106      	bne.n	8003f1c <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d001      	beq.n	8003f20 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e000      	b.n	8003f22 <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3720      	adds	r7, #32
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	11c1808c 	.word	0x11c1808c

08003f30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e10f      	b.n	8004164 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f44:	4b89      	ldr	r3, [pc, #548]	; (800416c <HAL_RCC_ClockConfig+0x23c>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0307 	and.w	r3, r3, #7
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d91b      	bls.n	8003f8a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f52:	4b86      	ldr	r3, [pc, #536]	; (800416c <HAL_RCC_ClockConfig+0x23c>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f023 0207 	bic.w	r2, r3, #7
 8003f5a:	4984      	ldr	r1, [pc, #528]	; (800416c <HAL_RCC_ClockConfig+0x23c>)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f62:	f7fc ff17 	bl	8000d94 <HAL_GetTick>
 8003f66:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f68:	e008      	b.n	8003f7c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003f6a:	f7fc ff13 	bl	8000d94 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d901      	bls.n	8003f7c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e0f3      	b.n	8004164 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f7c:	4b7b      	ldr	r3, [pc, #492]	; (800416c <HAL_RCC_ClockConfig+0x23c>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0307 	and.w	r3, r3, #7
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d1ef      	bne.n	8003f6a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d016      	beq.n	8003fc4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7ff fb10 	bl	80035c0 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003fa0:	f7fc fef8 	bl	8000d94 <HAL_GetTick>
 8003fa4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003fa6:	e008      	b.n	8003fba <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003fa8:	f7fc fef4 	bl	8000d94 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e0d4      	b.n	8004164 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003fba:	f7ff fbd8 	bl	800376e <LL_RCC_IsActiveFlag_HPRE>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d0f1      	beq.n	8003fa8 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d016      	beq.n	8003ffe <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7ff fb06 	bl	80035e6 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003fda:	f7fc fedb 	bl	8000d94 <HAL_GetTick>
 8003fde:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003fe0:	e008      	b.n	8003ff4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003fe2:	f7fc fed7 	bl	8000d94 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d901      	bls.n	8003ff4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e0b7      	b.n	8004164 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003ff4:	f7ff fbcc 	bl	8003790 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0f1      	beq.n	8003fe2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0304 	and.w	r3, r3, #4
 8004006:	2b00      	cmp	r3, #0
 8004008:	d016      	beq.n	8004038 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	4618      	mov	r0, r3
 8004010:	f7ff faff 	bl	8003612 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004014:	f7fc febe 	bl	8000d94 <HAL_GetTick>
 8004018:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800401a:	e008      	b.n	800402e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800401c:	f7fc feba 	bl	8000d94 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b02      	cmp	r3, #2
 8004028:	d901      	bls.n	800402e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e09a      	b.n	8004164 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800402e:	f7ff fbc1 	bl	80037b4 <LL_RCC_IsActiveFlag_PPRE1>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d0f1      	beq.n	800401c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0308 	and.w	r3, r3, #8
 8004040:	2b00      	cmp	r3, #0
 8004042:	d017      	beq.n	8004074 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	00db      	lsls	r3, r3, #3
 800404a:	4618      	mov	r0, r3
 800404c:	f7ff faf4 	bl	8003638 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004050:	f7fc fea0 	bl	8000d94 <HAL_GetTick>
 8004054:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004056:	e008      	b.n	800406a <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004058:	f7fc fe9c 	bl	8000d94 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b02      	cmp	r3, #2
 8004064:	d901      	bls.n	800406a <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e07c      	b.n	8004164 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800406a:	f7ff fbb4 	bl	80037d6 <LL_RCC_IsActiveFlag_PPRE2>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d0f1      	beq.n	8004058 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	2b00      	cmp	r3, #0
 800407e:	d043      	beq.n	8004108 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	2b02      	cmp	r3, #2
 8004086:	d106      	bne.n	8004096 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004088:	f7ff f981 	bl	800338e <LL_RCC_HSE_IsReady>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d11e      	bne.n	80040d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e066      	b.n	8004164 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	2b03      	cmp	r3, #3
 800409c:	d106      	bne.n	80040ac <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800409e:	f7ff fb28 	bl	80036f2 <LL_RCC_PLL_IsReady>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d113      	bne.n	80040d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e05b      	b.n	8004164 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d106      	bne.n	80040c2 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80040b4:	f7ff fa1b 	bl	80034ee <LL_RCC_MSI_IsReady>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d108      	bne.n	80040d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e050      	b.n	8004164 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80040c2:	f7ff f991 	bl	80033e8 <LL_RCC_HSI_IsReady>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e049      	b.n	8004164 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7ff fa55 	bl	8003584 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040da:	f7fc fe5b 	bl	8000d94 <HAL_GetTick>
 80040de:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040e0:	e00a      	b.n	80040f8 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040e2:	f7fc fe57 	bl	8000d94 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d901      	bls.n	80040f8 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e035      	b.n	8004164 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040f8:	f7ff fa57 	bl	80035aa <LL_RCC_GetSysClkSource>
 80040fc:	4602      	mov	r2, r0
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	429a      	cmp	r2, r3
 8004106:	d1ec      	bne.n	80040e2 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004108:	4b18      	ldr	r3, [pc, #96]	; (800416c <HAL_RCC_ClockConfig+0x23c>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0307 	and.w	r3, r3, #7
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	429a      	cmp	r2, r3
 8004114:	d21b      	bcs.n	800414e <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004116:	4b15      	ldr	r3, [pc, #84]	; (800416c <HAL_RCC_ClockConfig+0x23c>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f023 0207 	bic.w	r2, r3, #7
 800411e:	4913      	ldr	r1, [pc, #76]	; (800416c <HAL_RCC_ClockConfig+0x23c>)
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	4313      	orrs	r3, r2
 8004124:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004126:	f7fc fe35 	bl	8000d94 <HAL_GetTick>
 800412a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800412c:	e008      	b.n	8004140 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800412e:	f7fc fe31 	bl	8000d94 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d901      	bls.n	8004140 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e011      	b.n	8004164 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004140:	4b0a      	ldr	r3, [pc, #40]	; (800416c <HAL_RCC_ClockConfig+0x23c>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0307 	and.w	r3, r3, #7
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	429a      	cmp	r2, r3
 800414c:	d1ef      	bne.n	800412e <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800414e:	f000 f8b3 	bl	80042b8 <HAL_RCC_GetHCLKFreq>
 8004152:	4603      	mov	r3, r0
 8004154:	4a06      	ldr	r2, [pc, #24]	; (8004170 <HAL_RCC_ClockConfig+0x240>)
 8004156:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004158:	4b06      	ldr	r3, [pc, #24]	; (8004174 <HAL_RCC_ClockConfig+0x244>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4618      	mov	r0, r3
 800415e:	f7fc fe0f 	bl	8000d80 <HAL_InitTick>
 8004162:	4603      	mov	r3, r0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	58004000 	.word	0x58004000
 8004170:	20000000 	.word	0x20000000
 8004174:	20000004 	.word	0x20000004

08004178 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004178:	b590      	push	{r4, r7, lr}
 800417a:	b087      	sub	sp, #28
 800417c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800417e:	2300      	movs	r3, #0
 8004180:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8004182:	2300      	movs	r3, #0
 8004184:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004186:	f7ff fa10 	bl	80035aa <LL_RCC_GetSysClkSource>
 800418a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800418c:	f7ff fae4 	bl	8003758 <LL_RCC_PLL_GetMainSource>
 8004190:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d005      	beq.n	80041a4 <HAL_RCC_GetSysClockFreq+0x2c>
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	2b0c      	cmp	r3, #12
 800419c:	d139      	bne.n	8004212 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d136      	bne.n	8004212 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80041a4:	f7ff f9b3 	bl	800350e <LL_RCC_MSI_IsEnabledRangeSelect>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d115      	bne.n	80041da <HAL_RCC_GetSysClockFreq+0x62>
 80041ae:	f7ff f9ae 	bl	800350e <LL_RCC_MSI_IsEnabledRangeSelect>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d106      	bne.n	80041c6 <HAL_RCC_GetSysClockFreq+0x4e>
 80041b8:	f7ff f9b9 	bl	800352e <LL_RCC_MSI_GetRange>
 80041bc:	4603      	mov	r3, r0
 80041be:	0a1b      	lsrs	r3, r3, #8
 80041c0:	f003 030f 	and.w	r3, r3, #15
 80041c4:	e005      	b.n	80041d2 <HAL_RCC_GetSysClockFreq+0x5a>
 80041c6:	f7ff f9bd 	bl	8003544 <LL_RCC_MSI_GetRangeAfterStandby>
 80041ca:	4603      	mov	r3, r0
 80041cc:	0a1b      	lsrs	r3, r3, #8
 80041ce:	f003 030f 	and.w	r3, r3, #15
 80041d2:	4a36      	ldr	r2, [pc, #216]	; (80042ac <HAL_RCC_GetSysClockFreq+0x134>)
 80041d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041d8:	e014      	b.n	8004204 <HAL_RCC_GetSysClockFreq+0x8c>
 80041da:	f7ff f998 	bl	800350e <LL_RCC_MSI_IsEnabledRangeSelect>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d106      	bne.n	80041f2 <HAL_RCC_GetSysClockFreq+0x7a>
 80041e4:	f7ff f9a3 	bl	800352e <LL_RCC_MSI_GetRange>
 80041e8:	4603      	mov	r3, r0
 80041ea:	091b      	lsrs	r3, r3, #4
 80041ec:	f003 030f 	and.w	r3, r3, #15
 80041f0:	e005      	b.n	80041fe <HAL_RCC_GetSysClockFreq+0x86>
 80041f2:	f7ff f9a7 	bl	8003544 <LL_RCC_MSI_GetRangeAfterStandby>
 80041f6:	4603      	mov	r3, r0
 80041f8:	091b      	lsrs	r3, r3, #4
 80041fa:	f003 030f 	and.w	r3, r3, #15
 80041fe:	4a2b      	ldr	r2, [pc, #172]	; (80042ac <HAL_RCC_GetSysClockFreq+0x134>)
 8004200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004204:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d115      	bne.n	8004238 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004210:	e012      	b.n	8004238 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	2b04      	cmp	r3, #4
 8004216:	d102      	bne.n	800421e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004218:	4b25      	ldr	r3, [pc, #148]	; (80042b0 <HAL_RCC_GetSysClockFreq+0x138>)
 800421a:	617b      	str	r3, [r7, #20]
 800421c:	e00c      	b.n	8004238 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	2b08      	cmp	r3, #8
 8004222:	d109      	bne.n	8004238 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004224:	f7ff f886 	bl	8003334 <LL_RCC_HSE_IsEnabledDiv2>
 8004228:	4603      	mov	r3, r0
 800422a:	2b01      	cmp	r3, #1
 800422c:	d102      	bne.n	8004234 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800422e:	4b20      	ldr	r3, [pc, #128]	; (80042b0 <HAL_RCC_GetSysClockFreq+0x138>)
 8004230:	617b      	str	r3, [r7, #20]
 8004232:	e001      	b.n	8004238 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004234:	4b1f      	ldr	r3, [pc, #124]	; (80042b4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004236:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004238:	f7ff f9b7 	bl	80035aa <LL_RCC_GetSysClkSource>
 800423c:	4603      	mov	r3, r0
 800423e:	2b0c      	cmp	r3, #12
 8004240:	d12f      	bne.n	80042a2 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004242:	f7ff fa89 	bl	8003758 <LL_RCC_PLL_GetMainSource>
 8004246:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b02      	cmp	r3, #2
 800424c:	d003      	beq.n	8004256 <HAL_RCC_GetSysClockFreq+0xde>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2b03      	cmp	r3, #3
 8004252:	d003      	beq.n	800425c <HAL_RCC_GetSysClockFreq+0xe4>
 8004254:	e00d      	b.n	8004272 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004256:	4b16      	ldr	r3, [pc, #88]	; (80042b0 <HAL_RCC_GetSysClockFreq+0x138>)
 8004258:	60fb      	str	r3, [r7, #12]
        break;
 800425a:	e00d      	b.n	8004278 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800425c:	f7ff f86a 	bl	8003334 <LL_RCC_HSE_IsEnabledDiv2>
 8004260:	4603      	mov	r3, r0
 8004262:	2b01      	cmp	r3, #1
 8004264:	d102      	bne.n	800426c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004266:	4b12      	ldr	r3, [pc, #72]	; (80042b0 <HAL_RCC_GetSysClockFreq+0x138>)
 8004268:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800426a:	e005      	b.n	8004278 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800426c:	4b11      	ldr	r3, [pc, #68]	; (80042b4 <HAL_RCC_GetSysClockFreq+0x13c>)
 800426e:	60fb      	str	r3, [r7, #12]
        break;
 8004270:	e002      	b.n	8004278 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	60fb      	str	r3, [r7, #12]
        break;
 8004276:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004278:	f7ff fa4c 	bl	8003714 <LL_RCC_PLL_GetN>
 800427c:	4602      	mov	r2, r0
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	fb03 f402 	mul.w	r4, r3, r2
 8004284:	f7ff fa5d 	bl	8003742 <LL_RCC_PLL_GetDivider>
 8004288:	4603      	mov	r3, r0
 800428a:	091b      	lsrs	r3, r3, #4
 800428c:	3301      	adds	r3, #1
 800428e:	fbb4 f4f3 	udiv	r4, r4, r3
 8004292:	f7ff fa4b 	bl	800372c <LL_RCC_PLL_GetR>
 8004296:	4603      	mov	r3, r0
 8004298:	0f5b      	lsrs	r3, r3, #29
 800429a:	3301      	adds	r3, #1
 800429c:	fbb4 f3f3 	udiv	r3, r4, r3
 80042a0:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80042a2:	697b      	ldr	r3, [r7, #20]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	371c      	adds	r7, #28
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd90      	pop	{r4, r7, pc}
 80042ac:	0800e04c 	.word	0x0800e04c
 80042b0:	00f42400 	.word	0x00f42400
 80042b4:	01e84800 	.word	0x01e84800

080042b8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042b8:	b598      	push	{r3, r4, r7, lr}
 80042ba:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80042bc:	f7ff ff5c 	bl	8004178 <HAL_RCC_GetSysClockFreq>
 80042c0:	4604      	mov	r4, r0
 80042c2:	f7ff f9cc 	bl	800365e <LL_RCC_GetAHBPrescaler>
 80042c6:	4603      	mov	r3, r0
 80042c8:	091b      	lsrs	r3, r3, #4
 80042ca:	f003 030f 	and.w	r3, r3, #15
 80042ce:	4a03      	ldr	r2, [pc, #12]	; (80042dc <HAL_RCC_GetHCLKFreq+0x24>)
 80042d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042d4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80042d8:	4618      	mov	r0, r3
 80042da:	bd98      	pop	{r3, r4, r7, pc}
 80042dc:	0800dfec 	.word	0x0800dfec

080042e0 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042e0:	b598      	push	{r3, r4, r7, lr}
 80042e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80042e4:	f7ff ffe8 	bl	80042b8 <HAL_RCC_GetHCLKFreq>
 80042e8:	4604      	mov	r4, r0
 80042ea:	f7ff f9d0 	bl	800368e <LL_RCC_GetAPB1Prescaler>
 80042ee:	4603      	mov	r3, r0
 80042f0:	0a1b      	lsrs	r3, r3, #8
 80042f2:	4a03      	ldr	r2, [pc, #12]	; (8004300 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042f8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	bd98      	pop	{r3, r4, r7, pc}
 8004300:	0800e02c 	.word	0x0800e02c

08004304 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004304:	b598      	push	{r3, r4, r7, lr}
 8004306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004308:	f7ff ffd6 	bl	80042b8 <HAL_RCC_GetHCLKFreq>
 800430c:	4604      	mov	r4, r0
 800430e:	f7ff f9c9 	bl	80036a4 <LL_RCC_GetAPB2Prescaler>
 8004312:	4603      	mov	r3, r0
 8004314:	0adb      	lsrs	r3, r3, #11
 8004316:	4a03      	ldr	r2, [pc, #12]	; (8004324 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800431c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004320:	4618      	mov	r0, r3
 8004322:	bd98      	pop	{r3, r4, r7, pc}
 8004324:	0800e02c 	.word	0x0800e02c

08004328 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004328:	b590      	push	{r4, r7, lr}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	091b      	lsrs	r3, r3, #4
 8004334:	f003 030f 	and.w	r3, r3, #15
 8004338:	4a10      	ldr	r2, [pc, #64]	; (800437c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800433a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800433e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8004340:	f7ff f998 	bl	8003674 <LL_RCC_GetAHB3Prescaler>
 8004344:	4603      	mov	r3, r0
 8004346:	091b      	lsrs	r3, r3, #4
 8004348:	f003 030f 	and.w	r3, r3, #15
 800434c:	4a0c      	ldr	r2, [pc, #48]	; (8004380 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800434e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	fbb2 f3f3 	udiv	r3, r2, r3
 8004358:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	4a09      	ldr	r2, [pc, #36]	; (8004384 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800435e:	fba2 2303 	umull	r2, r3, r2, r3
 8004362:	0c9c      	lsrs	r4, r3, #18
 8004364:	f7fe ff3e 	bl	80031e4 <HAL_PWREx_GetVoltageRange>
 8004368:	4603      	mov	r3, r0
 800436a:	4619      	mov	r1, r3
 800436c:	4620      	mov	r0, r4
 800436e:	f000 f80b 	bl	8004388 <RCC_SetFlashLatency>
 8004372:	4603      	mov	r3, r0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3714      	adds	r7, #20
 8004378:	46bd      	mov	sp, r7
 800437a:	bd90      	pop	{r4, r7, pc}
 800437c:	0800e04c 	.word	0x0800e04c
 8004380:	0800dfec 	.word	0x0800dfec
 8004384:	431bde83 	.word	0x431bde83

08004388 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b08e      	sub	sp, #56	; 0x38
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8004392:	4a3a      	ldr	r2, [pc, #232]	; (800447c <RCC_SetFlashLatency+0xf4>)
 8004394:	f107 0320 	add.w	r3, r7, #32
 8004398:	e892 0003 	ldmia.w	r2, {r0, r1}
 800439c:	6018      	str	r0, [r3, #0]
 800439e:	3304      	adds	r3, #4
 80043a0:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80043a2:	4a37      	ldr	r2, [pc, #220]	; (8004480 <RCC_SetFlashLatency+0xf8>)
 80043a4:	f107 0318 	add.w	r3, r7, #24
 80043a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80043ac:	6018      	str	r0, [r3, #0]
 80043ae:	3304      	adds	r3, #4
 80043b0:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80043b2:	4a34      	ldr	r2, [pc, #208]	; (8004484 <RCC_SetFlashLatency+0xfc>)
 80043b4:	f107 030c 	add.w	r3, r7, #12
 80043b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80043ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80043be:	2300      	movs	r3, #0
 80043c0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043c8:	d11b      	bne.n	8004402 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80043ca:	2300      	movs	r3, #0
 80043cc:	633b      	str	r3, [r7, #48]	; 0x30
 80043ce:	e014      	b.n	80043fa <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80043d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d2:	005b      	lsls	r3, r3, #1
 80043d4:	3338      	adds	r3, #56	; 0x38
 80043d6:	443b      	add	r3, r7
 80043d8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80043dc:	461a      	mov	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d807      	bhi.n	80043f4 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80043e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	3338      	adds	r3, #56	; 0x38
 80043ea:	443b      	add	r3, r7
 80043ec:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80043f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80043f2:	e021      	b.n	8004438 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80043f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f6:	3301      	adds	r3, #1
 80043f8:	633b      	str	r3, [r7, #48]	; 0x30
 80043fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d9e7      	bls.n	80043d0 <RCC_SetFlashLatency+0x48>
 8004400:	e01a      	b.n	8004438 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004402:	2300      	movs	r3, #0
 8004404:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004406:	e014      	b.n	8004432 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800440a:	005b      	lsls	r3, r3, #1
 800440c:	3338      	adds	r3, #56	; 0x38
 800440e:	443b      	add	r3, r7
 8004410:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8004414:	461a      	mov	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4293      	cmp	r3, r2
 800441a:	d807      	bhi.n	800442c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800441c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	3338      	adds	r3, #56	; 0x38
 8004422:	443b      	add	r3, r7
 8004424:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004428:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800442a:	e005      	b.n	8004438 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800442c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800442e:	3301      	adds	r3, #1
 8004430:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004434:	2b02      	cmp	r3, #2
 8004436:	d9e7      	bls.n	8004408 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004438:	4b13      	ldr	r3, [pc, #76]	; (8004488 <RCC_SetFlashLatency+0x100>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f023 0207 	bic.w	r2, r3, #7
 8004440:	4911      	ldr	r1, [pc, #68]	; (8004488 <RCC_SetFlashLatency+0x100>)
 8004442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004444:	4313      	orrs	r3, r2
 8004446:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004448:	f7fc fca4 	bl	8000d94 <HAL_GetTick>
 800444c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800444e:	e008      	b.n	8004462 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004450:	f7fc fca0 	bl	8000d94 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b02      	cmp	r3, #2
 800445c:	d901      	bls.n	8004462 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e007      	b.n	8004472 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004462:	4b09      	ldr	r3, [pc, #36]	; (8004488 <RCC_SetFlashLatency+0x100>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0307 	and.w	r3, r3, #7
 800446a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800446c:	429a      	cmp	r2, r3
 800446e:	d1ef      	bne.n	8004450 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3738      	adds	r7, #56	; 0x38
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	0800dd84 	.word	0x0800dd84
 8004480:	0800dd8c 	.word	0x0800dd8c
 8004484:	0800dd94 	.word	0x0800dd94
 8004488:	58004000 	.word	0x58004000

0800448c <LL_RCC_LSE_IsReady>:
{
 800448c:	b480      	push	{r7}
 800448e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b02      	cmp	r3, #2
 800449e:	d101      	bne.n	80044a4 <LL_RCC_LSE_IsReady+0x18>
 80044a0:	2301      	movs	r3, #1
 80044a2:	e000      	b.n	80044a6 <LL_RCC_LSE_IsReady+0x1a>
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bc80      	pop	{r7}
 80044ac:	4770      	bx	lr

080044ae <LL_RCC_SetUSARTClockSource>:
{
 80044ae:	b480      	push	{r7}
 80044b0:	b083      	sub	sp, #12
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80044b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	0c1b      	lsrs	r3, r3, #16
 80044c2:	43db      	mvns	r3, r3
 80044c4:	401a      	ands	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044ce:	4313      	orrs	r3, r2
 80044d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	bc80      	pop	{r7}
 80044dc:	4770      	bx	lr

080044de <LL_RCC_SetI2SClockSource>:
{
 80044de:	b480      	push	{r7}
 80044e0:	b083      	sub	sp, #12
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80044e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80044fe:	bf00      	nop
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	bc80      	pop	{r7}
 8004506:	4770      	bx	lr

08004508 <LL_RCC_SetLPUARTClockSource>:
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004518:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800451c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4313      	orrs	r3, r2
 8004524:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	bc80      	pop	{r7}
 8004530:	4770      	bx	lr

08004532 <LL_RCC_SetI2CClockSource>:
{
 8004532:	b480      	push	{r7}
 8004534:	b083      	sub	sp, #12
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800453a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800453e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	091b      	lsrs	r3, r3, #4
 8004546:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800454a:	43db      	mvns	r3, r3
 800454c:	401a      	ands	r2, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	011b      	lsls	r3, r3, #4
 8004552:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004556:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800455a:	4313      	orrs	r3, r2
 800455c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	bc80      	pop	{r7}
 8004568:	4770      	bx	lr

0800456a <LL_RCC_SetLPTIMClockSource>:
{
 800456a:	b480      	push	{r7}
 800456c:	b083      	sub	sp, #12
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004576:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	0c1b      	lsrs	r3, r3, #16
 800457e:	041b      	lsls	r3, r3, #16
 8004580:	43db      	mvns	r3, r3
 8004582:	401a      	ands	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	041b      	lsls	r3, r3, #16
 8004588:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800458c:	4313      	orrs	r3, r2
 800458e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004592:	bf00      	nop
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	bc80      	pop	{r7}
 800459a:	4770      	bx	lr

0800459c <LL_RCC_SetRNGClockSource>:
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80045a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ac:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80045b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bc80      	pop	{r7}
 80045c4:	4770      	bx	lr

080045c6 <LL_RCC_SetADCClockSource>:
{
 80045c6:	b480      	push	{r7}
 80045c8:	b083      	sub	sp, #12
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80045ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80045da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80045e6:	bf00      	nop
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bc80      	pop	{r7}
 80045ee:	4770      	bx	lr

080045f0 <LL_RCC_SetRTCClockSource>:
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80045f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004600:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004604:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4313      	orrs	r3, r2
 800460c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	bc80      	pop	{r7}
 8004618:	4770      	bx	lr

0800461a <LL_RCC_GetRTCClockSource>:
{
 800461a:	b480      	push	{r7}
 800461c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800461e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004626:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800462a:	4618      	mov	r0, r3
 800462c:	46bd      	mov	sp, r7
 800462e:	bc80      	pop	{r7}
 8004630:	4770      	bx	lr

08004632 <LL_RCC_ForceBackupDomainReset>:
{
 8004632:	b480      	push	{r7}
 8004634:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800463a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800463e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004642:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004646:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800464a:	bf00      	nop
 800464c:	46bd      	mov	sp, r7
 800464e:	bc80      	pop	{r7}
 8004650:	4770      	bx	lr

08004652 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004652:	b480      	push	{r7}
 8004654:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004656:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800465a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800465e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004666:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800466a:	bf00      	nop
 800466c:	46bd      	mov	sp, r7
 800466e:	bc80      	pop	{r7}
 8004670:	4770      	bx	lr
	...

08004674 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 800467c:	2300      	movs	r3, #0
 800467e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8004680:	2300      	movs	r3, #0
 8004682:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004684:	2300      	movs	r3, #0
 8004686:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d058      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8004694:	f7fe fd64 	bl	8003160 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004698:	f7fc fb7c 	bl	8000d94 <HAL_GetTick>
 800469c:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800469e:	e009      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046a0:	f7fc fb78 	bl	8000d94 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d902      	bls.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	74fb      	strb	r3, [r7, #19]
        break;
 80046b2:	e006      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80046b4:	4b7b      	ldr	r3, [pc, #492]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046c0:	d1ee      	bne.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80046c2:	7cfb      	ldrb	r3, [r7, #19]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d13c      	bne.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80046c8:	f7ff ffa7 	bl	800461a <LL_RCC_GetRTCClockSource>
 80046cc:	4602      	mov	r2, r0
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d00f      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046e2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046e4:	f7ff ffa5 	bl	8004632 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046e8:	f7ff ffb3 	bl	8004652 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80046ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d014      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004700:	f7fc fb48 	bl	8000d94 <HAL_GetTick>
 8004704:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8004706:	e00b      	b.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004708:	f7fc fb44 	bl	8000d94 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	f241 3288 	movw	r2, #5000	; 0x1388
 8004716:	4293      	cmp	r3, r2
 8004718:	d902      	bls.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	74fb      	strb	r3, [r7, #19]
            break;
 800471e:	e004      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8004720:	f7ff feb4 	bl	800448c <LL_RCC_LSE_IsReady>
 8004724:	4603      	mov	r3, r0
 8004726:	2b01      	cmp	r3, #1
 8004728:	d1ee      	bne.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800472a:	7cfb      	ldrb	r3, [r7, #19]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d105      	bne.n	800473c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004734:	4618      	mov	r0, r3
 8004736:	f7ff ff5b 	bl	80045f0 <LL_RCC_SetRTCClockSource>
 800473a:	e004      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800473c:	7cfb      	ldrb	r3, [r7, #19]
 800473e:	74bb      	strb	r3, [r7, #18]
 8004740:	e001      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004742:	7cfb      	ldrb	r3, [r7, #19]
 8004744:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d004      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	4618      	mov	r0, r3
 8004758:	f7ff fea9 	bl	80044ae <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	2b00      	cmp	r3, #0
 8004766:	d004      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	4618      	mov	r0, r3
 800476e:	f7ff fe9e 	bl	80044ae <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0320 	and.w	r3, r3, #32
 800477a:	2b00      	cmp	r3, #0
 800477c:	d004      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	4618      	mov	r0, r3
 8004784:	f7ff fec0 	bl	8004508 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004790:	2b00      	cmp	r3, #0
 8004792:	d004      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	4618      	mov	r0, r3
 800479a:	f7ff fee6 	bl	800456a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d004      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7ff fedb 	bl	800456a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d004      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7ff fed0 	bl	800456a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d004      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	4618      	mov	r0, r3
 80047dc:	f7ff fea9 	bl	8004532 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d004      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7ff fe9e 	bl	8004532 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d004      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	69db      	ldr	r3, [r3, #28]
 8004806:	4618      	mov	r0, r3
 8004808:	f7ff fe93 	bl	8004532 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0310 	and.w	r3, r3, #16
 8004814:	2b00      	cmp	r3, #0
 8004816:	d011      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	4618      	mov	r0, r3
 800481e:	f7ff fe5e 	bl	80044de <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800482a:	d107      	bne.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 800482c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004836:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800483a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d010      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484c:	4618      	mov	r0, r3
 800484e:	f7ff fea5 	bl	800459c <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004856:	2b00      	cmp	r3, #0
 8004858:	d107      	bne.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800485a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004864:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004868:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d011      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487a:	4618      	mov	r0, r3
 800487c:	f7ff fea3 	bl	80045c6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004884:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004888:	d107      	bne.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800488a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004898:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800489a:	7cbb      	ldrb	r3, [r7, #18]
}
 800489c:	4618      	mov	r0, r3
 800489e:	3718      	adds	r7, #24
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	58000400 	.word	0x58000400

080048a8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d068      	beq.n	800498c <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d106      	bne.n	80048d4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7fc f8b0 	bl	8000a34 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2202      	movs	r2, #2
 80048d8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80048dc:	4b2e      	ldr	r3, [pc, #184]	; (8004998 <HAL_RTC_Init+0xf0>)
 80048de:	22ca      	movs	r2, #202	; 0xca
 80048e0:	625a      	str	r2, [r3, #36]	; 0x24
 80048e2:	4b2d      	ldr	r3, [pc, #180]	; (8004998 <HAL_RTC_Init+0xf0>)
 80048e4:	2253      	movs	r2, #83	; 0x53
 80048e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 fa0f 	bl	8004d0c <RTC_EnterInitMode>
 80048ee:	4603      	mov	r3, r0
 80048f0:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 80048f2:	7bfb      	ldrb	r3, [r7, #15]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d13f      	bne.n	8004978 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80048f8:	4b27      	ldr	r3, [pc, #156]	; (8004998 <HAL_RTC_Init+0xf0>)
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	4a26      	ldr	r2, [pc, #152]	; (8004998 <HAL_RTC_Init+0xf0>)
 80048fe:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8004902:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004906:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8004908:	4b23      	ldr	r3, [pc, #140]	; (8004998 <HAL_RTC_Init+0xf0>)
 800490a:	699a      	ldr	r2, [r3, #24]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6859      	ldr	r1, [r3, #4]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	4319      	orrs	r1, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	430b      	orrs	r3, r1
 800491c:	491e      	ldr	r1, [pc, #120]	; (8004998 <HAL_RTC_Init+0xf0>)
 800491e:	4313      	orrs	r3, r2
 8004920:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68da      	ldr	r2, [r3, #12]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	041b      	lsls	r3, r3, #16
 800492c:	491a      	ldr	r1, [pc, #104]	; (8004998 <HAL_RTC_Init+0xf0>)
 800492e:	4313      	orrs	r3, r2
 8004930:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8004932:	4b19      	ldr	r3, [pc, #100]	; (8004998 <HAL_RTC_Init+0xf0>)
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004942:	430b      	orrs	r3, r1
 8004944:	4914      	ldr	r1, [pc, #80]	; (8004998 <HAL_RTC_Init+0xf0>)
 8004946:	4313      	orrs	r3, r2
 8004948:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 fa12 	bl	8004d74 <RTC_ExitInitMode>
 8004950:	4603      	mov	r3, r0
 8004952:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8004954:	7bfb      	ldrb	r3, [r7, #15]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10e      	bne.n	8004978 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 800495a:	4b0f      	ldr	r3, [pc, #60]	; (8004998 <HAL_RTC_Init+0xf0>)
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a19      	ldr	r1, [r3, #32]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	4319      	orrs	r1, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	430b      	orrs	r3, r1
 8004972:	4909      	ldr	r1, [pc, #36]	; (8004998 <HAL_RTC_Init+0xf0>)
 8004974:	4313      	orrs	r3, r2
 8004976:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004978:	4b07      	ldr	r3, [pc, #28]	; (8004998 <HAL_RTC_Init+0xf0>)
 800497a:	22ff      	movs	r2, #255	; 0xff
 800497c:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 800497e:	7bfb      	ldrb	r3, [r7, #15]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d103      	bne.n	800498c <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 800498c:	7bfb      	ldrb	r3, [r7, #15]
}
 800498e:	4618      	mov	r0, r3
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	40002800 	.word	0x40002800

0800499c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800499c:	b590      	push	{r4, r7, lr}
 800499e:	b087      	sub	sp, #28
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80049a8:	2300      	movs	r3, #0
 80049aa:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d101      	bne.n	80049ba <HAL_RTC_SetAlarm_IT+0x1e>
 80049b6:	2302      	movs	r3, #2
 80049b8:	e0f3      	b.n	8004ba2 <HAL_RTC_SetAlarm_IT+0x206>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2202      	movs	r2, #2
 80049c6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80049ca:	4b78      	ldr	r3, [pc, #480]	; (8004bac <HAL_RTC_SetAlarm_IT+0x210>)
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049d2:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049da:	d06a      	beq.n	8004ab2 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d13a      	bne.n	8004a58 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80049e2:	4b72      	ldr	r3, [pc, #456]	; (8004bac <HAL_RTC_SetAlarm_IT+0x210>)
 80049e4:	699b      	ldr	r3, [r3, #24]
 80049e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d102      	bne.n	80049f4 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	2200      	movs	r2, #0
 80049f2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	695b      	ldr	r3, [r3, #20]
 80049f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	4618      	mov	r0, r3
 8004a02:	f000 f9f5 	bl	8004df0 <RTC_ByteToBcd2>
 8004a06:	4603      	mov	r3, r0
 8004a08:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	785b      	ldrb	r3, [r3, #1]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f000 f9ee 	bl	8004df0 <RTC_ByteToBcd2>
 8004a14:	4603      	mov	r3, r0
 8004a16:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004a18:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	789b      	ldrb	r3, [r3, #2]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f000 f9e6 	bl	8004df0 <RTC_ByteToBcd2>
 8004a24:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004a26:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	78db      	ldrb	r3, [r3, #3]
 8004a2e:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004a30:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 f9d8 	bl	8004df0 <RTC_ByteToBcd2>
 8004a40:	4603      	mov	r3, r0
 8004a42:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004a44:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004a4c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004a52:	4313      	orrs	r3, r2
 8004a54:	617b      	str	r3, [r7, #20]
 8004a56:	e02c      	b.n	8004ab2 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8004a60:	d00d      	beq.n	8004a7e <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a6a:	d008      	beq.n	8004a7e <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004a6c:	4b4f      	ldr	r3, [pc, #316]	; (8004bac <HAL_RTC_SetAlarm_IT+0x210>)
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d102      	bne.n	8004a7e <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	785b      	ldrb	r3, [r3, #1]
 8004a88:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004a8a:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004a90:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	78db      	ldrb	r3, [r3, #3]
 8004a96:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004a98:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004aa0:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004aa2:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004aa8:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ab2:	4b3e      	ldr	r3, [pc, #248]	; (8004bac <HAL_RTC_SetAlarm_IT+0x210>)
 8004ab4:	22ca      	movs	r2, #202	; 0xca
 8004ab6:	625a      	str	r2, [r3, #36]	; 0x24
 8004ab8:	4b3c      	ldr	r3, [pc, #240]	; (8004bac <HAL_RTC_SetAlarm_IT+0x210>)
 8004aba:	2253      	movs	r2, #83	; 0x53
 8004abc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ac6:	d12c      	bne.n	8004b22 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004ac8:	4b38      	ldr	r3, [pc, #224]	; (8004bac <HAL_RTC_SetAlarm_IT+0x210>)
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	4a37      	ldr	r2, [pc, #220]	; (8004bac <HAL_RTC_SetAlarm_IT+0x210>)
 8004ace:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004ad2:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004ad4:	4b35      	ldr	r3, [pc, #212]	; (8004bac <HAL_RTC_SetAlarm_IT+0x210>)
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ae0:	d107      	bne.n	8004af2 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	699a      	ldr	r2, [r3, #24]
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	69db      	ldr	r3, [r3, #28]
 8004aea:	4930      	ldr	r1, [pc, #192]	; (8004bac <HAL_RTC_SetAlarm_IT+0x210>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	644b      	str	r3, [r1, #68]	; 0x44
 8004af0:	e006      	b.n	8004b00 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8004af2:	4a2e      	ldr	r2, [pc, #184]	; (8004bac <HAL_RTC_SetAlarm_IT+0x210>)
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8004af8:	4a2c      	ldr	r2, [pc, #176]	; (8004bac <HAL_RTC_SetAlarm_IT+0x210>)
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8004b00:	4a2a      	ldr	r2, [pc, #168]	; (8004bac <HAL_RTC_SetAlarm_IT+0x210>)
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0c:	f043 0201 	orr.w	r2, r3, #1
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004b14:	4b25      	ldr	r3, [pc, #148]	; (8004bac <HAL_RTC_SetAlarm_IT+0x210>)
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	4a24      	ldr	r2, [pc, #144]	; (8004bac <HAL_RTC_SetAlarm_IT+0x210>)
 8004b1a:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8004b1e:	6193      	str	r3, [r2, #24]
 8004b20:	e02b      	b.n	8004b7a <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004b22:	4b22      	ldr	r3, [pc, #136]	; (8004bac <HAL_RTC_SetAlarm_IT+0x210>)
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	4a21      	ldr	r2, [pc, #132]	; (8004bac <HAL_RTC_SetAlarm_IT+0x210>)
 8004b28:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8004b2c:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004b2e:	4b1f      	ldr	r3, [pc, #124]	; (8004bac <HAL_RTC_SetAlarm_IT+0x210>)
 8004b30:	2202      	movs	r2, #2
 8004b32:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b3a:	d107      	bne.n	8004b4c <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	699a      	ldr	r2, [r3, #24]
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	69db      	ldr	r3, [r3, #28]
 8004b44:	4919      	ldr	r1, [pc, #100]	; (8004bac <HAL_RTC_SetAlarm_IT+0x210>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004b4a:	e006      	b.n	8004b5a <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8004b4c:	4a17      	ldr	r2, [pc, #92]	; (8004bac <HAL_RTC_SetAlarm_IT+0x210>)
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8004b52:	4a16      	ldr	r2, [pc, #88]	; (8004bac <HAL_RTC_SetAlarm_IT+0x210>)
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8004b5a:	4a14      	ldr	r2, [pc, #80]	; (8004bac <HAL_RTC_SetAlarm_IT+0x210>)
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b66:	f043 0202 	orr.w	r2, r3, #2
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004b6e:	4b0f      	ldr	r3, [pc, #60]	; (8004bac <HAL_RTC_SetAlarm_IT+0x210>)
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	4a0e      	ldr	r2, [pc, #56]	; (8004bac <HAL_RTC_SetAlarm_IT+0x210>)
 8004b74:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8004b78:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004b7a:	4b0d      	ldr	r3, [pc, #52]	; (8004bb0 <HAL_RTC_SetAlarm_IT+0x214>)
 8004b7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b80:	4a0b      	ldr	r2, [pc, #44]	; (8004bb0 <HAL_RTC_SetAlarm_IT+0x214>)
 8004b82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b86:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b8a:	4b08      	ldr	r3, [pc, #32]	; (8004bac <HAL_RTC_SetAlarm_IT+0x210>)
 8004b8c:	22ff      	movs	r2, #255	; 0xff
 8004b8e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	371c      	adds	r7, #28
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd90      	pop	{r4, r7, pc}
 8004baa:	bf00      	nop
 8004bac:	40002800 	.word	0x40002800
 8004bb0:	58000800 	.word	0x58000800

08004bb4 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d101      	bne.n	8004bcc <HAL_RTC_DeactivateAlarm+0x18>
 8004bc8:	2302      	movs	r3, #2
 8004bca:	e048      	b.n	8004c5e <HAL_RTC_DeactivateAlarm+0xaa>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004bdc:	4b22      	ldr	r3, [pc, #136]	; (8004c68 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004bde:	22ca      	movs	r2, #202	; 0xca
 8004be0:	625a      	str	r2, [r3, #36]	; 0x24
 8004be2:	4b21      	ldr	r3, [pc, #132]	; (8004c68 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004be4:	2253      	movs	r2, #83	; 0x53
 8004be6:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bee:	d115      	bne.n	8004c1c <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004bf0:	4b1d      	ldr	r3, [pc, #116]	; (8004c68 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	4a1c      	ldr	r2, [pc, #112]	; (8004c68 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004bf6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004bfa:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8004bfc:	4b1a      	ldr	r3, [pc, #104]	; (8004c68 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c00:	4a19      	ldr	r2, [pc, #100]	; (8004c68 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004c02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c06:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0c:	f023 0201 	bic.w	r2, r3, #1
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004c14:	4b14      	ldr	r3, [pc, #80]	; (8004c68 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004c16:	2201      	movs	r2, #1
 8004c18:	65da      	str	r2, [r3, #92]	; 0x5c
 8004c1a:	e014      	b.n	8004c46 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004c1c:	4b12      	ldr	r3, [pc, #72]	; (8004c68 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	4a11      	ldr	r2, [pc, #68]	; (8004c68 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004c22:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8004c26:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8004c28:	4b0f      	ldr	r3, [pc, #60]	; (8004c68 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c2c:	4a0e      	ldr	r2, [pc, #56]	; (8004c68 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004c2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c32:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c38:	f023 0202 	bic.w	r2, r3, #2
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004c40:	4b09      	ldr	r3, [pc, #36]	; (8004c68 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004c42:	2202      	movs	r2, #2
 8004c44:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c46:	4b08      	ldr	r3, [pc, #32]	; (8004c68 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004c48:	22ff      	movs	r2, #255	; 0xff
 8004c4a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bc80      	pop	{r7}
 8004c66:	4770      	bx	lr
 8004c68:	40002800 	.word	0x40002800

08004c6c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8004c74:	4b11      	ldr	r3, [pc, #68]	; (8004cbc <HAL_RTC_AlarmIRQHandler+0x50>)
 8004c76:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d005      	beq.n	8004c96 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004c8a:	4b0c      	ldr	r3, [pc, #48]	; (8004cbc <HAL_RTC_AlarmIRQHandler+0x50>)
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7fc fb36 	bl	8001302 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f003 0302 	and.w	r3, r3, #2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d005      	beq.n	8004cac <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004ca0:	4b06      	ldr	r3, [pc, #24]	; (8004cbc <HAL_RTC_AlarmIRQHandler+0x50>)
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 f94a 	bl	8004f40 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8004cb4:	bf00      	nop
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	40002800 	.word	0x40002800

08004cc0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8004cc8:	4b0f      	ldr	r3, [pc, #60]	; (8004d08 <HAL_RTC_WaitForSynchro+0x48>)
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	4a0e      	ldr	r2, [pc, #56]	; (8004d08 <HAL_RTC_WaitForSynchro+0x48>)
 8004cce:	f023 0320 	bic.w	r3, r3, #32
 8004cd2:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8004cd4:	f7fc f85e 	bl	8000d94 <HAL_GetTick>
 8004cd8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004cda:	e009      	b.n	8004cf0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004cdc:	f7fc f85a 	bl	8000d94 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004cea:	d901      	bls.n	8004cf0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e006      	b.n	8004cfe <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004cf0:	4b05      	ldr	r3, [pc, #20]	; (8004d08 <HAL_RTC_WaitForSynchro+0x48>)
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	f003 0320 	and.w	r3, r3, #32
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d0ef      	beq.n	8004cdc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	40002800 	.word	0x40002800

08004d0c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d14:	2300      	movs	r3, #0
 8004d16:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8004d18:	4b15      	ldr	r3, [pc, #84]	; (8004d70 <RTC_EnterInitMode+0x64>)
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d120      	bne.n	8004d66 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004d24:	4b12      	ldr	r3, [pc, #72]	; (8004d70 <RTC_EnterInitMode+0x64>)
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	4a11      	ldr	r2, [pc, #68]	; (8004d70 <RTC_EnterInitMode+0x64>)
 8004d2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d2e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8004d30:	f7fc f830 	bl	8000d94 <HAL_GetTick>
 8004d34:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004d36:	e00d      	b.n	8004d54 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004d38:	f7fc f82c 	bl	8000d94 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d46:	d905      	bls.n	8004d54 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2203      	movs	r2, #3
 8004d50:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004d54:	4b06      	ldr	r3, [pc, #24]	; (8004d70 <RTC_EnterInitMode+0x64>)
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d102      	bne.n	8004d66 <RTC_EnterInitMode+0x5a>
 8004d60:	7bfb      	ldrb	r3, [r7, #15]
 8004d62:	2b03      	cmp	r3, #3
 8004d64:	d1e8      	bne.n	8004d38 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8004d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3710      	adds	r7, #16
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	40002800 	.word	0x40002800

08004d74 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004d80:	4b1a      	ldr	r3, [pc, #104]	; (8004dec <RTC_ExitInitMode+0x78>)
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	4a19      	ldr	r2, [pc, #100]	; (8004dec <RTC_ExitInitMode+0x78>)
 8004d86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d8a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004d8c:	4b17      	ldr	r3, [pc, #92]	; (8004dec <RTC_ExitInitMode+0x78>)
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	f003 0320 	and.w	r3, r3, #32
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10c      	bne.n	8004db2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f7ff ff91 	bl	8004cc0 <HAL_RTC_WaitForSynchro>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d01e      	beq.n	8004de2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2203      	movs	r2, #3
 8004da8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	73fb      	strb	r3, [r7, #15]
 8004db0:	e017      	b.n	8004de2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004db2:	4b0e      	ldr	r3, [pc, #56]	; (8004dec <RTC_ExitInitMode+0x78>)
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	4a0d      	ldr	r2, [pc, #52]	; (8004dec <RTC_ExitInitMode+0x78>)
 8004db8:	f023 0320 	bic.w	r3, r3, #32
 8004dbc:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f7ff ff7e 	bl	8004cc0 <HAL_RTC_WaitForSynchro>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d005      	beq.n	8004dd6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2203      	movs	r2, #3
 8004dce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004dd6:	4b05      	ldr	r3, [pc, #20]	; (8004dec <RTC_ExitInitMode+0x78>)
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	4a04      	ldr	r2, [pc, #16]	; (8004dec <RTC_ExitInitMode+0x78>)
 8004ddc:	f043 0320 	orr.w	r3, r3, #32
 8004de0:	6193      	str	r3, [r2, #24]
  }

  return status;
 8004de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3710      	adds	r7, #16
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	40002800 	.word	0x40002800

08004df0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	4603      	mov	r3, r0
 8004df8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8004dfe:	79fb      	ldrb	r3, [r7, #7]
 8004e00:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8004e02:	e005      	b.n	8004e10 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	3301      	adds	r3, #1
 8004e08:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8004e0a:	7afb      	ldrb	r3, [r7, #11]
 8004e0c:	3b0a      	subs	r3, #10
 8004e0e:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8004e10:	7afb      	ldrb	r3, [r7, #11]
 8004e12:	2b09      	cmp	r3, #9
 8004e14:	d8f6      	bhi.n	8004e04 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	011b      	lsls	r3, r3, #4
 8004e1c:	b2da      	uxtb	r2, r3
 8004e1e:	7afb      	ldrb	r3, [r7, #11]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	b2db      	uxtb	r3, r3
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3714      	adds	r7, #20
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bc80      	pop	{r7}
 8004e2c:	4770      	bx	lr
	...

08004e30 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d101      	bne.n	8004e46 <HAL_RTCEx_EnableBypassShadow+0x16>
 8004e42:	2302      	movs	r3, #2
 8004e44:	e01f      	b.n	8004e86 <HAL_RTCEx_EnableBypassShadow+0x56>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2202      	movs	r2, #2
 8004e52:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e56:	4b0e      	ldr	r3, [pc, #56]	; (8004e90 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8004e58:	22ca      	movs	r2, #202	; 0xca
 8004e5a:	625a      	str	r2, [r3, #36]	; 0x24
 8004e5c:	4b0c      	ldr	r3, [pc, #48]	; (8004e90 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8004e5e:	2253      	movs	r2, #83	; 0x53
 8004e60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004e62:	4b0b      	ldr	r3, [pc, #44]	; (8004e90 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	4a0a      	ldr	r2, [pc, #40]	; (8004e90 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8004e68:	f043 0320 	orr.w	r3, r3, #32
 8004e6c:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e6e:	4b08      	ldr	r3, [pc, #32]	; (8004e90 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8004e70:	22ff      	movs	r2, #255	; 0xff
 8004e72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bc80      	pop	{r7}
 8004e8e:	4770      	bx	lr
 8004e90:	40002800 	.word	0x40002800

08004e94 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d101      	bne.n	8004eaa <HAL_RTCEx_SetSSRU_IT+0x16>
 8004ea6:	2302      	movs	r3, #2
 8004ea8:	e027      	b.n	8004efa <HAL_RTCEx_SetSSRU_IT+0x66>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2202      	movs	r2, #2
 8004eb6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004eba:	4b12      	ldr	r3, [pc, #72]	; (8004f04 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8004ebc:	22ca      	movs	r2, #202	; 0xca
 8004ebe:	625a      	str	r2, [r3, #36]	; 0x24
 8004ec0:	4b10      	ldr	r3, [pc, #64]	; (8004f04 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8004ec2:	2253      	movs	r2, #83	; 0x53
 8004ec4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8004ec6:	4b0f      	ldr	r3, [pc, #60]	; (8004f04 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	4a0e      	ldr	r2, [pc, #56]	; (8004f04 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8004ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ed0:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8004ed2:	4b0d      	ldr	r3, [pc, #52]	; (8004f08 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8004ed4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ed8:	4a0b      	ldr	r2, [pc, #44]	; (8004f08 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8004eda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ede:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ee2:	4b08      	ldr	r3, [pc, #32]	; (8004f04 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8004ee4:	22ff      	movs	r2, #255	; 0xff
 8004ee6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	370c      	adds	r7, #12
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bc80      	pop	{r7}
 8004f02:	4770      	bx	lr
 8004f04:	40002800 	.word	0x40002800
 8004f08:	58000800 	.word	0x58000800

08004f0c <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8004f14:	4b09      	ldr	r3, [pc, #36]	; (8004f3c <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8004f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d005      	beq.n	8004f2c <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8004f20:	4b06      	ldr	r3, [pc, #24]	; (8004f3c <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8004f22:	2240      	movs	r2, #64	; 0x40
 8004f24:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f7fc f9f5 	bl	8001316 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8004f34:	bf00      	nop
 8004f36:	3708      	adds	r7, #8
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	40002800 	.word	0x40002800

08004f40 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bc80      	pop	{r7}
 8004f50:	4770      	bx	lr
	...

08004f54 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b087      	sub	sp, #28
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8004f60:	4b07      	ldr	r3, [pc, #28]	; (8004f80 <HAL_RTCEx_BKUPWrite+0x2c>)
 8004f62:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	601a      	str	r2, [r3, #0]
}
 8004f74:	bf00      	nop
 8004f76:	371c      	adds	r7, #28
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bc80      	pop	{r7}
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	4000b100 	.word	0x4000b100

08004f84 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8004f8e:	4b07      	ldr	r3, [pc, #28]	; (8004fac <HAL_RTCEx_BKUPRead+0x28>)
 8004f90:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	4413      	add	r3, r2
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3714      	adds	r7, #20
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bc80      	pop	{r7}
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	4000b100 	.word	0x4000b100

08004fb0 <LL_PWR_SetRadioBusyTrigger>:
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8004fb8:	4b06      	ldr	r3, [pc, #24]	; (8004fd4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004fc0:	4904      	ldr	r1, [pc, #16]	; (8004fd4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	608b      	str	r3, [r1, #8]
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bc80      	pop	{r7}
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	58000400 	.word	0x58000400

08004fd8 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8004fd8:	b480      	push	{r7}
 8004fda:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004fdc:	4b05      	ldr	r3, [pc, #20]	; (8004ff4 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8004fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe2:	4a04      	ldr	r2, [pc, #16]	; (8004ff4 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8004fe4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fe8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004fec:	bf00      	nop
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bc80      	pop	{r7}
 8004ff2:	4770      	bx	lr
 8004ff4:	58000400 	.word	0x58000400

08004ff8 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004ffc:	4b05      	ldr	r3, [pc, #20]	; (8005014 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8004ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005002:	4a04      	ldr	r2, [pc, #16]	; (8005014 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8005004:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005008:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800500c:	bf00      	nop
 800500e:	46bd      	mov	sp, r7
 8005010:	bc80      	pop	{r7}
 8005012:	4770      	bx	lr
 8005014:	58000400 	.word	0x58000400

08005018 <LL_PWR_ClearFlag_RFBUSY>:
{
 8005018:	b480      	push	{r7}
 800501a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 800501c:	4b03      	ldr	r3, [pc, #12]	; (800502c <LL_PWR_ClearFlag_RFBUSY+0x14>)
 800501e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005022:	619a      	str	r2, [r3, #24]
}
 8005024:	bf00      	nop
 8005026:	46bd      	mov	sp, r7
 8005028:	bc80      	pop	{r7}
 800502a:	4770      	bx	lr
 800502c:	58000400 	.word	0x58000400

08005030 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8005030:	b480      	push	{r7}
 8005032:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8005034:	4b06      	ldr	r3, [pc, #24]	; (8005050 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	f003 0302 	and.w	r3, r3, #2
 800503c:	2b02      	cmp	r3, #2
 800503e:	d101      	bne.n	8005044 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8005040:	2301      	movs	r3, #1
 8005042:	e000      	b.n	8005046 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	46bd      	mov	sp, r7
 800504a:	bc80      	pop	{r7}
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	58000400 	.word	0x58000400

08005054 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8005054:	b480      	push	{r7}
 8005056:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8005058:	4b06      	ldr	r3, [pc, #24]	; (8005074 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	f003 0304 	and.w	r3, r3, #4
 8005060:	2b04      	cmp	r3, #4
 8005062:	d101      	bne.n	8005068 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8005064:	2301      	movs	r3, #1
 8005066:	e000      	b.n	800506a <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	46bd      	mov	sp, r7
 800506e:	bc80      	pop	{r7}
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	58000400 	.word	0x58000400

08005078 <LL_RCC_RF_DisableReset>:
{
 8005078:	b480      	push	{r7}
 800507a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 800507c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005080:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005084:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005088:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800508c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005090:	bf00      	nop
 8005092:	46bd      	mov	sp, r7
 8005094:	bc80      	pop	{r7}
 8005096:	4770      	bx	lr

08005098 <LL_RCC_IsRFUnderReset>:
{
 8005098:	b480      	push	{r7}
 800509a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 800509c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050ac:	d101      	bne.n	80050b2 <LL_RCC_IsRFUnderReset+0x1a>
 80050ae:	2301      	movs	r3, #1
 80050b0:	e000      	b.n	80050b4 <LL_RCC_IsRFUnderReset+0x1c>
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bc80      	pop	{r7}
 80050ba:	4770      	bx	lr

080050bc <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80050c4:	4b06      	ldr	r3, [pc, #24]	; (80050e0 <LL_EXTI_EnableIT_32_63+0x24>)
 80050c6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80050ca:	4905      	ldr	r1, [pc, #20]	; (80050e0 <LL_EXTI_EnableIT_32_63+0x24>)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	bc80      	pop	{r7}
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	58000800 	.word	0x58000800

080050e4 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d103      	bne.n	80050fa <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	73fb      	strb	r3, [r7, #15]
    return status;
 80050f6:	7bfb      	ldrb	r3, [r7, #15]
 80050f8:	e04b      	b.n	8005192 <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 80050fa:	2300      	movs	r3, #0
 80050fc:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	799b      	ldrb	r3, [r3, #6]
 8005102:	b2db      	uxtb	r3, r3
 8005104:	2b00      	cmp	r3, #0
 8005106:	d105      	bne.n	8005114 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7fb fda4 	bl	8000c5c <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 800511a:	f7ff ffad 	bl	8005078 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800511e:	4b1f      	ldr	r3, [pc, #124]	; (800519c <HAL_SUBGHZ_Init+0xb8>)
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	4613      	mov	r3, r2
 8005124:	00db      	lsls	r3, r3, #3
 8005126:	1a9b      	subs	r3, r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	0cdb      	lsrs	r3, r3, #19
 800512c:	2264      	movs	r2, #100	; 0x64
 800512e:	fb02 f303 	mul.w	r3, r2, r3
 8005132:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d105      	bne.n	8005146 <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	609a      	str	r2, [r3, #8]
      break;
 8005144:	e007      	b.n	8005156 <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	3b01      	subs	r3, #1
 800514a:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 800514c:	f7ff ffa4 	bl	8005098 <LL_RCC_IsRFUnderReset>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1ee      	bne.n	8005134 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8005156:	f7ff ff3f 	bl	8004fd8 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 800515a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800515e:	f7ff ffad 	bl	80050bc <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8005162:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005166:	f7ff ff23 	bl	8004fb0 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 800516a:	f7ff ff55 	bl	8005018 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 800516e:	7bfb      	ldrb	r3, [r7, #15]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d10a      	bne.n	800518a <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4618      	mov	r0, r3
 800517a:	f000 faad 	bl	80056d8 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2201      	movs	r2, #1
 8005182:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2201      	movs	r2, #1
 800518e:	719a      	strb	r2, [r3, #6]

  return status;
 8005190:	7bfb      	ldrb	r3, [r7, #15]
}
 8005192:	4618      	mov	r0, r3
 8005194:	3710      	adds	r7, #16
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	20000000 	.word	0x20000000

080051a0 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b086      	sub	sp, #24
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	607a      	str	r2, [r7, #4]
 80051aa:	461a      	mov	r2, r3
 80051ac:	460b      	mov	r3, r1
 80051ae:	817b      	strh	r3, [r7, #10]
 80051b0:	4613      	mov	r3, r2
 80051b2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	799b      	ldrb	r3, [r3, #6]
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d14a      	bne.n	8005254 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	795b      	ldrb	r3, [r3, #5]
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d101      	bne.n	80051ca <HAL_SUBGHZ_WriteRegisters+0x2a>
 80051c6:	2302      	movs	r3, #2
 80051c8:	e045      	b.n	8005256 <HAL_SUBGHZ_WriteRegisters+0xb6>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2201      	movs	r2, #1
 80051ce:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2202      	movs	r2, #2
 80051d4:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80051d6:	68f8      	ldr	r0, [r7, #12]
 80051d8:	f000 fb4c 	bl	8005874 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80051dc:	f7ff ff0c 	bl	8004ff8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80051e0:	210d      	movs	r1, #13
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f000 fa98 	bl	8005718 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80051e8:	897b      	ldrh	r3, [r7, #10]
 80051ea:	0a1b      	lsrs	r3, r3, #8
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	4619      	mov	r1, r3
 80051f2:	68f8      	ldr	r0, [r7, #12]
 80051f4:	f000 fa90 	bl	8005718 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80051f8:	897b      	ldrh	r3, [r7, #10]
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	4619      	mov	r1, r3
 80051fe:	68f8      	ldr	r0, [r7, #12]
 8005200:	f000 fa8a 	bl	8005718 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005204:	2300      	movs	r3, #0
 8005206:	82bb      	strh	r3, [r7, #20]
 8005208:	e00a      	b.n	8005220 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800520a:	8abb      	ldrh	r3, [r7, #20]
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	4413      	add	r3, r2
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	4619      	mov	r1, r3
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f000 fa7f 	bl	8005718 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800521a:	8abb      	ldrh	r3, [r7, #20]
 800521c:	3301      	adds	r3, #1
 800521e:	82bb      	strh	r3, [r7, #20]
 8005220:	8aba      	ldrh	r2, [r7, #20]
 8005222:	893b      	ldrh	r3, [r7, #8]
 8005224:	429a      	cmp	r2, r3
 8005226:	d3f0      	bcc.n	800520a <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005228:	f7ff fed6 	bl	8004fd8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f000 fb45 	bl	80058bc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d002      	beq.n	8005240 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	75fb      	strb	r3, [r7, #23]
 800523e:	e001      	b.n	8005244 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8005240:	2300      	movs	r3, #0
 8005242:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2201      	movs	r2, #1
 8005248:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	715a      	strb	r2, [r3, #5]

    return status;
 8005250:	7dfb      	ldrb	r3, [r7, #23]
 8005252:	e000      	b.n	8005256 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8005254:	2302      	movs	r3, #2
  }
}
 8005256:	4618      	mov	r0, r3
 8005258:	3718      	adds	r7, #24
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}

0800525e <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800525e:	b580      	push	{r7, lr}
 8005260:	b088      	sub	sp, #32
 8005262:	af00      	add	r7, sp, #0
 8005264:	60f8      	str	r0, [r7, #12]
 8005266:	607a      	str	r2, [r7, #4]
 8005268:	461a      	mov	r2, r3
 800526a:	460b      	mov	r3, r1
 800526c:	817b      	strh	r3, [r7, #10]
 800526e:	4613      	mov	r3, r2
 8005270:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	799b      	ldrb	r3, [r3, #6]
 800527a:	b2db      	uxtb	r3, r3
 800527c:	2b01      	cmp	r3, #1
 800527e:	d14a      	bne.n	8005316 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	795b      	ldrb	r3, [r3, #5]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d101      	bne.n	800528c <HAL_SUBGHZ_ReadRegisters+0x2e>
 8005288:	2302      	movs	r3, #2
 800528a:	e045      	b.n	8005318 <HAL_SUBGHZ_ReadRegisters+0xba>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2201      	movs	r2, #1
 8005290:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005292:	68f8      	ldr	r0, [r7, #12]
 8005294:	f000 faee 	bl	8005874 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005298:	f7ff feae 	bl	8004ff8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 800529c:	211d      	movs	r1, #29
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	f000 fa3a 	bl	8005718 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80052a4:	897b      	ldrh	r3, [r7, #10]
 80052a6:	0a1b      	lsrs	r3, r3, #8
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	4619      	mov	r1, r3
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f000 fa32 	bl	8005718 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80052b4:	897b      	ldrh	r3, [r7, #10]
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	4619      	mov	r1, r3
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f000 fa2c 	bl	8005718 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80052c0:	2100      	movs	r1, #0
 80052c2:	68f8      	ldr	r0, [r7, #12]
 80052c4:	f000 fa28 	bl	8005718 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80052c8:	2300      	movs	r3, #0
 80052ca:	82fb      	strh	r3, [r7, #22]
 80052cc:	e009      	b.n	80052e2 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80052ce:	69b9      	ldr	r1, [r7, #24]
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f000 fa77 	bl	80057c4 <SUBGHZSPI_Receive>
      pData++;
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	3301      	adds	r3, #1
 80052da:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80052dc:	8afb      	ldrh	r3, [r7, #22]
 80052de:	3301      	adds	r3, #1
 80052e0:	82fb      	strh	r3, [r7, #22]
 80052e2:	8afa      	ldrh	r2, [r7, #22]
 80052e4:	893b      	ldrh	r3, [r7, #8]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d3f1      	bcc.n	80052ce <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80052ea:	f7ff fe75 	bl	8004fd8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f000 fae4 	bl	80058bc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d002      	beq.n	8005302 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	77fb      	strb	r3, [r7, #31]
 8005300:	e001      	b.n	8005306 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8005302:	2300      	movs	r3, #0
 8005304:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2201      	movs	r2, #1
 800530a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	715a      	strb	r2, [r3, #5]

    return status;
 8005312:	7ffb      	ldrb	r3, [r7, #31]
 8005314:	e000      	b.n	8005318 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8005316:	2302      	movs	r3, #2
  }
}
 8005318:	4618      	mov	r0, r3
 800531a:	3720      	adds	r7, #32
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	607a      	str	r2, [r7, #4]
 800532a:	461a      	mov	r2, r3
 800532c:	460b      	mov	r3, r1
 800532e:	72fb      	strb	r3, [r7, #11]
 8005330:	4613      	mov	r3, r2
 8005332:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	799b      	ldrb	r3, [r3, #6]
 8005338:	b2db      	uxtb	r3, r3
 800533a:	2b01      	cmp	r3, #1
 800533c:	d14a      	bne.n	80053d4 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	795b      	ldrb	r3, [r3, #5]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d101      	bne.n	800534a <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8005346:	2302      	movs	r3, #2
 8005348:	e045      	b.n	80053d6 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2201      	movs	r2, #1
 800534e:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	f000 fa8f 	bl	8005874 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8005356:	7afb      	ldrb	r3, [r7, #11]
 8005358:	2b84      	cmp	r3, #132	; 0x84
 800535a:	d002      	beq.n	8005362 <HAL_SUBGHZ_ExecSetCmd+0x42>
 800535c:	7afb      	ldrb	r3, [r7, #11]
 800535e:	2b94      	cmp	r3, #148	; 0x94
 8005360:	d103      	bne.n	800536a <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2201      	movs	r2, #1
 8005366:	711a      	strb	r2, [r3, #4]
 8005368:	e002      	b.n	8005370 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005370:	f7ff fe42 	bl	8004ff8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005374:	7afb      	ldrb	r3, [r7, #11]
 8005376:	4619      	mov	r1, r3
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	f000 f9cd 	bl	8005718 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800537e:	2300      	movs	r3, #0
 8005380:	82bb      	strh	r3, [r7, #20]
 8005382:	e00a      	b.n	800539a <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005384:	8abb      	ldrh	r3, [r7, #20]
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	4413      	add	r3, r2
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	4619      	mov	r1, r3
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f000 f9c2 	bl	8005718 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005394:	8abb      	ldrh	r3, [r7, #20]
 8005396:	3301      	adds	r3, #1
 8005398:	82bb      	strh	r3, [r7, #20]
 800539a:	8aba      	ldrh	r2, [r7, #20]
 800539c:	893b      	ldrh	r3, [r7, #8]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d3f0      	bcc.n	8005384 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80053a2:	f7ff fe19 	bl	8004fd8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 80053a6:	7afb      	ldrb	r3, [r7, #11]
 80053a8:	2b84      	cmp	r3, #132	; 0x84
 80053aa:	d002      	beq.n	80053b2 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80053ac:	68f8      	ldr	r0, [r7, #12]
 80053ae:	f000 fa85 	bl	80058bc <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d002      	beq.n	80053c0 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	75fb      	strb	r3, [r7, #23]
 80053be:	e001      	b.n	80053c4 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 80053c0:	2300      	movs	r3, #0
 80053c2:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2201      	movs	r2, #1
 80053c8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	715a      	strb	r2, [r3, #5]

    return status;
 80053d0:	7dfb      	ldrb	r3, [r7, #23]
 80053d2:	e000      	b.n	80053d6 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80053d4:	2302      	movs	r3, #2
  }
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3718      	adds	r7, #24
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80053de:	b580      	push	{r7, lr}
 80053e0:	b088      	sub	sp, #32
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	60f8      	str	r0, [r7, #12]
 80053e6:	607a      	str	r2, [r7, #4]
 80053e8:	461a      	mov	r2, r3
 80053ea:	460b      	mov	r3, r1
 80053ec:	72fb      	strb	r3, [r7, #11]
 80053ee:	4613      	mov	r3, r2
 80053f0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	799b      	ldrb	r3, [r3, #6]
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d13d      	bne.n	800547c <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	795b      	ldrb	r3, [r3, #5]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d101      	bne.n	800540c <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8005408:	2302      	movs	r3, #2
 800540a:	e038      	b.n	800547e <HAL_SUBGHZ_ExecGetCmd+0xa0>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2201      	movs	r2, #1
 8005410:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f000 fa2e 	bl	8005874 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005418:	f7ff fdee 	bl	8004ff8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800541c:	7afb      	ldrb	r3, [r7, #11]
 800541e:	4619      	mov	r1, r3
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f000 f979 	bl	8005718 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005426:	2100      	movs	r1, #0
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	f000 f975 	bl	8005718 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800542e:	2300      	movs	r3, #0
 8005430:	82fb      	strh	r3, [r7, #22]
 8005432:	e009      	b.n	8005448 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005434:	69b9      	ldr	r1, [r7, #24]
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f000 f9c4 	bl	80057c4 <SUBGHZSPI_Receive>
      pData++;
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	3301      	adds	r3, #1
 8005440:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8005442:	8afb      	ldrh	r3, [r7, #22]
 8005444:	3301      	adds	r3, #1
 8005446:	82fb      	strh	r3, [r7, #22]
 8005448:	8afa      	ldrh	r2, [r7, #22]
 800544a:	893b      	ldrh	r3, [r7, #8]
 800544c:	429a      	cmp	r2, r3
 800544e:	d3f1      	bcc.n	8005434 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005450:	f7ff fdc2 	bl	8004fd8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	f000 fa31 	bl	80058bc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d002      	beq.n	8005468 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	77fb      	strb	r3, [r7, #31]
 8005466:	e001      	b.n	800546c <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8005468:	2300      	movs	r3, #0
 800546a:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2201      	movs	r2, #1
 8005470:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	715a      	strb	r2, [r3, #5]

    return status;
 8005478:	7ffb      	ldrb	r3, [r7, #31]
 800547a:	e000      	b.n	800547e <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800547c:	2302      	movs	r3, #2
  }
}
 800547e:	4618      	mov	r0, r3
 8005480:	3720      	adds	r7, #32
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b086      	sub	sp, #24
 800548a:	af00      	add	r7, sp, #0
 800548c:	60f8      	str	r0, [r7, #12]
 800548e:	607a      	str	r2, [r7, #4]
 8005490:	461a      	mov	r2, r3
 8005492:	460b      	mov	r3, r1
 8005494:	72fb      	strb	r3, [r7, #11]
 8005496:	4613      	mov	r3, r2
 8005498:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	799b      	ldrb	r3, [r3, #6]
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d13e      	bne.n	8005522 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	795b      	ldrb	r3, [r3, #5]
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d101      	bne.n	80054b0 <HAL_SUBGHZ_WriteBuffer+0x2a>
 80054ac:	2302      	movs	r3, #2
 80054ae:	e039      	b.n	8005524 <HAL_SUBGHZ_WriteBuffer+0x9e>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2201      	movs	r2, #1
 80054b4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f000 f9dc 	bl	8005874 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80054bc:	f7ff fd9c 	bl	8004ff8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80054c0:	210e      	movs	r1, #14
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	f000 f928 	bl	8005718 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80054c8:	7afb      	ldrb	r3, [r7, #11]
 80054ca:	4619      	mov	r1, r3
 80054cc:	68f8      	ldr	r0, [r7, #12]
 80054ce:	f000 f923 	bl	8005718 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80054d2:	2300      	movs	r3, #0
 80054d4:	82bb      	strh	r3, [r7, #20]
 80054d6:	e00a      	b.n	80054ee <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80054d8:	8abb      	ldrh	r3, [r7, #20]
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	4413      	add	r3, r2
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	4619      	mov	r1, r3
 80054e2:	68f8      	ldr	r0, [r7, #12]
 80054e4:	f000 f918 	bl	8005718 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80054e8:	8abb      	ldrh	r3, [r7, #20]
 80054ea:	3301      	adds	r3, #1
 80054ec:	82bb      	strh	r3, [r7, #20]
 80054ee:	8aba      	ldrh	r2, [r7, #20]
 80054f0:	893b      	ldrh	r3, [r7, #8]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d3f0      	bcc.n	80054d8 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80054f6:	f7ff fd6f 	bl	8004fd8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f000 f9de 	bl	80058bc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d002      	beq.n	800550e <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	75fb      	strb	r3, [r7, #23]
 800550c:	e001      	b.n	8005512 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 800550e:	2300      	movs	r3, #0
 8005510:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2201      	movs	r2, #1
 8005516:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	715a      	strb	r2, [r3, #5]

    return status;
 800551e:	7dfb      	ldrb	r3, [r7, #23]
 8005520:	e000      	b.n	8005524 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005522:	2302      	movs	r3, #2
  }
}
 8005524:	4618      	mov	r0, r3
 8005526:	3718      	adds	r7, #24
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b088      	sub	sp, #32
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	607a      	str	r2, [r7, #4]
 8005536:	461a      	mov	r2, r3
 8005538:	460b      	mov	r3, r1
 800553a:	72fb      	strb	r3, [r7, #11]
 800553c:	4613      	mov	r3, r2
 800553e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	799b      	ldrb	r3, [r3, #6]
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b01      	cmp	r3, #1
 800554c:	d141      	bne.n	80055d2 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	795b      	ldrb	r3, [r3, #5]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d101      	bne.n	800555a <HAL_SUBGHZ_ReadBuffer+0x2e>
 8005556:	2302      	movs	r3, #2
 8005558:	e03c      	b.n	80055d4 <HAL_SUBGHZ_ReadBuffer+0xa8>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2201      	movs	r2, #1
 800555e:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f000 f987 	bl	8005874 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005566:	f7ff fd47 	bl	8004ff8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800556a:	211e      	movs	r1, #30
 800556c:	68f8      	ldr	r0, [r7, #12]
 800556e:	f000 f8d3 	bl	8005718 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8005572:	7afb      	ldrb	r3, [r7, #11]
 8005574:	4619      	mov	r1, r3
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f000 f8ce 	bl	8005718 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800557c:	2100      	movs	r1, #0
 800557e:	68f8      	ldr	r0, [r7, #12]
 8005580:	f000 f8ca 	bl	8005718 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005584:	2300      	movs	r3, #0
 8005586:	82fb      	strh	r3, [r7, #22]
 8005588:	e009      	b.n	800559e <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800558a:	69b9      	ldr	r1, [r7, #24]
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	f000 f919 	bl	80057c4 <SUBGHZSPI_Receive>
      pData++;
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	3301      	adds	r3, #1
 8005596:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8005598:	8afb      	ldrh	r3, [r7, #22]
 800559a:	3301      	adds	r3, #1
 800559c:	82fb      	strh	r3, [r7, #22]
 800559e:	8afa      	ldrh	r2, [r7, #22]
 80055a0:	893b      	ldrh	r3, [r7, #8]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d3f1      	bcc.n	800558a <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80055a6:	f7ff fd17 	bl	8004fd8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f000 f986 	bl	80058bc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d002      	beq.n	80055be <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	77fb      	strb	r3, [r7, #31]
 80055bc:	e001      	b.n	80055c2 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 80055be:	2300      	movs	r3, #0
 80055c0:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2201      	movs	r2, #1
 80055c6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	715a      	strb	r2, [r3, #5]

    return status;
 80055ce:	7ffb      	ldrb	r3, [r7, #31]
 80055d0:	e000      	b.n	80055d4 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80055d2:	2302      	movs	r3, #2
  }
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3720      	adds	r7, #32
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 80055e4:	2300      	movs	r3, #0
 80055e6:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 80055e8:	f107 020c 	add.w	r2, r7, #12
 80055ec:	2302      	movs	r3, #2
 80055ee:	2112      	movs	r1, #18
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f7ff fef4 	bl	80053de <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 80055f6:	7b3b      	ldrb	r3, [r7, #12]
 80055f8:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 80055fa:	89fb      	ldrh	r3, [r7, #14]
 80055fc:	021b      	lsls	r3, r3, #8
 80055fe:	b21a      	sxth	r2, r3
 8005600:	7b7b      	ldrb	r3, [r7, #13]
 8005602:	b21b      	sxth	r3, r3
 8005604:	4313      	orrs	r3, r2
 8005606:	b21b      	sxth	r3, r3
 8005608:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800560a:	89fb      	ldrh	r3, [r7, #14]
 800560c:	f003 0301 	and.w	r3, r3, #1
 8005610:	2b00      	cmp	r3, #0
 8005612:	d002      	beq.n	800561a <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f005 fb45 	bl	800aca4 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 800561a:	89fb      	ldrh	r3, [r7, #14]
 800561c:	085b      	lsrs	r3, r3, #1
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	2b00      	cmp	r3, #0
 8005624:	d002      	beq.n	800562c <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f005 fb4a 	bl	800acc0 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800562c:	89fb      	ldrh	r3, [r7, #14]
 800562e:	089b      	lsrs	r3, r3, #2
 8005630:	f003 0301 	and.w	r3, r3, #1
 8005634:	2b00      	cmp	r3, #0
 8005636:	d002      	beq.n	800563e <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f005 fb99 	bl	800ad70 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800563e:	89fb      	ldrh	r3, [r7, #14]
 8005640:	08db      	lsrs	r3, r3, #3
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b00      	cmp	r3, #0
 8005648:	d002      	beq.n	8005650 <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f005 fb9e 	bl	800ad8c <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8005650:	89fb      	ldrh	r3, [r7, #14]
 8005652:	091b      	lsrs	r3, r3, #4
 8005654:	f003 0301 	and.w	r3, r3, #1
 8005658:	2b00      	cmp	r3, #0
 800565a:	d002      	beq.n	8005662 <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f005 fba3 	bl	800ada8 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8005662:	89fb      	ldrh	r3, [r7, #14]
 8005664:	095b      	lsrs	r3, r3, #5
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	2b00      	cmp	r3, #0
 800566c:	d002      	beq.n	8005674 <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f005 fb70 	bl	800ad54 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8005674:	89fb      	ldrh	r3, [r7, #14]
 8005676:	099b      	lsrs	r3, r3, #6
 8005678:	f003 0301 	and.w	r3, r3, #1
 800567c:	2b00      	cmp	r3, #0
 800567e:	d002      	beq.n	8005686 <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f005 fb2b 	bl	800acdc <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8005686:	89fb      	ldrh	r3, [r7, #14]
 8005688:	09db      	lsrs	r3, r3, #7
 800568a:	f003 0301 	and.w	r3, r3, #1
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00e      	beq.n	80056b0 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8005692:	89fb      	ldrh	r3, [r7, #14]
 8005694:	0a1b      	lsrs	r3, r3, #8
 8005696:	f003 0301 	and.w	r3, r3, #1
 800569a:	2b00      	cmp	r3, #0
 800569c:	d004      	beq.n	80056a8 <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800569e:	2101      	movs	r1, #1
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f005 fb29 	bl	800acf8 <HAL_SUBGHZ_CADStatusCallback>
 80056a6:	e003      	b.n	80056b0 <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80056a8:	2100      	movs	r1, #0
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f005 fb24 	bl	800acf8 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80056b0:	89fb      	ldrh	r3, [r7, #14]
 80056b2:	0a5b      	lsrs	r3, r3, #9
 80056b4:	f003 0301 	and.w	r3, r3, #1
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d002      	beq.n	80056c2 <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f005 fb39 	bl	800ad34 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 80056c2:	f107 020c 	add.w	r2, r7, #12
 80056c6:	2302      	movs	r3, #2
 80056c8:	2102      	movs	r1, #2
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f7ff fe28 	bl	8005320 <HAL_SUBGHZ_ExecSetCmd>
}
 80056d0:	bf00      	nop
 80056d2:	3710      	adds	r7, #16
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80056e0:	4b0c      	ldr	r3, [pc, #48]	; (8005714 <SUBGHZSPI_Init+0x3c>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a0b      	ldr	r2, [pc, #44]	; (8005714 <SUBGHZSPI_Init+0x3c>)
 80056e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056ea:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80056ec:	4a09      	ldr	r2, [pc, #36]	; (8005714 <SUBGHZSPI_Init+0x3c>)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 80056f4:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80056f6:	4b07      	ldr	r3, [pc, #28]	; (8005714 <SUBGHZSPI_Init+0x3c>)
 80056f8:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 80056fc:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80056fe:	4b05      	ldr	r3, [pc, #20]	; (8005714 <SUBGHZSPI_Init+0x3c>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a04      	ldr	r2, [pc, #16]	; (8005714 <SUBGHZSPI_Init+0x3c>)
 8005704:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005708:	6013      	str	r3, [r2, #0]
}
 800570a:	bf00      	nop
 800570c:	370c      	adds	r7, #12
 800570e:	46bd      	mov	sp, r7
 8005710:	bc80      	pop	{r7}
 8005712:	4770      	bx	lr
 8005714:	58010000 	.word	0x58010000

08005718 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8005718:	b480      	push	{r7}
 800571a:	b087      	sub	sp, #28
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	460b      	mov	r3, r1
 8005722:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005724:	2300      	movs	r3, #0
 8005726:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005728:	4b23      	ldr	r3, [pc, #140]	; (80057b8 <SUBGHZSPI_Transmit+0xa0>)
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	4613      	mov	r3, r2
 800572e:	00db      	lsls	r3, r3, #3
 8005730:	1a9b      	subs	r3, r3, r2
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	0cdb      	lsrs	r3, r3, #19
 8005736:	2264      	movs	r2, #100	; 0x64
 8005738:	fb02 f303 	mul.w	r3, r2, r3
 800573c:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d105      	bne.n	8005750 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	609a      	str	r2, [r3, #8]
      break;
 800574e:	e008      	b.n	8005762 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	3b01      	subs	r3, #1
 8005754:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8005756:	4b19      	ldr	r3, [pc, #100]	; (80057bc <SUBGHZSPI_Transmit+0xa4>)
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f003 0302 	and.w	r3, r3, #2
 800575e:	2b02      	cmp	r3, #2
 8005760:	d1ed      	bne.n	800573e <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8005762:	4b17      	ldr	r3, [pc, #92]	; (80057c0 <SUBGHZSPI_Transmit+0xa8>)
 8005764:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	78fa      	ldrb	r2, [r7, #3]
 800576a:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800576c:	4b12      	ldr	r3, [pc, #72]	; (80057b8 <SUBGHZSPI_Transmit+0xa0>)
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	4613      	mov	r3, r2
 8005772:	00db      	lsls	r3, r3, #3
 8005774:	1a9b      	subs	r3, r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	0cdb      	lsrs	r3, r3, #19
 800577a:	2264      	movs	r2, #100	; 0x64
 800577c:	fb02 f303 	mul.w	r3, r2, r3
 8005780:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d105      	bne.n	8005794 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	609a      	str	r2, [r3, #8]
      break;
 8005792:	e008      	b.n	80057a6 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	3b01      	subs	r3, #1
 8005798:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800579a:	4b08      	ldr	r3, [pc, #32]	; (80057bc <SUBGHZSPI_Transmit+0xa4>)
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f003 0301 	and.w	r3, r3, #1
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d1ed      	bne.n	8005782 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80057a6:	4b05      	ldr	r3, [pc, #20]	; (80057bc <SUBGHZSPI_Transmit+0xa4>)
 80057a8:	68db      	ldr	r3, [r3, #12]

  return status;
 80057aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	371c      	adds	r7, #28
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bc80      	pop	{r7}
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	20000000 	.word	0x20000000
 80057bc:	58010000 	.word	0x58010000
 80057c0:	5801000c 	.word	0x5801000c

080057c4 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b087      	sub	sp, #28
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057ce:	2300      	movs	r3, #0
 80057d0:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80057d2:	4b25      	ldr	r3, [pc, #148]	; (8005868 <SUBGHZSPI_Receive+0xa4>)
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	4613      	mov	r3, r2
 80057d8:	00db      	lsls	r3, r3, #3
 80057da:	1a9b      	subs	r3, r3, r2
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	0cdb      	lsrs	r3, r3, #19
 80057e0:	2264      	movs	r2, #100	; 0x64
 80057e2:	fb02 f303 	mul.w	r3, r2, r3
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d105      	bne.n	80057fa <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2201      	movs	r2, #1
 80057f6:	609a      	str	r2, [r3, #8]
      break;
 80057f8:	e008      	b.n	800580c <SUBGHZSPI_Receive+0x48>
    }
    count--;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	3b01      	subs	r3, #1
 80057fe:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8005800:	4b1a      	ldr	r3, [pc, #104]	; (800586c <SUBGHZSPI_Receive+0xa8>)
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	f003 0302 	and.w	r3, r3, #2
 8005808:	2b02      	cmp	r3, #2
 800580a:	d1ed      	bne.n	80057e8 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800580c:	4b18      	ldr	r3, [pc, #96]	; (8005870 <SUBGHZSPI_Receive+0xac>)
 800580e:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	22ff      	movs	r2, #255	; 0xff
 8005814:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005816:	4b14      	ldr	r3, [pc, #80]	; (8005868 <SUBGHZSPI_Receive+0xa4>)
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	4613      	mov	r3, r2
 800581c:	00db      	lsls	r3, r3, #3
 800581e:	1a9b      	subs	r3, r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	0cdb      	lsrs	r3, r3, #19
 8005824:	2264      	movs	r2, #100	; 0x64
 8005826:	fb02 f303 	mul.w	r3, r2, r3
 800582a:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d105      	bne.n	800583e <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2201      	movs	r2, #1
 800583a:	609a      	str	r2, [r3, #8]
      break;
 800583c:	e008      	b.n	8005850 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	3b01      	subs	r3, #1
 8005842:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8005844:	4b09      	ldr	r3, [pc, #36]	; (800586c <SUBGHZSPI_Receive+0xa8>)
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	f003 0301 	and.w	r3, r3, #1
 800584c:	2b01      	cmp	r3, #1
 800584e:	d1ed      	bne.n	800582c <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8005850:	4b06      	ldr	r3, [pc, #24]	; (800586c <SUBGHZSPI_Receive+0xa8>)
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	b2da      	uxtb	r2, r3
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	701a      	strb	r2, [r3, #0]

  return status;
 800585a:	7dfb      	ldrb	r3, [r7, #23]
}
 800585c:	4618      	mov	r0, r3
 800585e:	371c      	adds	r7, #28
 8005860:	46bd      	mov	sp, r7
 8005862:	bc80      	pop	{r7}
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	20000000 	.word	0x20000000
 800586c:	58010000 	.word	0x58010000
 8005870:	5801000c 	.word	0x5801000c

08005874 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	791b      	ldrb	r3, [r3, #4]
 8005880:	2b01      	cmp	r3, #1
 8005882:	d111      	bne.n	80058a8 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8005884:	4b0c      	ldr	r3, [pc, #48]	; (80058b8 <SUBGHZ_CheckDeviceReady+0x44>)
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	4613      	mov	r3, r2
 800588a:	005b      	lsls	r3, r3, #1
 800588c:	4413      	add	r3, r2
 800588e:	00db      	lsls	r3, r3, #3
 8005890:	0c1b      	lsrs	r3, r3, #16
 8005892:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005894:	f7ff fbb0 	bl	8004ff8 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	3b01      	subs	r3, #1
 800589c:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d1f9      	bne.n	8005898 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80058a4:	f7ff fb98 	bl	8004fd8 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 f807 	bl	80058bc <SUBGHZ_WaitOnBusy>
 80058ae:	4603      	mov	r3, r0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3710      	adds	r7, #16
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	20000000 	.word	0x20000000

080058bc <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80058c4:	2300      	movs	r3, #0
 80058c6:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80058c8:	4b12      	ldr	r3, [pc, #72]	; (8005914 <SUBGHZ_WaitOnBusy+0x58>)
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	4613      	mov	r3, r2
 80058ce:	005b      	lsls	r3, r3, #1
 80058d0:	4413      	add	r3, r2
 80058d2:	00db      	lsls	r3, r3, #3
 80058d4:	0d1b      	lsrs	r3, r3, #20
 80058d6:	2264      	movs	r2, #100	; 0x64
 80058d8:	fb02 f303 	mul.w	r3, r2, r3
 80058dc:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 80058de:	f7ff fbb9 	bl	8005054 <LL_PWR_IsActiveFlag_RFBUSYMS>
 80058e2:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d105      	bne.n	80058f6 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2202      	movs	r2, #2
 80058f2:	609a      	str	r2, [r3, #8]
      break;
 80058f4:	e009      	b.n	800590a <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	3b01      	subs	r3, #1
 80058fa:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80058fc:	f7ff fb98 	bl	8005030 <LL_PWR_IsActiveFlag_RFBUSYS>
 8005900:	4602      	mov	r2, r0
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	4013      	ands	r3, r2
 8005906:	2b01      	cmp	r3, #1
 8005908:	d0e9      	beq.n	80058de <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800590a:	7dfb      	ldrb	r3, [r7, #23]
}
 800590c:	4618      	mov	r0, r3
 800590e:	3718      	adds	r7, #24
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	20000000 	.word	0x20000000

08005918 <LL_RCC_GetUSARTClockSource>:
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8005920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005924:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	401a      	ands	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	041b      	lsls	r3, r3, #16
 8005930:	4313      	orrs	r3, r2
}
 8005932:	4618      	mov	r0, r3
 8005934:	370c      	adds	r7, #12
 8005936:	46bd      	mov	sp, r7
 8005938:	bc80      	pop	{r7}
 800593a:	4770      	bx	lr

0800593c <LL_RCC_GetLPUARTClockSource>:
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005948:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4013      	ands	r3, r2
}
 8005950:	4618      	mov	r0, r3
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	bc80      	pop	{r7}
 8005958:	4770      	bx	lr

0800595a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800595a:	b580      	push	{r7, lr}
 800595c:	b082      	sub	sp, #8
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d101      	bne.n	800596c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e042      	b.n	80059f2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005972:	2b00      	cmp	r3, #0
 8005974:	d106      	bne.n	8005984 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7fb fea4 	bl	80016cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2224      	movs	r2, #36	; 0x24
 8005988:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f022 0201 	bic.w	r2, r2, #1
 800599a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 fc4b 	bl	8006238 <UART_SetConfig>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d101      	bne.n	80059ac <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e022      	b.n	80059f2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d002      	beq.n	80059ba <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 feb3 	bl	8006720 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	685a      	ldr	r2, [r3, #4]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059c8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	689a      	ldr	r2, [r3, #8]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059d8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f042 0201 	orr.w	r2, r2, #1
 80059e8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 ff39 	bl	8006862 <UART_CheckIdleState>
 80059f0:	4603      	mov	r3, r0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
	...

080059fc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b08a      	sub	sp, #40	; 0x28
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	4613      	mov	r3, r2
 8005a08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a10:	2b20      	cmp	r3, #32
 8005a12:	d142      	bne.n	8005a9a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d002      	beq.n	8005a20 <HAL_UART_Receive_IT+0x24>
 8005a1a:	88fb      	ldrh	r3, [r7, #6]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d101      	bne.n	8005a24 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e03b      	b.n	8005a9c <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d101      	bne.n	8005a32 <HAL_UART_Receive_IT+0x36>
 8005a2e:	2302      	movs	r3, #2
 8005a30:	e034      	b.n	8005a9c <HAL_UART_Receive_IT+0xa0>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a17      	ldr	r2, [pc, #92]	; (8005aa4 <HAL_UART_Receive_IT+0xa8>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d01f      	beq.n	8005a8a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d018      	beq.n	8005a8a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	e853 3f00 	ldrex	r3, [r3]
 8005a64:	613b      	str	r3, [r7, #16]
   return(result);
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	461a      	mov	r2, r3
 8005a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a76:	623b      	str	r3, [r7, #32]
 8005a78:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a7a:	69f9      	ldr	r1, [r7, #28]
 8005a7c:	6a3a      	ldr	r2, [r7, #32]
 8005a7e:	e841 2300 	strex	r3, r2, [r1]
 8005a82:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1e6      	bne.n	8005a58 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005a8a:	88fb      	ldrh	r3, [r7, #6]
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	68b9      	ldr	r1, [r7, #8]
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	f000 fff9 	bl	8006a88 <UART_Start_Receive_IT>
 8005a96:	4603      	mov	r3, r0
 8005a98:	e000      	b.n	8005a9c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005a9a:	2302      	movs	r3, #2
  }
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3728      	adds	r7, #40	; 0x28
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	40008000 	.word	0x40008000

08005aa8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b08a      	sub	sp, #40	; 0x28
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005abc:	2b20      	cmp	r3, #32
 8005abe:	d17a      	bne.n	8005bb6 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d002      	beq.n	8005acc <HAL_UART_Transmit_DMA+0x24>
 8005ac6:	88fb      	ldrh	r3, [r7, #6]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d101      	bne.n	8005ad0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e073      	b.n	8005bb8 <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d101      	bne.n	8005ade <HAL_UART_Transmit_DMA+0x36>
 8005ada:	2302      	movs	r3, #2
 8005adc:	e06c      	b.n	8005bb8 <HAL_UART_Transmit_DMA+0x110>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	88fa      	ldrh	r2, [r7, #6]
 8005af0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	88fa      	ldrh	r2, [r7, #6]
 8005af8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2221      	movs	r2, #33	; 0x21
 8005b08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d02c      	beq.n	8005b6e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b18:	4a29      	ldr	r2, [pc, #164]	; (8005bc0 <HAL_UART_Transmit_DMA+0x118>)
 8005b1a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b20:	4a28      	ldr	r2, [pc, #160]	; (8005bc4 <HAL_UART_Transmit_DMA+0x11c>)
 8005b22:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b28:	4a27      	ldr	r2, [pc, #156]	; (8005bc8 <HAL_UART_Transmit_DMA+0x120>)
 8005b2a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b30:	2200      	movs	r2, #0
 8005b32:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	3328      	adds	r3, #40	; 0x28
 8005b44:	461a      	mov	r2, r3
 8005b46:	88fb      	ldrh	r3, [r7, #6]
 8005b48:	f7fc fcd2 	bl	80024f0 <HAL_DMA_Start_IT>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00d      	beq.n	8005b6e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2210      	movs	r2, #16
 8005b56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2220      	movs	r2, #32
 8005b66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e024      	b.n	8005bb8 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2240      	movs	r2, #64	; 0x40
 8005b74:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	3308      	adds	r3, #8
 8005b84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	e853 3f00 	ldrex	r3, [r3]
 8005b8c:	613b      	str	r3, [r7, #16]
   return(result);
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b94:	627b      	str	r3, [r7, #36]	; 0x24
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	3308      	adds	r3, #8
 8005b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b9e:	623a      	str	r2, [r7, #32]
 8005ba0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba2:	69f9      	ldr	r1, [r7, #28]
 8005ba4:	6a3a      	ldr	r2, [r7, #32]
 8005ba6:	e841 2300 	strex	r3, r2, [r1]
 8005baa:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d1e5      	bne.n	8005b7e <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	e000      	b.n	8005bb8 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8005bb6:	2302      	movs	r3, #2
  }
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3728      	adds	r7, #40	; 0x28
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	08006e23 	.word	0x08006e23
 8005bc4:	08006ebd 	.word	0x08006ebd
 8005bc8:	08006ed9 	.word	0x08006ed9

08005bcc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b0ba      	sub	sp, #232	; 0xe8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	69db      	ldr	r3, [r3, #28]
 8005bda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005bf2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005bf6:	f640 030f 	movw	r3, #2063	; 0x80f
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005c00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d11b      	bne.n	8005c40 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c0c:	f003 0320 	and.w	r3, r3, #32
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d015      	beq.n	8005c40 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c18:	f003 0320 	and.w	r3, r3, #32
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d105      	bne.n	8005c2c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005c20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d009      	beq.n	8005c40 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f000 82d6 	beq.w	80061e2 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	4798      	blx	r3
      }
      return;
 8005c3e:	e2d0      	b.n	80061e2 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005c40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	f000 811f 	beq.w	8005e88 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005c4a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005c4e:	4b8b      	ldr	r3, [pc, #556]	; (8005e7c <HAL_UART_IRQHandler+0x2b0>)
 8005c50:	4013      	ands	r3, r2
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d106      	bne.n	8005c64 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005c56:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005c5a:	4b89      	ldr	r3, [pc, #548]	; (8005e80 <HAL_UART_IRQHandler+0x2b4>)
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f000 8112 	beq.w	8005e88 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c68:	f003 0301 	and.w	r3, r3, #1
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d011      	beq.n	8005c94 <HAL_UART_IRQHandler+0xc8>
 8005c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d00b      	beq.n	8005c94 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2201      	movs	r2, #1
 8005c82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c8a:	f043 0201 	orr.w	r2, r3, #1
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c98:	f003 0302 	and.w	r3, r3, #2
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d011      	beq.n	8005cc4 <HAL_UART_IRQHandler+0xf8>
 8005ca0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ca4:	f003 0301 	and.w	r3, r3, #1
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00b      	beq.n	8005cc4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2202      	movs	r2, #2
 8005cb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cba:	f043 0204 	orr.w	r2, r3, #4
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005cc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cc8:	f003 0304 	and.w	r3, r3, #4
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d011      	beq.n	8005cf4 <HAL_UART_IRQHandler+0x128>
 8005cd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cd4:	f003 0301 	and.w	r3, r3, #1
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00b      	beq.n	8005cf4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2204      	movs	r2, #4
 8005ce2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cea:	f043 0202 	orr.w	r2, r3, #2
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cf8:	f003 0308 	and.w	r3, r3, #8
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d017      	beq.n	8005d30 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d04:	f003 0320 	and.w	r3, r3, #32
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d105      	bne.n	8005d18 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005d0c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005d10:	4b5a      	ldr	r3, [pc, #360]	; (8005e7c <HAL_UART_IRQHandler+0x2b0>)
 8005d12:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d00b      	beq.n	8005d30 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2208      	movs	r2, #8
 8005d1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d26:	f043 0208 	orr.w	r2, r3, #8
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005d30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d012      	beq.n	8005d62 <HAL_UART_IRQHandler+0x196>
 8005d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00c      	beq.n	8005d62 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d58:	f043 0220 	orr.w	r2, r3, #32
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f000 823c 	beq.w	80061e6 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d72:	f003 0320 	and.w	r3, r3, #32
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d013      	beq.n	8005da2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005d7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d7e:	f003 0320 	and.w	r3, r3, #32
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d105      	bne.n	8005d92 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005d86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d007      	beq.n	8005da2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d003      	beq.n	8005da2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005da8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db6:	2b40      	cmp	r3, #64	; 0x40
 8005db8:	d005      	beq.n	8005dc6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005dba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005dbe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d04f      	beq.n	8005e66 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 ffc6 	bl	8006d58 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd6:	2b40      	cmp	r3, #64	; 0x40
 8005dd8:	d141      	bne.n	8005e5e <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	3308      	adds	r3, #8
 8005de0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005de8:	e853 3f00 	ldrex	r3, [r3]
 8005dec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005df0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005df4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005df8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	3308      	adds	r3, #8
 8005e02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005e06:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005e0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005e12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005e16:	e841 2300 	strex	r3, r2, [r1]
 8005e1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005e1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1d9      	bne.n	8005dda <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d013      	beq.n	8005e56 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e32:	4a14      	ldr	r2, [pc, #80]	; (8005e84 <HAL_UART_IRQHandler+0x2b8>)
 8005e34:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7fc fc34 	bl	80026a8 <HAL_DMA_Abort_IT>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d017      	beq.n	8005e76 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005e50:	4610      	mov	r0, r2
 8005e52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e54:	e00f      	b.n	8005e76 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 f9d9 	bl	800620e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e5c:	e00b      	b.n	8005e76 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 f9d5 	bl	800620e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e64:	e007      	b.n	8005e76 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 f9d1 	bl	800620e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005e74:	e1b7      	b.n	80061e6 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e76:	bf00      	nop
    return;
 8005e78:	e1b5      	b.n	80061e6 <HAL_UART_IRQHandler+0x61a>
 8005e7a:	bf00      	nop
 8005e7c:	10000001 	.word	0x10000001
 8005e80:	04000120 	.word	0x04000120
 8005e84:	08006f59 	.word	0x08006f59

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	f040 814a 	bne.w	8006126 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8005e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e96:	f003 0310 	and.w	r3, r3, #16
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f000 8143 	beq.w	8006126 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8005ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ea4:	f003 0310 	and.w	r3, r3, #16
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f000 813c 	beq.w	8006126 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2210      	movs	r2, #16
 8005eb4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec0:	2b40      	cmp	r3, #64	; 0x40
 8005ec2:	f040 80b5 	bne.w	8006030 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8005ed2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f000 8187 	beq.w	80061ea <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005ee2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	f080 817f 	bcs.w	80061ea <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ef2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0320 	and.w	r3, r3, #32
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f040 8086 	bne.w	8006014 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f14:	e853 3f00 	ldrex	r3, [r3]
 8005f18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005f1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005f36:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005f3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005f42:	e841 2300 	strex	r3, r2, [r1]
 8005f46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005f4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1da      	bne.n	8005f08 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	3308      	adds	r3, #8
 8005f58:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f5c:	e853 3f00 	ldrex	r3, [r3]
 8005f60:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005f62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f64:	f023 0301 	bic.w	r3, r3, #1
 8005f68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	3308      	adds	r3, #8
 8005f72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005f76:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005f7a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005f7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005f82:	e841 2300 	strex	r3, r2, [r1]
 8005f86:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005f88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1e1      	bne.n	8005f52 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	3308      	adds	r3, #8
 8005f94:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f98:	e853 3f00 	ldrex	r3, [r3]
 8005f9c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005f9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fa4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	3308      	adds	r3, #8
 8005fae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005fb2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005fb4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005fb8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005fba:	e841 2300 	strex	r3, r2, [r1]
 8005fbe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005fc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1e3      	bne.n	8005f8e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2220      	movs	r2, #32
 8005fca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fdc:	e853 3f00 	ldrex	r3, [r3]
 8005fe0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005fe2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fe4:	f023 0310 	bic.w	r3, r3, #16
 8005fe8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ff6:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ff8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ffc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ffe:	e841 2300 	strex	r3, r2, [r1]
 8006002:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006004:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1e4      	bne.n	8005fd4 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800600e:	4618      	mov	r0, r3
 8006010:	f7fc faec 	bl	80025ec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006020:	b29b      	uxth	r3, r3
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	b29b      	uxth	r3, r3
 8006026:	4619      	mov	r1, r3
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 f8f9 	bl	8006220 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800602e:	e0dc      	b.n	80061ea <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800603c:	b29b      	uxth	r3, r3
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800604a:	b29b      	uxth	r3, r3
 800604c:	2b00      	cmp	r3, #0
 800604e:	f000 80ce 	beq.w	80061ee <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8006052:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006056:	2b00      	cmp	r3, #0
 8006058:	f000 80c9 	beq.w	80061ee <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006064:	e853 3f00 	ldrex	r3, [r3]
 8006068:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800606a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800606c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006070:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	461a      	mov	r2, r3
 800607a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800607e:	647b      	str	r3, [r7, #68]	; 0x44
 8006080:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006082:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006084:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006086:	e841 2300 	strex	r3, r2, [r1]
 800608a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800608c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800608e:	2b00      	cmp	r3, #0
 8006090:	d1e4      	bne.n	800605c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	3308      	adds	r3, #8
 8006098:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609c:	e853 3f00 	ldrex	r3, [r3]
 80060a0:	623b      	str	r3, [r7, #32]
   return(result);
 80060a2:	6a3b      	ldr	r3, [r7, #32]
 80060a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060a8:	f023 0301 	bic.w	r3, r3, #1
 80060ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	3308      	adds	r3, #8
 80060b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80060ba:	633a      	str	r2, [r7, #48]	; 0x30
 80060bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060c2:	e841 2300 	strex	r3, r2, [r1]
 80060c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80060c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1e1      	bne.n	8006092 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2220      	movs	r2, #32
 80060d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	e853 3f00 	ldrex	r3, [r3]
 80060ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f023 0310 	bic.w	r3, r3, #16
 80060f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	461a      	mov	r2, r3
 8006100:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006104:	61fb      	str	r3, [r7, #28]
 8006106:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006108:	69b9      	ldr	r1, [r7, #24]
 800610a:	69fa      	ldr	r2, [r7, #28]
 800610c:	e841 2300 	strex	r3, r2, [r1]
 8006110:	617b      	str	r3, [r7, #20]
   return(result);
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1e4      	bne.n	80060e2 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006118:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800611c:	4619      	mov	r1, r3
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 f87e 	bl	8006220 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006124:	e063      	b.n	80061ee <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800612a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00e      	beq.n	8006150 <HAL_UART_IRQHandler+0x584>
 8006132:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800613a:	2b00      	cmp	r3, #0
 800613c:	d008      	beq.n	8006150 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006146:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f001 fba3 	bl	8007894 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800614e:	e051      	b.n	80061f4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006158:	2b00      	cmp	r3, #0
 800615a:	d014      	beq.n	8006186 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800615c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006164:	2b00      	cmp	r3, #0
 8006166:	d105      	bne.n	8006174 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006168:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800616c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d008      	beq.n	8006186 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006178:	2b00      	cmp	r3, #0
 800617a:	d03a      	beq.n	80061f2 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	4798      	blx	r3
    }
    return;
 8006184:	e035      	b.n	80061f2 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800618a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800618e:	2b00      	cmp	r3, #0
 8006190:	d009      	beq.n	80061a6 <HAL_UART_IRQHandler+0x5da>
 8006192:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800619a:	2b00      	cmp	r3, #0
 800619c:	d003      	beq.n	80061a6 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 fef0 	bl	8006f84 <UART_EndTransmit_IT>
    return;
 80061a4:	e026      	b.n	80061f4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80061a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d009      	beq.n	80061c6 <HAL_UART_IRQHandler+0x5fa>
 80061b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061b6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d003      	beq.n	80061c6 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f001 fb7a 	bl	80078b8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80061c4:	e016      	b.n	80061f4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80061c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d010      	beq.n	80061f4 <HAL_UART_IRQHandler+0x628>
 80061d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	da0c      	bge.n	80061f4 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f001 fb63 	bl	80078a6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80061e0:	e008      	b.n	80061f4 <HAL_UART_IRQHandler+0x628>
      return;
 80061e2:	bf00      	nop
 80061e4:	e006      	b.n	80061f4 <HAL_UART_IRQHandler+0x628>
    return;
 80061e6:	bf00      	nop
 80061e8:	e004      	b.n	80061f4 <HAL_UART_IRQHandler+0x628>
      return;
 80061ea:	bf00      	nop
 80061ec:	e002      	b.n	80061f4 <HAL_UART_IRQHandler+0x628>
      return;
 80061ee:	bf00      	nop
 80061f0:	e000      	b.n	80061f4 <HAL_UART_IRQHandler+0x628>
    return;
 80061f2:	bf00      	nop
  }
}
 80061f4:	37e8      	adds	r7, #232	; 0xe8
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop

080061fc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006204:	bf00      	nop
 8006206:	370c      	adds	r7, #12
 8006208:	46bd      	mov	sp, r7
 800620a:	bc80      	pop	{r7}
 800620c:	4770      	bx	lr

0800620e <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800620e:	b480      	push	{r7}
 8006210:	b083      	sub	sp, #12
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006216:	bf00      	nop
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	bc80      	pop	{r7}
 800621e:	4770      	bx	lr

08006220 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	460b      	mov	r3, r1
 800622a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800622c:	bf00      	nop
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	bc80      	pop	{r7}
 8006234:	4770      	bx	lr
	...

08006238 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006238:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800623c:	b08c      	sub	sp, #48	; 0x30
 800623e:	af00      	add	r7, sp, #0
 8006240:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006242:	2300      	movs	r3, #0
 8006244:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	689a      	ldr	r2, [r3, #8]
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	431a      	orrs	r2, r3
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	695b      	ldr	r3, [r3, #20]
 8006256:	431a      	orrs	r2, r3
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	69db      	ldr	r3, [r3, #28]
 800625c:	4313      	orrs	r3, r2
 800625e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	4b94      	ldr	r3, [pc, #592]	; (80064b8 <UART_SetConfig+0x280>)
 8006268:	4013      	ands	r3, r2
 800626a:	697a      	ldr	r2, [r7, #20]
 800626c:	6812      	ldr	r2, [r2, #0]
 800626e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006270:	430b      	orrs	r3, r1
 8006272:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	68da      	ldr	r2, [r3, #12]
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	430a      	orrs	r2, r1
 8006288:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a89      	ldr	r2, [pc, #548]	; (80064bc <UART_SetConfig+0x284>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d004      	beq.n	80062a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	6a1b      	ldr	r3, [r3, #32]
 800629e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062a0:	4313      	orrs	r3, r2
 80062a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80062ae:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	6812      	ldr	r2, [r2, #0]
 80062b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062b8:	430b      	orrs	r3, r1
 80062ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c2:	f023 010f 	bic.w	r1, r3, #15
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	430a      	orrs	r2, r1
 80062d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a7a      	ldr	r2, [pc, #488]	; (80064c0 <UART_SetConfig+0x288>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d127      	bne.n	800632c <UART_SetConfig+0xf4>
 80062dc:	2003      	movs	r0, #3
 80062de:	f7ff fb1b 	bl	8005918 <LL_RCC_GetUSARTClockSource>
 80062e2:	4603      	mov	r3, r0
 80062e4:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80062e8:	2b03      	cmp	r3, #3
 80062ea:	d81b      	bhi.n	8006324 <UART_SetConfig+0xec>
 80062ec:	a201      	add	r2, pc, #4	; (adr r2, 80062f4 <UART_SetConfig+0xbc>)
 80062ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f2:	bf00      	nop
 80062f4:	08006305 	.word	0x08006305
 80062f8:	08006315 	.word	0x08006315
 80062fc:	0800630d 	.word	0x0800630d
 8006300:	0800631d 	.word	0x0800631d
 8006304:	2301      	movs	r3, #1
 8006306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800630a:	e080      	b.n	800640e <UART_SetConfig+0x1d6>
 800630c:	2302      	movs	r3, #2
 800630e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006312:	e07c      	b.n	800640e <UART_SetConfig+0x1d6>
 8006314:	2304      	movs	r3, #4
 8006316:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800631a:	e078      	b.n	800640e <UART_SetConfig+0x1d6>
 800631c:	2308      	movs	r3, #8
 800631e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006322:	e074      	b.n	800640e <UART_SetConfig+0x1d6>
 8006324:	2310      	movs	r3, #16
 8006326:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800632a:	e070      	b.n	800640e <UART_SetConfig+0x1d6>
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a64      	ldr	r2, [pc, #400]	; (80064c4 <UART_SetConfig+0x28c>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d138      	bne.n	80063a8 <UART_SetConfig+0x170>
 8006336:	200c      	movs	r0, #12
 8006338:	f7ff faee 	bl	8005918 <LL_RCC_GetUSARTClockSource>
 800633c:	4603      	mov	r3, r0
 800633e:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8006342:	2b0c      	cmp	r3, #12
 8006344:	d82c      	bhi.n	80063a0 <UART_SetConfig+0x168>
 8006346:	a201      	add	r2, pc, #4	; (adr r2, 800634c <UART_SetConfig+0x114>)
 8006348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800634c:	08006381 	.word	0x08006381
 8006350:	080063a1 	.word	0x080063a1
 8006354:	080063a1 	.word	0x080063a1
 8006358:	080063a1 	.word	0x080063a1
 800635c:	08006391 	.word	0x08006391
 8006360:	080063a1 	.word	0x080063a1
 8006364:	080063a1 	.word	0x080063a1
 8006368:	080063a1 	.word	0x080063a1
 800636c:	08006389 	.word	0x08006389
 8006370:	080063a1 	.word	0x080063a1
 8006374:	080063a1 	.word	0x080063a1
 8006378:	080063a1 	.word	0x080063a1
 800637c:	08006399 	.word	0x08006399
 8006380:	2300      	movs	r3, #0
 8006382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006386:	e042      	b.n	800640e <UART_SetConfig+0x1d6>
 8006388:	2302      	movs	r3, #2
 800638a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800638e:	e03e      	b.n	800640e <UART_SetConfig+0x1d6>
 8006390:	2304      	movs	r3, #4
 8006392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006396:	e03a      	b.n	800640e <UART_SetConfig+0x1d6>
 8006398:	2308      	movs	r3, #8
 800639a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800639e:	e036      	b.n	800640e <UART_SetConfig+0x1d6>
 80063a0:	2310      	movs	r3, #16
 80063a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063a6:	e032      	b.n	800640e <UART_SetConfig+0x1d6>
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a43      	ldr	r2, [pc, #268]	; (80064bc <UART_SetConfig+0x284>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d12a      	bne.n	8006408 <UART_SetConfig+0x1d0>
 80063b2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80063b6:	f7ff fac1 	bl	800593c <LL_RCC_GetLPUARTClockSource>
 80063ba:	4603      	mov	r3, r0
 80063bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063c0:	d01a      	beq.n	80063f8 <UART_SetConfig+0x1c0>
 80063c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063c6:	d81b      	bhi.n	8006400 <UART_SetConfig+0x1c8>
 80063c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063cc:	d00c      	beq.n	80063e8 <UART_SetConfig+0x1b0>
 80063ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063d2:	d815      	bhi.n	8006400 <UART_SetConfig+0x1c8>
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d003      	beq.n	80063e0 <UART_SetConfig+0x1a8>
 80063d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063dc:	d008      	beq.n	80063f0 <UART_SetConfig+0x1b8>
 80063de:	e00f      	b.n	8006400 <UART_SetConfig+0x1c8>
 80063e0:	2300      	movs	r3, #0
 80063e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063e6:	e012      	b.n	800640e <UART_SetConfig+0x1d6>
 80063e8:	2302      	movs	r3, #2
 80063ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063ee:	e00e      	b.n	800640e <UART_SetConfig+0x1d6>
 80063f0:	2304      	movs	r3, #4
 80063f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063f6:	e00a      	b.n	800640e <UART_SetConfig+0x1d6>
 80063f8:	2308      	movs	r3, #8
 80063fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063fe:	e006      	b.n	800640e <UART_SetConfig+0x1d6>
 8006400:	2310      	movs	r3, #16
 8006402:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006406:	e002      	b.n	800640e <UART_SetConfig+0x1d6>
 8006408:	2310      	movs	r3, #16
 800640a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a2a      	ldr	r2, [pc, #168]	; (80064bc <UART_SetConfig+0x284>)
 8006414:	4293      	cmp	r3, r2
 8006416:	f040 80a4 	bne.w	8006562 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800641a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800641e:	2b08      	cmp	r3, #8
 8006420:	d823      	bhi.n	800646a <UART_SetConfig+0x232>
 8006422:	a201      	add	r2, pc, #4	; (adr r2, 8006428 <UART_SetConfig+0x1f0>)
 8006424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006428:	0800644d 	.word	0x0800644d
 800642c:	0800646b 	.word	0x0800646b
 8006430:	08006455 	.word	0x08006455
 8006434:	0800646b 	.word	0x0800646b
 8006438:	0800645b 	.word	0x0800645b
 800643c:	0800646b 	.word	0x0800646b
 8006440:	0800646b 	.word	0x0800646b
 8006444:	0800646b 	.word	0x0800646b
 8006448:	08006463 	.word	0x08006463
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800644c:	f7fd ff48 	bl	80042e0 <HAL_RCC_GetPCLK1Freq>
 8006450:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006452:	e010      	b.n	8006476 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006454:	4b1c      	ldr	r3, [pc, #112]	; (80064c8 <UART_SetConfig+0x290>)
 8006456:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006458:	e00d      	b.n	8006476 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800645a:	f7fd fe8d 	bl	8004178 <HAL_RCC_GetSysClockFreq>
 800645e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006460:	e009      	b.n	8006476 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006462:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006466:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006468:	e005      	b.n	8006476 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800646a:	2300      	movs	r3, #0
 800646c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006474:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006478:	2b00      	cmp	r3, #0
 800647a:	f000 8137 	beq.w	80066ec <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006482:	4a12      	ldr	r2, [pc, #72]	; (80064cc <UART_SetConfig+0x294>)
 8006484:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006488:	461a      	mov	r2, r3
 800648a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006490:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	685a      	ldr	r2, [r3, #4]
 8006496:	4613      	mov	r3, r2
 8006498:	005b      	lsls	r3, r3, #1
 800649a:	4413      	add	r3, r2
 800649c:	69ba      	ldr	r2, [r7, #24]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d305      	bcc.n	80064ae <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064a8:	69ba      	ldr	r2, [r7, #24]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d910      	bls.n	80064d0 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80064b4:	e11a      	b.n	80066ec <UART_SetConfig+0x4b4>
 80064b6:	bf00      	nop
 80064b8:	cfff69f3 	.word	0xcfff69f3
 80064bc:	40008000 	.word	0x40008000
 80064c0:	40013800 	.word	0x40013800
 80064c4:	40004400 	.word	0x40004400
 80064c8:	00f42400 	.word	0x00f42400
 80064cc:	0800e0dc 	.word	0x0800e0dc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d2:	2200      	movs	r2, #0
 80064d4:	60bb      	str	r3, [r7, #8]
 80064d6:	60fa      	str	r2, [r7, #12]
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064dc:	4a8e      	ldr	r2, [pc, #568]	; (8006718 <UART_SetConfig+0x4e0>)
 80064de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	2200      	movs	r2, #0
 80064e6:	603b      	str	r3, [r7, #0]
 80064e8:	607a      	str	r2, [r7, #4]
 80064ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80064f2:	f7f9 fe9d 	bl	8000230 <__aeabi_uldivmod>
 80064f6:	4602      	mov	r2, r0
 80064f8:	460b      	mov	r3, r1
 80064fa:	4610      	mov	r0, r2
 80064fc:	4619      	mov	r1, r3
 80064fe:	f04f 0200 	mov.w	r2, #0
 8006502:	f04f 0300 	mov.w	r3, #0
 8006506:	020b      	lsls	r3, r1, #8
 8006508:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800650c:	0202      	lsls	r2, r0, #8
 800650e:	6979      	ldr	r1, [r7, #20]
 8006510:	6849      	ldr	r1, [r1, #4]
 8006512:	0849      	lsrs	r1, r1, #1
 8006514:	2000      	movs	r0, #0
 8006516:	460c      	mov	r4, r1
 8006518:	4605      	mov	r5, r0
 800651a:	eb12 0804 	adds.w	r8, r2, r4
 800651e:	eb43 0905 	adc.w	r9, r3, r5
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	469a      	mov	sl, r3
 800652a:	4693      	mov	fp, r2
 800652c:	4652      	mov	r2, sl
 800652e:	465b      	mov	r3, fp
 8006530:	4640      	mov	r0, r8
 8006532:	4649      	mov	r1, r9
 8006534:	f7f9 fe7c 	bl	8000230 <__aeabi_uldivmod>
 8006538:	4602      	mov	r2, r0
 800653a:	460b      	mov	r3, r1
 800653c:	4613      	mov	r3, r2
 800653e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006540:	6a3b      	ldr	r3, [r7, #32]
 8006542:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006546:	d308      	bcc.n	800655a <UART_SetConfig+0x322>
 8006548:	6a3b      	ldr	r3, [r7, #32]
 800654a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800654e:	d204      	bcs.n	800655a <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	6a3a      	ldr	r2, [r7, #32]
 8006556:	60da      	str	r2, [r3, #12]
 8006558:	e0c8      	b.n	80066ec <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006560:	e0c4      	b.n	80066ec <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	69db      	ldr	r3, [r3, #28]
 8006566:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800656a:	d168      	bne.n	800663e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800656c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006570:	2b08      	cmp	r3, #8
 8006572:	d828      	bhi.n	80065c6 <UART_SetConfig+0x38e>
 8006574:	a201      	add	r2, pc, #4	; (adr r2, 800657c <UART_SetConfig+0x344>)
 8006576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800657a:	bf00      	nop
 800657c:	080065a1 	.word	0x080065a1
 8006580:	080065a9 	.word	0x080065a9
 8006584:	080065b1 	.word	0x080065b1
 8006588:	080065c7 	.word	0x080065c7
 800658c:	080065b7 	.word	0x080065b7
 8006590:	080065c7 	.word	0x080065c7
 8006594:	080065c7 	.word	0x080065c7
 8006598:	080065c7 	.word	0x080065c7
 800659c:	080065bf 	.word	0x080065bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065a0:	f7fd fe9e 	bl	80042e0 <HAL_RCC_GetPCLK1Freq>
 80065a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80065a6:	e014      	b.n	80065d2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065a8:	f7fd feac 	bl	8004304 <HAL_RCC_GetPCLK2Freq>
 80065ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80065ae:	e010      	b.n	80065d2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065b0:	4b5a      	ldr	r3, [pc, #360]	; (800671c <UART_SetConfig+0x4e4>)
 80065b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80065b4:	e00d      	b.n	80065d2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065b6:	f7fd fddf 	bl	8004178 <HAL_RCC_GetSysClockFreq>
 80065ba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80065bc:	e009      	b.n	80065d2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80065c4:	e005      	b.n	80065d2 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80065c6:	2300      	movs	r3, #0
 80065c8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80065d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f000 8089 	beq.w	80066ec <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065de:	4a4e      	ldr	r2, [pc, #312]	; (8006718 <UART_SetConfig+0x4e0>)
 80065e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065e4:	461a      	mov	r2, r3
 80065e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80065ec:	005a      	lsls	r2, r3, #1
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	085b      	lsrs	r3, r3, #1
 80065f4:	441a      	add	r2, r3
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80065fe:	b29b      	uxth	r3, r3
 8006600:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006602:	6a3b      	ldr	r3, [r7, #32]
 8006604:	2b0f      	cmp	r3, #15
 8006606:	d916      	bls.n	8006636 <UART_SetConfig+0x3fe>
 8006608:	6a3b      	ldr	r3, [r7, #32]
 800660a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800660e:	d212      	bcs.n	8006636 <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006610:	6a3b      	ldr	r3, [r7, #32]
 8006612:	b29b      	uxth	r3, r3
 8006614:	f023 030f 	bic.w	r3, r3, #15
 8006618:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800661a:	6a3b      	ldr	r3, [r7, #32]
 800661c:	085b      	lsrs	r3, r3, #1
 800661e:	b29b      	uxth	r3, r3
 8006620:	f003 0307 	and.w	r3, r3, #7
 8006624:	b29a      	uxth	r2, r3
 8006626:	8bfb      	ldrh	r3, [r7, #30]
 8006628:	4313      	orrs	r3, r2
 800662a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	8bfa      	ldrh	r2, [r7, #30]
 8006632:	60da      	str	r2, [r3, #12]
 8006634:	e05a      	b.n	80066ec <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800663c:	e056      	b.n	80066ec <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800663e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006642:	2b08      	cmp	r3, #8
 8006644:	d827      	bhi.n	8006696 <UART_SetConfig+0x45e>
 8006646:	a201      	add	r2, pc, #4	; (adr r2, 800664c <UART_SetConfig+0x414>)
 8006648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800664c:	08006671 	.word	0x08006671
 8006650:	08006679 	.word	0x08006679
 8006654:	08006681 	.word	0x08006681
 8006658:	08006697 	.word	0x08006697
 800665c:	08006687 	.word	0x08006687
 8006660:	08006697 	.word	0x08006697
 8006664:	08006697 	.word	0x08006697
 8006668:	08006697 	.word	0x08006697
 800666c:	0800668f 	.word	0x0800668f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006670:	f7fd fe36 	bl	80042e0 <HAL_RCC_GetPCLK1Freq>
 8006674:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006676:	e014      	b.n	80066a2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006678:	f7fd fe44 	bl	8004304 <HAL_RCC_GetPCLK2Freq>
 800667c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800667e:	e010      	b.n	80066a2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006680:	4b26      	ldr	r3, [pc, #152]	; (800671c <UART_SetConfig+0x4e4>)
 8006682:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006684:	e00d      	b.n	80066a2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006686:	f7fd fd77 	bl	8004178 <HAL_RCC_GetSysClockFreq>
 800668a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800668c:	e009      	b.n	80066a2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800668e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006692:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006694:	e005      	b.n	80066a2 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8006696:	2300      	movs	r3, #0
 8006698:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80066a0:	bf00      	nop
    }

    if (pclk != 0U)
 80066a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d021      	beq.n	80066ec <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ac:	4a1a      	ldr	r2, [pc, #104]	; (8006718 <UART_SetConfig+0x4e0>)
 80066ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066b2:	461a      	mov	r2, r3
 80066b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	085b      	lsrs	r3, r3, #1
 80066c0:	441a      	add	r2, r3
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066ce:	6a3b      	ldr	r3, [r7, #32]
 80066d0:	2b0f      	cmp	r3, #15
 80066d2:	d908      	bls.n	80066e6 <UART_SetConfig+0x4ae>
 80066d4:	6a3b      	ldr	r3, [r7, #32]
 80066d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066da:	d204      	bcs.n	80066e6 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	6a3a      	ldr	r2, [r7, #32]
 80066e2:	60da      	str	r2, [r3, #12]
 80066e4:	e002      	b.n	80066ec <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	2200      	movs	r2, #0
 8006700:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	2200      	movs	r2, #0
 8006706:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006708:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800670c:	4618      	mov	r0, r3
 800670e:	3730      	adds	r7, #48	; 0x30
 8006710:	46bd      	mov	sp, r7
 8006712:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006716:	bf00      	nop
 8006718:	0800e0dc 	.word	0x0800e0dc
 800671c:	00f42400 	.word	0x00f42400

08006720 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800672c:	f003 0301 	and.w	r3, r3, #1
 8006730:	2b00      	cmp	r3, #0
 8006732:	d00a      	beq.n	800674a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	430a      	orrs	r2, r1
 8006748:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800674e:	f003 0302 	and.w	r3, r3, #2
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00a      	beq.n	800676c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	430a      	orrs	r2, r1
 800676a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006770:	f003 0304 	and.w	r3, r3, #4
 8006774:	2b00      	cmp	r3, #0
 8006776:	d00a      	beq.n	800678e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	430a      	orrs	r2, r1
 800678c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006792:	f003 0308 	and.w	r3, r3, #8
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00a      	beq.n	80067b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	430a      	orrs	r2, r1
 80067ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b4:	f003 0310 	and.w	r3, r3, #16
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00a      	beq.n	80067d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	430a      	orrs	r2, r1
 80067d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d6:	f003 0320 	and.w	r3, r3, #32
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00a      	beq.n	80067f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	430a      	orrs	r2, r1
 80067f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d01a      	beq.n	8006836 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	430a      	orrs	r2, r1
 8006814:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800681a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800681e:	d10a      	bne.n	8006836 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	430a      	orrs	r2, r1
 8006834:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800683a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800683e:	2b00      	cmp	r3, #0
 8006840:	d00a      	beq.n	8006858 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	430a      	orrs	r2, r1
 8006856:	605a      	str	r2, [r3, #4]
  }
}
 8006858:	bf00      	nop
 800685a:	370c      	adds	r7, #12
 800685c:	46bd      	mov	sp, r7
 800685e:	bc80      	pop	{r7}
 8006860:	4770      	bx	lr

08006862 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006862:	b580      	push	{r7, lr}
 8006864:	b086      	sub	sp, #24
 8006866:	af02      	add	r7, sp, #8
 8006868:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006872:	f7fa fa8f 	bl	8000d94 <HAL_GetTick>
 8006876:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 0308 	and.w	r3, r3, #8
 8006882:	2b08      	cmp	r3, #8
 8006884:	d10e      	bne.n	80068a4 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006886:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800688a:	9300      	str	r3, [sp, #0]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 f82f 	bl	80068f8 <UART_WaitOnFlagUntilTimeout>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d001      	beq.n	80068a4 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068a0:	2303      	movs	r3, #3
 80068a2:	e025      	b.n	80068f0 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0304 	and.w	r3, r3, #4
 80068ae:	2b04      	cmp	r3, #4
 80068b0:	d10e      	bne.n	80068d0 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068b2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068b6:	9300      	str	r3, [sp, #0]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 f819 	bl	80068f8 <UART_WaitOnFlagUntilTimeout>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d001      	beq.n	80068d0 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068cc:	2303      	movs	r3, #3
 80068ce:	e00f      	b.n	80068f0 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2220      	movs	r2, #32
 80068d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2220      	movs	r2, #32
 80068dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3710      	adds	r7, #16
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b09c      	sub	sp, #112	; 0x70
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	603b      	str	r3, [r7, #0]
 8006904:	4613      	mov	r3, r2
 8006906:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006908:	e0a9      	b.n	8006a5e <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800690a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800690c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006910:	f000 80a5 	beq.w	8006a5e <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006914:	f7fa fa3e 	bl	8000d94 <HAL_GetTick>
 8006918:	4602      	mov	r2, r0
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006920:	429a      	cmp	r2, r3
 8006922:	d302      	bcc.n	800692a <UART_WaitOnFlagUntilTimeout+0x32>
 8006924:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006926:	2b00      	cmp	r3, #0
 8006928:	d140      	bne.n	80069ac <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006930:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006932:	e853 3f00 	ldrex	r3, [r3]
 8006936:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800693a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800693e:	667b      	str	r3, [r7, #100]	; 0x64
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	461a      	mov	r2, r3
 8006946:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006948:	65fb      	str	r3, [r7, #92]	; 0x5c
 800694a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800694e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006950:	e841 2300 	strex	r3, r2, [r1]
 8006954:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006956:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1e6      	bne.n	800692a <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	3308      	adds	r3, #8
 8006962:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006966:	e853 3f00 	ldrex	r3, [r3]
 800696a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800696c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800696e:	f023 0301 	bic.w	r3, r3, #1
 8006972:	663b      	str	r3, [r7, #96]	; 0x60
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	3308      	adds	r3, #8
 800697a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800697c:	64ba      	str	r2, [r7, #72]	; 0x48
 800697e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006980:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006982:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006984:	e841 2300 	strex	r3, r2, [r1]
 8006988:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800698a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1e5      	bne.n	800695c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2220      	movs	r2, #32
 8006994:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2220      	movs	r2, #32
 800699c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80069a8:	2303      	movs	r3, #3
 80069aa:	e069      	b.n	8006a80 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 0304 	and.w	r3, r3, #4
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d051      	beq.n	8006a5e <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	69db      	ldr	r3, [r3, #28]
 80069c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069c8:	d149      	bne.n	8006a5e <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069d2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069dc:	e853 3f00 	ldrex	r3, [r3]
 80069e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80069e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	461a      	mov	r2, r3
 80069f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069f2:	637b      	str	r3, [r7, #52]	; 0x34
 80069f4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80069f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069fa:	e841 2300 	strex	r3, r2, [r1]
 80069fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1e6      	bne.n	80069d4 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	3308      	adds	r3, #8
 8006a0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	e853 3f00 	ldrex	r3, [r3]
 8006a14:	613b      	str	r3, [r7, #16]
   return(result);
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	f023 0301 	bic.w	r3, r3, #1
 8006a1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	3308      	adds	r3, #8
 8006a24:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006a26:	623a      	str	r2, [r7, #32]
 8006a28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2a:	69f9      	ldr	r1, [r7, #28]
 8006a2c:	6a3a      	ldr	r2, [r7, #32]
 8006a2e:	e841 2300 	strex	r3, r2, [r1]
 8006a32:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a34:	69bb      	ldr	r3, [r7, #24]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1e5      	bne.n	8006a06 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2220      	movs	r2, #32
 8006a3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2220      	movs	r2, #32
 8006a46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2220      	movs	r2, #32
 8006a4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006a5a:	2303      	movs	r3, #3
 8006a5c:	e010      	b.n	8006a80 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	69da      	ldr	r2, [r3, #28]
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	4013      	ands	r3, r2
 8006a68:	68ba      	ldr	r2, [r7, #8]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	bf0c      	ite	eq
 8006a6e:	2301      	moveq	r3, #1
 8006a70:	2300      	movne	r3, #0
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	461a      	mov	r2, r3
 8006a76:	79fb      	ldrb	r3, [r7, #7]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	f43f af46 	beq.w	800690a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a7e:	2300      	movs	r3, #0
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3770      	adds	r7, #112	; 0x70
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b0a3      	sub	sp, #140	; 0x8c
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	4613      	mov	r3, r2
 8006a94:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	68ba      	ldr	r2, [r7, #8]
 8006a9a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	88fa      	ldrh	r2, [r7, #6]
 8006aa0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	88fa      	ldrh	r2, [r7, #6]
 8006aa8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aba:	d10e      	bne.n	8006ada <UART_Start_Receive_IT+0x52>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	691b      	ldr	r3, [r3, #16]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d105      	bne.n	8006ad0 <UART_Start_Receive_IT+0x48>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006aca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006ace:	e02d      	b.n	8006b2c <UART_Start_Receive_IT+0xa4>
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	22ff      	movs	r2, #255	; 0xff
 8006ad4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006ad8:	e028      	b.n	8006b2c <UART_Start_Receive_IT+0xa4>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d10d      	bne.n	8006afe <UART_Start_Receive_IT+0x76>
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d104      	bne.n	8006af4 <UART_Start_Receive_IT+0x6c>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	22ff      	movs	r2, #255	; 0xff
 8006aee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006af2:	e01b      	b.n	8006b2c <UART_Start_Receive_IT+0xa4>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	227f      	movs	r2, #127	; 0x7f
 8006af8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006afc:	e016      	b.n	8006b2c <UART_Start_Receive_IT+0xa4>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b06:	d10d      	bne.n	8006b24 <UART_Start_Receive_IT+0x9c>
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	691b      	ldr	r3, [r3, #16]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d104      	bne.n	8006b1a <UART_Start_Receive_IT+0x92>
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	227f      	movs	r2, #127	; 0x7f
 8006b14:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006b18:	e008      	b.n	8006b2c <UART_Start_Receive_IT+0xa4>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	223f      	movs	r2, #63	; 0x3f
 8006b1e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006b22:	e003      	b.n	8006b2c <UART_Start_Receive_IT+0xa4>
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2222      	movs	r2, #34	; 0x22
 8006b38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	3308      	adds	r3, #8
 8006b42:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b46:	e853 3f00 	ldrex	r3, [r3]
 8006b4a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006b4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b4e:	f043 0301 	orr.w	r3, r3, #1
 8006b52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	3308      	adds	r3, #8
 8006b5c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006b60:	673a      	str	r2, [r7, #112]	; 0x70
 8006b62:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b64:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006b66:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006b68:	e841 2300 	strex	r3, r2, [r1]
 8006b6c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006b6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1e3      	bne.n	8006b3c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b7c:	d153      	bne.n	8006c26 <UART_Start_Receive_IT+0x19e>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006b84:	88fa      	ldrh	r2, [r7, #6]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d34d      	bcc.n	8006c26 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b92:	d107      	bne.n	8006ba4 <UART_Start_Receive_IT+0x11c>
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d103      	bne.n	8006ba4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	4a4a      	ldr	r2, [pc, #296]	; (8006cc8 <UART_Start_Receive_IT+0x240>)
 8006ba0:	671a      	str	r2, [r3, #112]	; 0x70
 8006ba2:	e002      	b.n	8006baa <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	4a49      	ldr	r2, [pc, #292]	; (8006ccc <UART_Start_Receive_IT+0x244>)
 8006ba8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d01a      	beq.n	8006bf0 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bc2:	e853 3f00 	ldrex	r3, [r3]
 8006bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006bc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006bdc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bde:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006be2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006be4:	e841 2300 	strex	r3, r2, [r1]
 8006be8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006bea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d1e4      	bne.n	8006bba <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	3308      	adds	r3, #8
 8006bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bfa:	e853 3f00 	ldrex	r3, [r3]
 8006bfe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c06:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	3308      	adds	r3, #8
 8006c0e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006c10:	64ba      	str	r2, [r7, #72]	; 0x48
 8006c12:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c14:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006c16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c18:	e841 2300 	strex	r3, r2, [r1]
 8006c1c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006c1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d1e5      	bne.n	8006bf0 <UART_Start_Receive_IT+0x168>
 8006c24:	e04a      	b.n	8006cbc <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c2e:	d107      	bne.n	8006c40 <UART_Start_Receive_IT+0x1b8>
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	691b      	ldr	r3, [r3, #16]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d103      	bne.n	8006c40 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	4a25      	ldr	r2, [pc, #148]	; (8006cd0 <UART_Start_Receive_IT+0x248>)
 8006c3c:	671a      	str	r2, [r3, #112]	; 0x70
 8006c3e:	e002      	b.n	8006c46 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	4a24      	ldr	r2, [pc, #144]	; (8006cd4 <UART_Start_Receive_IT+0x24c>)
 8006c44:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d019      	beq.n	8006c8a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5e:	e853 3f00 	ldrex	r3, [r3]
 8006c62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c66:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006c6a:	677b      	str	r3, [r7, #116]	; 0x74
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	461a      	mov	r2, r3
 8006c72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c74:	637b      	str	r3, [r7, #52]	; 0x34
 8006c76:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c7c:	e841 2300 	strex	r3, r2, [r1]
 8006c80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d1e6      	bne.n	8006c56 <UART_Start_Receive_IT+0x1ce>
 8006c88:	e018      	b.n	8006cbc <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	e853 3f00 	ldrex	r3, [r3]
 8006c96:	613b      	str	r3, [r7, #16]
   return(result);
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	f043 0320 	orr.w	r3, r3, #32
 8006c9e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ca8:	623b      	str	r3, [r7, #32]
 8006caa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cac:	69f9      	ldr	r1, [r7, #28]
 8006cae:	6a3a      	ldr	r2, [r7, #32]
 8006cb0:	e841 2300 	strex	r3, r2, [r1]
 8006cb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d1e6      	bne.n	8006c8a <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	378c      	adds	r7, #140	; 0x8c
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bc80      	pop	{r7}
 8006cc6:	4770      	bx	lr
 8006cc8:	08007595 	.word	0x08007595
 8006ccc:	0800729d 	.word	0x0800729d
 8006cd0:	0800713b 	.word	0x0800713b
 8006cd4:	08006fdb 	.word	0x08006fdb

08006cd8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b08f      	sub	sp, #60	; 0x3c
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce6:	6a3b      	ldr	r3, [r7, #32]
 8006ce8:	e853 3f00 	ldrex	r3, [r3]
 8006cec:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006cf4:	637b      	str	r3, [r7, #52]	; 0x34
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d00:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d06:	e841 2300 	strex	r3, r2, [r1]
 8006d0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d1e6      	bne.n	8006ce0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	3308      	adds	r3, #8
 8006d18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	e853 3f00 	ldrex	r3, [r3]
 8006d20:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006d28:	633b      	str	r3, [r7, #48]	; 0x30
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	3308      	adds	r3, #8
 8006d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d32:	61ba      	str	r2, [r7, #24]
 8006d34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d36:	6979      	ldr	r1, [r7, #20]
 8006d38:	69ba      	ldr	r2, [r7, #24]
 8006d3a:	e841 2300 	strex	r3, r2, [r1]
 8006d3e:	613b      	str	r3, [r7, #16]
   return(result);
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d1e5      	bne.n	8006d12 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2220      	movs	r2, #32
 8006d4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8006d4e:	bf00      	nop
 8006d50:	373c      	adds	r7, #60	; 0x3c
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bc80      	pop	{r7}
 8006d56:	4770      	bx	lr

08006d58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b095      	sub	sp, #84	; 0x54
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d68:	e853 3f00 	ldrex	r3, [r3]
 8006d6c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d7e:	643b      	str	r3, [r7, #64]	; 0x40
 8006d80:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d86:	e841 2300 	strex	r3, r2, [r1]
 8006d8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d1e6      	bne.n	8006d60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	3308      	adds	r3, #8
 8006d98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9a:	6a3b      	ldr	r3, [r7, #32]
 8006d9c:	e853 3f00 	ldrex	r3, [r3]
 8006da0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006da8:	f023 0301 	bic.w	r3, r3, #1
 8006dac:	64bb      	str	r3, [r7, #72]	; 0x48
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	3308      	adds	r3, #8
 8006db4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006db6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006db8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006dbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006dbe:	e841 2300 	strex	r3, r2, [r1]
 8006dc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d1e3      	bne.n	8006d92 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d118      	bne.n	8006e04 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	e853 3f00 	ldrex	r3, [r3]
 8006dde:	60bb      	str	r3, [r7, #8]
   return(result);
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	f023 0310 	bic.w	r3, r3, #16
 8006de6:	647b      	str	r3, [r7, #68]	; 0x44
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	461a      	mov	r2, r3
 8006dee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006df0:	61bb      	str	r3, [r7, #24]
 8006df2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df4:	6979      	ldr	r1, [r7, #20]
 8006df6:	69ba      	ldr	r2, [r7, #24]
 8006df8:	e841 2300 	strex	r3, r2, [r1]
 8006dfc:	613b      	str	r3, [r7, #16]
   return(result);
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d1e6      	bne.n	8006dd2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2220      	movs	r2, #32
 8006e08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006e18:	bf00      	nop
 8006e1a:	3754      	adds	r7, #84	; 0x54
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bc80      	pop	{r7}
 8006e20:	4770      	bx	lr

08006e22 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b090      	sub	sp, #64	; 0x40
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e2e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 0320 	and.w	r3, r3, #32
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d137      	bne.n	8006eae <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8006e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e40:	2200      	movs	r2, #0
 8006e42:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	3308      	adds	r3, #8
 8006e4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e50:	e853 3f00 	ldrex	r3, [r3]
 8006e54:	623b      	str	r3, [r7, #32]
   return(result);
 8006e56:	6a3b      	ldr	r3, [r7, #32]
 8006e58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	3308      	adds	r3, #8
 8006e64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e66:	633a      	str	r2, [r7, #48]	; 0x30
 8006e68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e6e:	e841 2300 	strex	r3, r2, [r1]
 8006e72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d1e5      	bne.n	8006e46 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	e853 3f00 	ldrex	r3, [r3]
 8006e86:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e8e:	637b      	str	r3, [r7, #52]	; 0x34
 8006e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	461a      	mov	r2, r3
 8006e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e98:	61fb      	str	r3, [r7, #28]
 8006e9a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9c:	69b9      	ldr	r1, [r7, #24]
 8006e9e:	69fa      	ldr	r2, [r7, #28]
 8006ea0:	e841 2300 	strex	r3, r2, [r1]
 8006ea4:	617b      	str	r3, [r7, #20]
   return(result);
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1e6      	bne.n	8006e7a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006eac:	e002      	b.n	8006eb4 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006eae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006eb0:	f7fa fdc0 	bl	8001a34 <HAL_UART_TxCpltCallback>
}
 8006eb4:	bf00      	nop
 8006eb6:	3740      	adds	r7, #64	; 0x40
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006eca:	68f8      	ldr	r0, [r7, #12]
 8006ecc:	f7ff f996 	bl	80061fc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ed0:	bf00      	nop
 8006ed2:	3710      	adds	r7, #16
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b086      	sub	sp, #24
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ee4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006eec:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ef4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f00:	2b80      	cmp	r3, #128	; 0x80
 8006f02:	d109      	bne.n	8006f18 <UART_DMAError+0x40>
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	2b21      	cmp	r3, #33	; 0x21
 8006f08:	d106      	bne.n	8006f18 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8006f12:	6978      	ldr	r0, [r7, #20]
 8006f14:	f7ff fee0 	bl	8006cd8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f22:	2b40      	cmp	r3, #64	; 0x40
 8006f24:	d109      	bne.n	8006f3a <UART_DMAError+0x62>
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2b22      	cmp	r3, #34	; 0x22
 8006f2a:	d106      	bne.n	8006f3a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8006f34:	6978      	ldr	r0, [r7, #20]
 8006f36:	f7ff ff0f 	bl	8006d58 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f40:	f043 0210 	orr.w	r2, r3, #16
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f4a:	6978      	ldr	r0, [r7, #20]
 8006f4c:	f7ff f95f 	bl	800620e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f50:	bf00      	nop
 8006f52:	3718      	adds	r7, #24
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f76:	68f8      	ldr	r0, [r7, #12]
 8006f78:	f7ff f949 	bl	800620e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f7c:	bf00      	nop
 8006f7e:	3710      	adds	r7, #16
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b088      	sub	sp, #32
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	e853 3f00 	ldrex	r3, [r3]
 8006f98:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fa0:	61fb      	str	r3, [r7, #28]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	61bb      	str	r3, [r7, #24]
 8006fac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fae:	6979      	ldr	r1, [r7, #20]
 8006fb0:	69ba      	ldr	r2, [r7, #24]
 8006fb2:	e841 2300 	strex	r3, r2, [r1]
 8006fb6:	613b      	str	r3, [r7, #16]
   return(result);
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d1e6      	bne.n	8006f8c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2220      	movs	r2, #32
 8006fc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f7fa fd31 	bl	8001a34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fd2:	bf00      	nop
 8006fd4:	3720      	adds	r7, #32
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b096      	sub	sp, #88	; 0x58
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006fe8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ff2:	2b22      	cmp	r3, #34	; 0x22
 8006ff4:	f040 8095 	bne.w	8007122 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffe:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007002:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007006:	b2d9      	uxtb	r1, r3
 8007008:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800700c:	b2da      	uxtb	r2, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007012:	400a      	ands	r2, r1
 8007014:	b2d2      	uxtb	r2, r2
 8007016:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800701c:	1c5a      	adds	r2, r3, #1
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007028:	b29b      	uxth	r3, r3
 800702a:	3b01      	subs	r3, #1
 800702c:	b29a      	uxth	r2, r3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800703a:	b29b      	uxth	r3, r3
 800703c:	2b00      	cmp	r3, #0
 800703e:	d178      	bne.n	8007132 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007048:	e853 3f00 	ldrex	r3, [r3]
 800704c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800704e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007050:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007054:	653b      	str	r3, [r7, #80]	; 0x50
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	461a      	mov	r2, r3
 800705c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800705e:	647b      	str	r3, [r7, #68]	; 0x44
 8007060:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007062:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007064:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007066:	e841 2300 	strex	r3, r2, [r1]
 800706a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800706c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800706e:	2b00      	cmp	r3, #0
 8007070:	d1e6      	bne.n	8007040 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	3308      	adds	r3, #8
 8007078:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800707a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707c:	e853 3f00 	ldrex	r3, [r3]
 8007080:	623b      	str	r3, [r7, #32]
   return(result);
 8007082:	6a3b      	ldr	r3, [r7, #32]
 8007084:	f023 0301 	bic.w	r3, r3, #1
 8007088:	64fb      	str	r3, [r7, #76]	; 0x4c
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	3308      	adds	r3, #8
 8007090:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007092:	633a      	str	r2, [r7, #48]	; 0x30
 8007094:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007096:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800709a:	e841 2300 	strex	r3, r2, [r1]
 800709e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80070a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1e5      	bne.n	8007072 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2220      	movs	r2, #32
 80070aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d12e      	bne.n	800711a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	e853 3f00 	ldrex	r3, [r3]
 80070ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f023 0310 	bic.w	r3, r3, #16
 80070d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	461a      	mov	r2, r3
 80070de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070e0:	61fb      	str	r3, [r7, #28]
 80070e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e4:	69b9      	ldr	r1, [r7, #24]
 80070e6:	69fa      	ldr	r2, [r7, #28]
 80070e8:	e841 2300 	strex	r3, r2, [r1]
 80070ec:	617b      	str	r3, [r7, #20]
   return(result);
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d1e6      	bne.n	80070c2 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	69db      	ldr	r3, [r3, #28]
 80070fa:	f003 0310 	and.w	r3, r3, #16
 80070fe:	2b10      	cmp	r3, #16
 8007100:	d103      	bne.n	800710a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2210      	movs	r2, #16
 8007108:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007110:	4619      	mov	r1, r3
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f7ff f884 	bl	8006220 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007118:	e00b      	b.n	8007132 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f7fa fca0 	bl	8001a60 <HAL_UART_RxCpltCallback>
}
 8007120:	e007      	b.n	8007132 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	699a      	ldr	r2, [r3, #24]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f042 0208 	orr.w	r2, r2, #8
 8007130:	619a      	str	r2, [r3, #24]
}
 8007132:	bf00      	nop
 8007134:	3758      	adds	r7, #88	; 0x58
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}

0800713a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800713a:	b580      	push	{r7, lr}
 800713c:	b096      	sub	sp, #88	; 0x58
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007148:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007152:	2b22      	cmp	r3, #34	; 0x22
 8007154:	f040 8095 	bne.w	8007282 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007166:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007168:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800716c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007170:	4013      	ands	r3, r2
 8007172:	b29a      	uxth	r2, r3
 8007174:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007176:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800717c:	1c9a      	adds	r2, r3, #2
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007188:	b29b      	uxth	r3, r3
 800718a:	3b01      	subs	r3, #1
 800718c:	b29a      	uxth	r2, r3
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800719a:	b29b      	uxth	r3, r3
 800719c:	2b00      	cmp	r3, #0
 800719e:	d178      	bne.n	8007292 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071a8:	e853 3f00 	ldrex	r3, [r3]
 80071ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80071ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	461a      	mov	r2, r3
 80071bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071be:	643b      	str	r3, [r7, #64]	; 0x40
 80071c0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80071c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80071c6:	e841 2300 	strex	r3, r2, [r1]
 80071ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d1e6      	bne.n	80071a0 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	3308      	adds	r3, #8
 80071d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071da:	6a3b      	ldr	r3, [r7, #32]
 80071dc:	e853 3f00 	ldrex	r3, [r3]
 80071e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	f023 0301 	bic.w	r3, r3, #1
 80071e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	3308      	adds	r3, #8
 80071f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80071f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071fa:	e841 2300 	strex	r3, r2, [r1]
 80071fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007202:	2b00      	cmp	r3, #0
 8007204:	d1e5      	bne.n	80071d2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2220      	movs	r2, #32
 800720a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007218:	2b01      	cmp	r3, #1
 800721a:	d12e      	bne.n	800727a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	e853 3f00 	ldrex	r3, [r3]
 800722e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	f023 0310 	bic.w	r3, r3, #16
 8007236:	647b      	str	r3, [r7, #68]	; 0x44
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	461a      	mov	r2, r3
 800723e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007240:	61bb      	str	r3, [r7, #24]
 8007242:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007244:	6979      	ldr	r1, [r7, #20]
 8007246:	69ba      	ldr	r2, [r7, #24]
 8007248:	e841 2300 	strex	r3, r2, [r1]
 800724c:	613b      	str	r3, [r7, #16]
   return(result);
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d1e6      	bne.n	8007222 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	69db      	ldr	r3, [r3, #28]
 800725a:	f003 0310 	and.w	r3, r3, #16
 800725e:	2b10      	cmp	r3, #16
 8007260:	d103      	bne.n	800726a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	2210      	movs	r2, #16
 8007268:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007270:	4619      	mov	r1, r3
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f7fe ffd4 	bl	8006220 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007278:	e00b      	b.n	8007292 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f7fa fbf0 	bl	8001a60 <HAL_UART_RxCpltCallback>
}
 8007280:	e007      	b.n	8007292 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	699a      	ldr	r2, [r3, #24]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f042 0208 	orr.w	r2, r2, #8
 8007290:	619a      	str	r2, [r3, #24]
}
 8007292:	bf00      	nop
 8007294:	3758      	adds	r7, #88	; 0x58
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
	...

0800729c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b0a6      	sub	sp, #152	; 0x98
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80072aa:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	69db      	ldr	r3, [r3, #28]
 80072b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072d2:	2b22      	cmp	r3, #34	; 0x22
 80072d4:	f040 814f 	bne.w	8007576 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80072de:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80072e2:	e0f6      	b.n	80074d2 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ea:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80072ee:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80072f2:	b2d9      	uxtb	r1, r3
 80072f4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80072f8:	b2da      	uxtb	r2, r3
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072fe:	400a      	ands	r2, r1
 8007300:	b2d2      	uxtb	r2, r2
 8007302:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007308:	1c5a      	adds	r2, r3, #1
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007314:	b29b      	uxth	r3, r3
 8007316:	3b01      	subs	r3, #1
 8007318:	b29a      	uxth	r2, r3
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	69db      	ldr	r3, [r3, #28]
 8007326:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800732a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800732e:	f003 0307 	and.w	r3, r3, #7
 8007332:	2b00      	cmp	r3, #0
 8007334:	d053      	beq.n	80073de <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007336:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800733a:	f003 0301 	and.w	r3, r3, #1
 800733e:	2b00      	cmp	r3, #0
 8007340:	d011      	beq.n	8007366 <UART_RxISR_8BIT_FIFOEN+0xca>
 8007342:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00b      	beq.n	8007366 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	2201      	movs	r2, #1
 8007354:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800735c:	f043 0201 	orr.w	r2, r3, #1
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007366:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800736a:	f003 0302 	and.w	r3, r3, #2
 800736e:	2b00      	cmp	r3, #0
 8007370:	d011      	beq.n	8007396 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007372:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007376:	f003 0301 	and.w	r3, r3, #1
 800737a:	2b00      	cmp	r3, #0
 800737c:	d00b      	beq.n	8007396 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2202      	movs	r2, #2
 8007384:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800738c:	f043 0204 	orr.w	r2, r3, #4
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007396:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800739a:	f003 0304 	and.w	r3, r3, #4
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d011      	beq.n	80073c6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80073a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80073a6:	f003 0301 	and.w	r3, r3, #1
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00b      	beq.n	80073c6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2204      	movs	r2, #4
 80073b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073bc:	f043 0202 	orr.w	r2, r3, #2
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d006      	beq.n	80073de <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f7fe ff1c 	bl	800620e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d173      	bne.n	80074d2 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073f2:	e853 3f00 	ldrex	r3, [r3]
 80073f6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80073f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80073fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	461a      	mov	r2, r3
 8007408:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800740c:	66bb      	str	r3, [r7, #104]	; 0x68
 800740e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007410:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007412:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007414:	e841 2300 	strex	r3, r2, [r1]
 8007418:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800741a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800741c:	2b00      	cmp	r3, #0
 800741e:	d1e4      	bne.n	80073ea <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	3308      	adds	r3, #8
 8007426:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007428:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800742a:	e853 3f00 	ldrex	r3, [r3]
 800742e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007430:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007432:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007436:	f023 0301 	bic.w	r3, r3, #1
 800743a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	3308      	adds	r3, #8
 8007442:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007444:	657a      	str	r2, [r7, #84]	; 0x54
 8007446:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007448:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800744a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800744c:	e841 2300 	strex	r3, r2, [r1]
 8007450:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007454:	2b00      	cmp	r3, #0
 8007456:	d1e3      	bne.n	8007420 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2220      	movs	r2, #32
 800745c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800746a:	2b01      	cmp	r3, #1
 800746c:	d12e      	bne.n	80074cc <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800747c:	e853 3f00 	ldrex	r3, [r3]
 8007480:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007484:	f023 0310 	bic.w	r3, r3, #16
 8007488:	67bb      	str	r3, [r7, #120]	; 0x78
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	461a      	mov	r2, r3
 8007490:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007492:	643b      	str	r3, [r7, #64]	; 0x40
 8007494:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007496:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007498:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800749a:	e841 2300 	strex	r3, r2, [r1]
 800749e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80074a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d1e6      	bne.n	8007474 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	69db      	ldr	r3, [r3, #28]
 80074ac:	f003 0310 	and.w	r3, r3, #16
 80074b0:	2b10      	cmp	r3, #16
 80074b2:	d103      	bne.n	80074bc <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2210      	movs	r2, #16
 80074ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80074c2:	4619      	mov	r1, r3
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f7fe feab 	bl	8006220 <HAL_UARTEx_RxEventCallback>
 80074ca:	e002      	b.n	80074d2 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f7fa fac7 	bl	8001a60 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80074d2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d006      	beq.n	80074e8 <UART_RxISR_8BIT_FIFOEN+0x24c>
 80074da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80074de:	f003 0320 	and.w	r3, r3, #32
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	f47f aefe 	bne.w	80072e4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80074ee:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80074f2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d045      	beq.n	8007586 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007500:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007504:	429a      	cmp	r2, r3
 8007506:	d23e      	bcs.n	8007586 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	3308      	adds	r3, #8
 800750e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007510:	6a3b      	ldr	r3, [r7, #32]
 8007512:	e853 3f00 	ldrex	r3, [r3]
 8007516:	61fb      	str	r3, [r7, #28]
   return(result);
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800751e:	673b      	str	r3, [r7, #112]	; 0x70
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	3308      	adds	r3, #8
 8007526:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007528:	62fa      	str	r2, [r7, #44]	; 0x2c
 800752a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800752e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007530:	e841 2300 	strex	r3, r2, [r1]
 8007534:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007538:	2b00      	cmp	r3, #0
 800753a:	d1e5      	bne.n	8007508 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	4a14      	ldr	r2, [pc, #80]	; (8007590 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8007540:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	e853 3f00 	ldrex	r3, [r3]
 800754e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	f043 0320 	orr.w	r3, r3, #32
 8007556:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	461a      	mov	r2, r3
 800755e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007560:	61bb      	str	r3, [r7, #24]
 8007562:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007564:	6979      	ldr	r1, [r7, #20]
 8007566:	69ba      	ldr	r2, [r7, #24]
 8007568:	e841 2300 	strex	r3, r2, [r1]
 800756c:	613b      	str	r3, [r7, #16]
   return(result);
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d1e6      	bne.n	8007542 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007574:	e007      	b.n	8007586 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	699a      	ldr	r2, [r3, #24]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f042 0208 	orr.w	r2, r2, #8
 8007584:	619a      	str	r2, [r3, #24]
}
 8007586:	bf00      	nop
 8007588:	3798      	adds	r7, #152	; 0x98
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	08006fdb 	.word	0x08006fdb

08007594 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b0a8      	sub	sp, #160	; 0xa0
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80075a2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	69db      	ldr	r3, [r3, #28]
 80075ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075ca:	2b22      	cmp	r3, #34	; 0x22
 80075cc:	f040 8153 	bne.w	8007876 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80075d6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80075da:	e0fa      	b.n	80077d2 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80075ee:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80075f2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80075f6:	4013      	ands	r3, r2
 80075f8:	b29a      	uxth	r2, r3
 80075fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80075fe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007604:	1c9a      	adds	r2, r3, #2
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007610:	b29b      	uxth	r3, r3
 8007612:	3b01      	subs	r3, #1
 8007614:	b29a      	uxth	r2, r3
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	69db      	ldr	r3, [r3, #28]
 8007622:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007626:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800762a:	f003 0307 	and.w	r3, r3, #7
 800762e:	2b00      	cmp	r3, #0
 8007630:	d053      	beq.n	80076da <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007632:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007636:	f003 0301 	and.w	r3, r3, #1
 800763a:	2b00      	cmp	r3, #0
 800763c:	d011      	beq.n	8007662 <UART_RxISR_16BIT_FIFOEN+0xce>
 800763e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007646:	2b00      	cmp	r3, #0
 8007648:	d00b      	beq.n	8007662 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2201      	movs	r2, #1
 8007650:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007658:	f043 0201 	orr.w	r2, r3, #1
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007662:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007666:	f003 0302 	and.w	r3, r3, #2
 800766a:	2b00      	cmp	r3, #0
 800766c:	d011      	beq.n	8007692 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800766e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007672:	f003 0301 	and.w	r3, r3, #1
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00b      	beq.n	8007692 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2202      	movs	r2, #2
 8007680:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007688:	f043 0204 	orr.w	r2, r3, #4
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007692:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007696:	f003 0304 	and.w	r3, r3, #4
 800769a:	2b00      	cmp	r3, #0
 800769c:	d011      	beq.n	80076c2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800769e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80076a2:	f003 0301 	and.w	r3, r3, #1
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d00b      	beq.n	80076c2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2204      	movs	r2, #4
 80076b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076b8:	f043 0202 	orr.w	r2, r3, #2
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d006      	beq.n	80076da <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f7fe fd9e 	bl	800620e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d175      	bne.n	80077d2 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076ee:	e853 3f00 	ldrex	r3, [r3]
 80076f2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80076f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	461a      	mov	r2, r3
 8007704:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007708:	66fb      	str	r3, [r7, #108]	; 0x6c
 800770a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800770e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007710:	e841 2300 	strex	r3, r2, [r1]
 8007714:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007716:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1e4      	bne.n	80076e6 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	3308      	adds	r3, #8
 8007722:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007726:	e853 3f00 	ldrex	r3, [r3]
 800772a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800772c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800772e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007732:	f023 0301 	bic.w	r3, r3, #1
 8007736:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	3308      	adds	r3, #8
 8007740:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007744:	65ba      	str	r2, [r7, #88]	; 0x58
 8007746:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007748:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800774a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800774c:	e841 2300 	strex	r3, r2, [r1]
 8007750:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007752:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007754:	2b00      	cmp	r3, #0
 8007756:	d1e1      	bne.n	800771c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2220      	movs	r2, #32
 800775c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800776a:	2b01      	cmp	r3, #1
 800776c:	d12e      	bne.n	80077cc <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777c:	e853 3f00 	ldrex	r3, [r3]
 8007780:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007784:	f023 0310 	bic.w	r3, r3, #16
 8007788:	67fb      	str	r3, [r7, #124]	; 0x7c
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	461a      	mov	r2, r3
 8007790:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007792:	647b      	str	r3, [r7, #68]	; 0x44
 8007794:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007796:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007798:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800779a:	e841 2300 	strex	r3, r2, [r1]
 800779e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80077a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d1e6      	bne.n	8007774 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	69db      	ldr	r3, [r3, #28]
 80077ac:	f003 0310 	and.w	r3, r3, #16
 80077b0:	2b10      	cmp	r3, #16
 80077b2:	d103      	bne.n	80077bc <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2210      	movs	r2, #16
 80077ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80077c2:	4619      	mov	r1, r3
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f7fe fd2b 	bl	8006220 <HAL_UARTEx_RxEventCallback>
 80077ca:	e002      	b.n	80077d2 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f7fa f947 	bl	8001a60 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80077d2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d006      	beq.n	80077e8 <UART_RxISR_16BIT_FIFOEN+0x254>
 80077da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80077de:	f003 0320 	and.w	r3, r3, #32
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	f47f aefa 	bne.w	80075dc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80077ee:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80077f2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d045      	beq.n	8007886 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007800:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8007804:	429a      	cmp	r2, r3
 8007806:	d23e      	bcs.n	8007886 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	3308      	adds	r3, #8
 800780e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007812:	e853 3f00 	ldrex	r3, [r3]
 8007816:	623b      	str	r3, [r7, #32]
   return(result);
 8007818:	6a3b      	ldr	r3, [r7, #32]
 800781a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800781e:	677b      	str	r3, [r7, #116]	; 0x74
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	3308      	adds	r3, #8
 8007826:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007828:	633a      	str	r2, [r7, #48]	; 0x30
 800782a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800782e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007830:	e841 2300 	strex	r3, r2, [r1]
 8007834:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007838:	2b00      	cmp	r3, #0
 800783a:	d1e5      	bne.n	8007808 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	4a14      	ldr	r2, [pc, #80]	; (8007890 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8007840:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	e853 3f00 	ldrex	r3, [r3]
 800784e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f043 0320 	orr.w	r3, r3, #32
 8007856:	673b      	str	r3, [r7, #112]	; 0x70
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	461a      	mov	r2, r3
 800785e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007860:	61fb      	str	r3, [r7, #28]
 8007862:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007864:	69b9      	ldr	r1, [r7, #24]
 8007866:	69fa      	ldr	r2, [r7, #28]
 8007868:	e841 2300 	strex	r3, r2, [r1]
 800786c:	617b      	str	r3, [r7, #20]
   return(result);
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d1e6      	bne.n	8007842 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007874:	e007      	b.n	8007886 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	699a      	ldr	r2, [r3, #24]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f042 0208 	orr.w	r2, r2, #8
 8007884:	619a      	str	r2, [r3, #24]
}
 8007886:	bf00      	nop
 8007888:	37a0      	adds	r7, #160	; 0xa0
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	0800713b 	.word	0x0800713b

08007894 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800789c:	bf00      	nop
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bc80      	pop	{r7}
 80078a4:	4770      	bx	lr

080078a6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80078a6:	b480      	push	{r7}
 80078a8:	b083      	sub	sp, #12
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80078ae:	bf00      	nop
 80078b0:	370c      	adds	r7, #12
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bc80      	pop	{r7}
 80078b6:	4770      	bx	lr

080078b8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bc80      	pop	{r7}
 80078c8:	4770      	bx	lr

080078ca <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b088      	sub	sp, #32
 80078ce:	af02      	add	r7, sp, #8
 80078d0:	60f8      	str	r0, [r7, #12]
 80078d2:	1d3b      	adds	r3, r7, #4
 80078d4:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 80078d8:	2300      	movs	r3, #0
 80078da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d101      	bne.n	80078ea <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 80078e6:	2302      	movs	r3, #2
 80078e8:	e046      	b.n	8007978 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2201      	movs	r2, #1
 80078ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2224      	movs	r2, #36	; 0x24
 80078f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f022 0201 	bic.w	r2, r2, #1
 8007908:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	430a      	orrs	r2, r1
 800791c:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d105      	bne.n	8007930 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8007924:	1d3b      	adds	r3, r7, #4
 8007926:	e893 0006 	ldmia.w	r3, {r1, r2}
 800792a:	68f8      	ldr	r0, [r7, #12]
 800792c:	f000 f949 	bl	8007bc2 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f042 0201 	orr.w	r2, r2, #1
 800793e:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007940:	f7f9 fa28 	bl	8000d94 <HAL_GetTick>
 8007944:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007946:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800794a:	9300      	str	r3, [sp, #0]
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	2200      	movs	r2, #0
 8007950:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007954:	68f8      	ldr	r0, [r7, #12]
 8007956:	f7fe ffcf 	bl	80068f8 <UART_WaitOnFlagUntilTimeout>
 800795a:	4603      	mov	r3, r0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d002      	beq.n	8007966 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8007960:	2303      	movs	r3, #3
 8007962:	75fb      	strb	r3, [r7, #23]
 8007964:	e003      	b.n	800796e <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2220      	movs	r2, #32
 800796a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2200      	movs	r2, #0
 8007972:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 8007976:	7dfb      	ldrb	r3, [r7, #23]
}
 8007978:	4618      	mov	r0, r3
 800797a:	3718      	adds	r7, #24
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8007980:	b480      	push	{r7}
 8007982:	b089      	sub	sp, #36	; 0x24
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800798e:	2b01      	cmp	r3, #1
 8007990:	d101      	bne.n	8007996 <HAL_UARTEx_EnableStopMode+0x16>
 8007992:	2302      	movs	r3, #2
 8007994:	e021      	b.n	80079da <HAL_UARTEx_EnableStopMode+0x5a>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2201      	movs	r2, #1
 800799a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	e853 3f00 	ldrex	r3, [r3]
 80079aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	f043 0302 	orr.w	r3, r3, #2
 80079b2:	61fb      	str	r3, [r7, #28]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	461a      	mov	r2, r3
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	61bb      	str	r3, [r7, #24]
 80079be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c0:	6979      	ldr	r1, [r7, #20]
 80079c2:	69ba      	ldr	r2, [r7, #24]
 80079c4:	e841 2300 	strex	r3, r2, [r1]
 80079c8:	613b      	str	r3, [r7, #16]
   return(result);
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d1e6      	bne.n	800799e <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3724      	adds	r7, #36	; 0x24
 80079de:	46bd      	mov	sp, r7
 80079e0:	bc80      	pop	{r7}
 80079e2:	4770      	bx	lr

080079e4 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d101      	bne.n	80079fa <HAL_UARTEx_EnableFifoMode+0x16>
 80079f6:	2302      	movs	r3, #2
 80079f8:	e02b      	b.n	8007a52 <HAL_UARTEx_EnableFifoMode+0x6e>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2201      	movs	r2, #1
 80079fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2224      	movs	r2, #36	; 0x24
 8007a06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f022 0201 	bic.w	r2, r2, #1
 8007a20:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a28:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8007a30:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68fa      	ldr	r2, [r7, #12]
 8007a38:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 f8e4 	bl	8007c08 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2220      	movs	r2, #32
 8007a44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3710      	adds	r7, #16
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007a5a:	b480      	push	{r7}
 8007a5c:	b085      	sub	sp, #20
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d101      	bne.n	8007a70 <HAL_UARTEx_DisableFifoMode+0x16>
 8007a6c:	2302      	movs	r3, #2
 8007a6e:	e027      	b.n	8007ac0 <HAL_UARTEx_DisableFifoMode+0x66>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2224      	movs	r2, #36	; 0x24
 8007a7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f022 0201 	bic.w	r2, r2, #1
 8007a96:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007a9e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2220      	movs	r2, #32
 8007ab2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007abe:	2300      	movs	r3, #0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3714      	adds	r7, #20
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bc80      	pop	{r7}
 8007ac8:	4770      	bx	lr

08007aca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b084      	sub	sp, #16
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
 8007ad2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d101      	bne.n	8007ae2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007ade:	2302      	movs	r3, #2
 8007ae0:	e02d      	b.n	8007b3e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2224      	movs	r2, #36	; 0x24
 8007aee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f022 0201 	bic.w	r2, r2, #1
 8007b08:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	683a      	ldr	r2, [r7, #0]
 8007b1a:	430a      	orrs	r2, r1
 8007b1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 f872 	bl	8007c08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	68fa      	ldr	r2, [r7, #12]
 8007b2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2220      	movs	r2, #32
 8007b30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3710      	adds	r7, #16
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}

08007b46 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b46:	b580      	push	{r7, lr}
 8007b48:	b084      	sub	sp, #16
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6078      	str	r0, [r7, #4]
 8007b4e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d101      	bne.n	8007b5e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007b5a:	2302      	movs	r3, #2
 8007b5c:	e02d      	b.n	8007bba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2201      	movs	r2, #1
 8007b62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2224      	movs	r2, #36	; 0x24
 8007b6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f022 0201 	bic.w	r2, r2, #1
 8007b84:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	683a      	ldr	r2, [r7, #0]
 8007b96:	430a      	orrs	r2, r1
 8007b98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 f834 	bl	8007c08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2220      	movs	r2, #32
 8007bac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3710      	adds	r7, #16
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}

08007bc2 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8007bc2:	b480      	push	{r7}
 8007bc4:	b085      	sub	sp, #20
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	60f8      	str	r0, [r7, #12]
 8007bca:	1d3b      	adds	r3, r7, #4
 8007bcc:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	f023 0210 	bic.w	r2, r3, #16
 8007bda:	893b      	ldrh	r3, [r7, #8]
 8007bdc:	4619      	mov	r1, r3
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	430a      	orrs	r2, r1
 8007be4:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 8007bf0:	7abb      	ldrb	r3, [r7, #10]
 8007bf2:	061a      	lsls	r2, r3, #24
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	430a      	orrs	r2, r1
 8007bfa:	605a      	str	r2, [r3, #4]
}
 8007bfc:	bf00      	nop
 8007bfe:	3714      	adds	r7, #20
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bc80      	pop	{r7}
 8007c04:	4770      	bx	lr
	...

08007c08 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b085      	sub	sp, #20
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d108      	bne.n	8007c2a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007c28:	e031      	b.n	8007c8e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007c2a:	2308      	movs	r3, #8
 8007c2c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007c2e:	2308      	movs	r3, #8
 8007c30:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	0e5b      	lsrs	r3, r3, #25
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	f003 0307 	and.w	r3, r3, #7
 8007c40:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	0f5b      	lsrs	r3, r3, #29
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	f003 0307 	and.w	r3, r3, #7
 8007c50:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c52:	7bbb      	ldrb	r3, [r7, #14]
 8007c54:	7b3a      	ldrb	r2, [r7, #12]
 8007c56:	4910      	ldr	r1, [pc, #64]	; (8007c98 <UARTEx_SetNbDataToProcess+0x90>)
 8007c58:	5c8a      	ldrb	r2, [r1, r2]
 8007c5a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007c5e:	7b3a      	ldrb	r2, [r7, #12]
 8007c60:	490e      	ldr	r1, [pc, #56]	; (8007c9c <UARTEx_SetNbDataToProcess+0x94>)
 8007c62:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c64:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c68:	b29a      	uxth	r2, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c70:	7bfb      	ldrb	r3, [r7, #15]
 8007c72:	7b7a      	ldrb	r2, [r7, #13]
 8007c74:	4908      	ldr	r1, [pc, #32]	; (8007c98 <UARTEx_SetNbDataToProcess+0x90>)
 8007c76:	5c8a      	ldrb	r2, [r1, r2]
 8007c78:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007c7c:	7b7a      	ldrb	r2, [r7, #13]
 8007c7e:	4907      	ldr	r1, [pc, #28]	; (8007c9c <UARTEx_SetNbDataToProcess+0x94>)
 8007c80:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c82:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c86:	b29a      	uxth	r2, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007c8e:	bf00      	nop
 8007c90:	3714      	adds	r7, #20
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bc80      	pop	{r7}
 8007c96:	4770      	bx	lr
 8007c98:	0800e0f4 	.word	0x0800e0f4
 8007c9c:	0800e0fc 	.word	0x0800e0fc

08007ca0 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af02      	add	r7, sp, #8
 8007ca6:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8007ca8:	4a24      	ldr	r2, [pc, #144]	; (8007d3c <RadioInit+0x9c>)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8007cae:	4b24      	ldr	r3, [pc, #144]	; (8007d40 <RadioInit+0xa0>)
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8007cb4:	4b22      	ldr	r3, [pc, #136]	; (8007d40 <RadioInit+0xa0>)
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8007cba:	4b21      	ldr	r3, [pc, #132]	; (8007d40 <RadioInit+0xa0>)
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8007cc0:	4b1f      	ldr	r3, [pc, #124]	; (8007d40 <RadioInit+0xa0>)
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	659a      	str	r2, [r3, #88]	; 0x58

    SUBGRF_Init( RadioOnDioIrq );
 8007cc6:	481f      	ldr	r0, [pc, #124]	; (8007d44 <RadioInit+0xa4>)
 8007cc8:	f001 ff88 	bl	8009bdc <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8007ccc:	4b1c      	ldr	r3, [pc, #112]	; (8007d40 <RadioInit+0xa0>)
 8007cce:	2200      	movs	r2, #0
 8007cd0:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8007cd2:	4b1b      	ldr	r3, [pc, #108]	; (8007d40 <RadioInit+0xa0>)
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8007cd8:	f002 fa16 	bl	800a108 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8007cdc:	2100      	movs	r1, #0
 8007cde:	2000      	movs	r0, #0
 8007ce0:	f002 fdde 	bl	800a8a0 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8007ce4:	2204      	movs	r2, #4
 8007ce6:	2100      	movs	r1, #0
 8007ce8:	2001      	movs	r0, #1
 8007cea:	f002 fb9b 	bl	800a424 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8007cee:	2300      	movs	r3, #0
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007cf6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007cfa:	f002 facb 	bl	800a294 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 8007cfe:	f000 fe83 	bl	8008a08 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8007d02:	2300      	movs	r3, #0
 8007d04:	9300      	str	r3, [sp, #0]
 8007d06:	4b10      	ldr	r3, [pc, #64]	; (8007d48 <RadioInit+0xa8>)
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f04f 31ff 	mov.w	r1, #4294967295
 8007d0e:	480f      	ldr	r0, [pc, #60]	; (8007d4c <RadioInit+0xac>)
 8007d10:	f004 fa6e 	bl	800c1f0 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8007d14:	2300      	movs	r3, #0
 8007d16:	9300      	str	r3, [sp, #0]
 8007d18:	4b0d      	ldr	r3, [pc, #52]	; (8007d50 <RadioInit+0xb0>)
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f04f 31ff 	mov.w	r1, #4294967295
 8007d20:	480c      	ldr	r0, [pc, #48]	; (8007d54 <RadioInit+0xb4>)
 8007d22:	f004 fa65 	bl	800c1f0 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8007d26:	4809      	ldr	r0, [pc, #36]	; (8007d4c <RadioInit+0xac>)
 8007d28:	f004 fb06 	bl	800c338 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8007d2c:	4809      	ldr	r0, [pc, #36]	; (8007d54 <RadioInit+0xb4>)
 8007d2e:	f004 fb03 	bl	800c338 <UTIL_TIMER_Stop>
}
 8007d32:	bf00      	nop
 8007d34:	3708      	adds	r7, #8
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	20000434 	.word	0x20000434
 8007d40:	20000438 	.word	0x20000438
 8007d44:	08008df5 	.word	0x08008df5
 8007d48:	08008d7d 	.word	0x08008d7d
 8007d4c:	20000494 	.word	0x20000494
 8007d50:	08008d91 	.word	0x08008d91
 8007d54:	200004ac 	.word	0x200004ac

08007d58 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8007d5c:	f001 ff80 	bl	8009c60 <SUBGRF_GetOperatingMode>
 8007d60:	4603      	mov	r3, r0
 8007d62:	2b07      	cmp	r3, #7
 8007d64:	d00a      	beq.n	8007d7c <RadioGetStatus+0x24>
 8007d66:	2b07      	cmp	r3, #7
 8007d68:	dc0a      	bgt.n	8007d80 <RadioGetStatus+0x28>
 8007d6a:	2b04      	cmp	r3, #4
 8007d6c:	d002      	beq.n	8007d74 <RadioGetStatus+0x1c>
 8007d6e:	2b05      	cmp	r3, #5
 8007d70:	d002      	beq.n	8007d78 <RadioGetStatus+0x20>
 8007d72:	e005      	b.n	8007d80 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8007d74:	2302      	movs	r3, #2
 8007d76:	e004      	b.n	8007d82 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e002      	b.n	8007d82 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8007d7c:	2303      	movs	r3, #3
 8007d7e:	e000      	b.n	8007d82 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8007d80:	2300      	movs	r3, #0
    }
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	bd80      	pop	{r7, pc}
	...

08007d88 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	4603      	mov	r3, r0
 8007d90:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8007d92:	4a2a      	ldr	r2, [pc, #168]	; (8007e3c <RadioSetModem+0xb4>)
 8007d94:	79fb      	ldrb	r3, [r7, #7]
 8007d96:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8007d98:	79fb      	ldrb	r3, [r7, #7]
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f003 f943 	bl	800b026 <RFW_SetRadioModem>
    switch( modem )
 8007da0:	79fb      	ldrb	r3, [r7, #7]
 8007da2:	2b05      	cmp	r3, #5
 8007da4:	d80e      	bhi.n	8007dc4 <RadioSetModem+0x3c>
 8007da6:	a201      	add	r2, pc, #4	; (adr r2, 8007dac <RadioSetModem+0x24>)
 8007da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dac:	08007dd3 	.word	0x08007dd3
 8007db0:	08007de1 	.word	0x08007de1
 8007db4:	08007dc5 	.word	0x08007dc5
 8007db8:	08007e07 	.word	0x08007e07
 8007dbc:	08007e15 	.word	0x08007e15
 8007dc0:	08007e23 	.word	0x08007e23
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8007dc4:	2003      	movs	r0, #3
 8007dc6:	f002 fb07 	bl	800a3d8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007dca:	4b1c      	ldr	r3, [pc, #112]	; (8007e3c <RadioSetModem+0xb4>)
 8007dcc:	2200      	movs	r2, #0
 8007dce:	735a      	strb	r2, [r3, #13]
        break;
 8007dd0:	e02f      	b.n	8007e32 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8007dd2:	2000      	movs	r0, #0
 8007dd4:	f002 fb00 	bl	800a3d8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007dd8:	4b18      	ldr	r3, [pc, #96]	; (8007e3c <RadioSetModem+0xb4>)
 8007dda:	2200      	movs	r2, #0
 8007ddc:	735a      	strb	r2, [r3, #13]
        break;
 8007dde:	e028      	b.n	8007e32 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8007de0:	2001      	movs	r0, #1
 8007de2:	f002 faf9 	bl	800a3d8 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8007de6:	4b15      	ldr	r3, [pc, #84]	; (8007e3c <RadioSetModem+0xb4>)
 8007de8:	7b5a      	ldrb	r2, [r3, #13]
 8007dea:	4b14      	ldr	r3, [pc, #80]	; (8007e3c <RadioSetModem+0xb4>)
 8007dec:	7b1b      	ldrb	r3, [r3, #12]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d01e      	beq.n	8007e30 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8007df2:	4b12      	ldr	r3, [pc, #72]	; (8007e3c <RadioSetModem+0xb4>)
 8007df4:	7b1a      	ldrb	r2, [r3, #12]
 8007df6:	4b11      	ldr	r3, [pc, #68]	; (8007e3c <RadioSetModem+0xb4>)
 8007df8:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8007dfa:	4b10      	ldr	r3, [pc, #64]	; (8007e3c <RadioSetModem+0xb4>)
 8007dfc:	7b5b      	ldrb	r3, [r3, #13]
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f000 ff86 	bl	8008d10 <RadioSetPublicNetwork>
        }
        break;
 8007e04:	e014      	b.n	8007e30 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8007e06:	2002      	movs	r0, #2
 8007e08:	f002 fae6 	bl	800a3d8 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007e0c:	4b0b      	ldr	r3, [pc, #44]	; (8007e3c <RadioSetModem+0xb4>)
 8007e0e:	2200      	movs	r2, #0
 8007e10:	735a      	strb	r2, [r3, #13]
        break;
 8007e12:	e00e      	b.n	8007e32 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8007e14:	2002      	movs	r0, #2
 8007e16:	f002 fadf 	bl	800a3d8 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007e1a:	4b08      	ldr	r3, [pc, #32]	; (8007e3c <RadioSetModem+0xb4>)
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	735a      	strb	r2, [r3, #13]
        break;
 8007e20:	e007      	b.n	8007e32 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8007e22:	2000      	movs	r0, #0
 8007e24:	f002 fad8 	bl	800a3d8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007e28:	4b04      	ldr	r3, [pc, #16]	; (8007e3c <RadioSetModem+0xb4>)
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	735a      	strb	r2, [r3, #13]
        break;
 8007e2e:	e000      	b.n	8007e32 <RadioSetModem+0xaa>
        break;
 8007e30:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8007e32:	bf00      	nop
 8007e34:	3708      	adds	r7, #8
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop
 8007e3c:	20000438 	.word	0x20000438

08007e40 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f002 fa7f 	bl	800a34c <SUBGRF_SetRfFrequency>
}
 8007e4e:	bf00      	nop
 8007e50:	3708      	adds	r7, #8
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}

08007e56 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b090      	sub	sp, #64	; 0x40
 8007e5a:	af0a      	add	r7, sp, #40	; 0x28
 8007e5c:	60f8      	str	r0, [r7, #12]
 8007e5e:	60b9      	str	r1, [r7, #8]
 8007e60:	603b      	str	r3, [r7, #0]
 8007e62:	4613      	mov	r3, r2
 8007e64:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8007e66:	2301      	movs	r3, #1
 8007e68:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	613b      	str	r3, [r7, #16]

    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8007e72:	f000 fddc 	bl	8008a2e <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8007e76:	2000      	movs	r0, #0
 8007e78:	f7ff ff86 	bl	8007d88 <RadioSetModem>

    RadioSetChannel( freq );
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f7ff ffdf 	bl	8007e40 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8007e82:	2301      	movs	r3, #1
 8007e84:	9309      	str	r3, [sp, #36]	; 0x24
 8007e86:	2300      	movs	r3, #0
 8007e88:	9308      	str	r3, [sp, #32]
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	9307      	str	r3, [sp, #28]
 8007e8e:	2300      	movs	r3, #0
 8007e90:	9306      	str	r3, [sp, #24]
 8007e92:	2300      	movs	r3, #0
 8007e94:	9305      	str	r3, [sp, #20]
 8007e96:	2300      	movs	r3, #0
 8007e98:	9304      	str	r3, [sp, #16]
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	9303      	str	r3, [sp, #12]
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	9302      	str	r3, [sp, #8]
 8007ea2:	2303      	movs	r3, #3
 8007ea4:	9301      	str	r3, [sp, #4]
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	9300      	str	r3, [sp, #0]
 8007eaa:	2300      	movs	r3, #0
 8007eac:	f44f 7216 	mov.w	r2, #600	; 0x258
 8007eb0:	68b9      	ldr	r1, [r7, #8]
 8007eb2:	2000      	movs	r0, #0
 8007eb4:	f000 f83c 	bl	8007f30 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8007eb8:	2000      	movs	r0, #0
 8007eba:	f000 fdbf 	bl	8008a3c <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8007ebe:	f000 ff55 	bl	8008d6c <RadioGetWakeupTime>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f7f8 ff79 	bl	8000dbc <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8007eca:	f004 fb4f 	bl	800c56c <UTIL_TIMER_GetCurrentTime>
 8007ece:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8007ed0:	e00d      	b.n	8007eee <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8007ed2:	2000      	movs	r0, #0
 8007ed4:	f000 fe9a 	bl	8008c0c <RadioRssi>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8007edc:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8007ee0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	dd02      	ble.n	8007eee <RadioIsChannelFree+0x98>
        {
            status = false;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	75fb      	strb	r3, [r7, #23]
            break;
 8007eec:	e006      	b.n	8007efc <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8007eee:	6938      	ldr	r0, [r7, #16]
 8007ef0:	f004 fb4e 	bl	800c590 <UTIL_TIMER_GetElapsedTime>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d8ea      	bhi.n	8007ed2 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8007efc:	f000 fd97 	bl	8008a2e <RadioStandby>

    return status;
 8007f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3718      	adds	r7, #24
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}

08007f0a <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b082      	sub	sp, #8
 8007f0e:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8007f10:	2300      	movs	r3, #0
 8007f12:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8007f14:	2300      	movs	r3, #0
 8007f16:	2200      	movs	r2, #0
 8007f18:	2100      	movs	r1, #0
 8007f1a:	2000      	movs	r0, #0
 8007f1c:	f002 f9ba 	bl	800a294 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8007f20:	f001 ff6f 	bl	8009e02 <SUBGRF_GetRandom>
 8007f24:	6078      	str	r0, [r7, #4]

    return rnd;
 8007f26:	687b      	ldr	r3, [r7, #4]
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3708      	adds	r7, #8
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b08a      	sub	sp, #40	; 0x28
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60b9      	str	r1, [r7, #8]
 8007f38:	607a      	str	r2, [r7, #4]
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	73fb      	strb	r3, [r7, #15]
 8007f40:	4613      	mov	r3, r2
 8007f42:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8007f44:	4ab9      	ldr	r2, [pc, #740]	; (800822c <RadioSetRxConfig+0x2fc>)
 8007f46:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8007f4a:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8007f4c:	f003 f829 	bl	800afa2 <RFW_DeInit>
    if( rxContinuous == true )
 8007f50:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d001      	beq.n	8007f5c <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8007f5c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d004      	beq.n	8007f6e <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8007f64:	4ab2      	ldr	r2, [pc, #712]	; (8008230 <RadioSetRxConfig+0x300>)
 8007f66:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8007f6a:	7013      	strb	r3, [r2, #0]
 8007f6c:	e002      	b.n	8007f74 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8007f6e:	4bb0      	ldr	r3, [pc, #704]	; (8008230 <RadioSetRxConfig+0x300>)
 8007f70:	22ff      	movs	r2, #255	; 0xff
 8007f72:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8007f74:	7bfb      	ldrb	r3, [r7, #15]
 8007f76:	2b05      	cmp	r3, #5
 8007f78:	d009      	beq.n	8007f8e <RadioSetRxConfig+0x5e>
 8007f7a:	2b05      	cmp	r3, #5
 8007f7c:	f300 81ca 	bgt.w	8008314 <RadioSetRxConfig+0x3e4>
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	f000 80bf 	beq.w	8008104 <RadioSetRxConfig+0x1d4>
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	f000 8124 	beq.w	80081d4 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8007f8c:	e1c2      	b.n	8008314 <RadioSetRxConfig+0x3e4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8007f8e:	2001      	movs	r0, #1
 8007f90:	f002 f87c 	bl	800a08c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007f94:	4ba5      	ldr	r3, [pc, #660]	; (800822c <RadioSetRxConfig+0x2fc>)
 8007f96:	2200      	movs	r2, #0
 8007f98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8007f9c:	4aa3      	ldr	r2, [pc, #652]	; (800822c <RadioSetRxConfig+0x2fc>)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8007fa2:	4ba2      	ldr	r3, [pc, #648]	; (800822c <RadioSetRxConfig+0x2fc>)
 8007fa4:	2209      	movs	r2, #9
 8007fa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8007faa:	4ba0      	ldr	r3, [pc, #640]	; (800822c <RadioSetRxConfig+0x2fc>)
 8007fac:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007fb0:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8007fb2:	68b8      	ldr	r0, [r7, #8]
 8007fb4:	f002 ff28 	bl	800ae08 <SUBGRF_GetFskBandwidthRegValue>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	461a      	mov	r2, r3
 8007fbc:	4b9b      	ldr	r3, [pc, #620]	; (800822c <RadioSetRxConfig+0x2fc>)
 8007fbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8007fc2:	4b9a      	ldr	r3, [pc, #616]	; (800822c <RadioSetRxConfig+0x2fc>)
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8007fc8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007fca:	00db      	lsls	r3, r3, #3
 8007fcc:	b29a      	uxth	r2, r3
 8007fce:	4b97      	ldr	r3, [pc, #604]	; (800822c <RadioSetRxConfig+0x2fc>)
 8007fd0:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8007fd2:	4b96      	ldr	r3, [pc, #600]	; (800822c <RadioSetRxConfig+0x2fc>)
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8007fd8:	4b94      	ldr	r3, [pc, #592]	; (800822c <RadioSetRxConfig+0x2fc>)
 8007fda:	2210      	movs	r2, #16
 8007fdc:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8007fde:	4b93      	ldr	r3, [pc, #588]	; (800822c <RadioSetRxConfig+0x2fc>)
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8007fe4:	4b91      	ldr	r3, [pc, #580]	; (800822c <RadioSetRxConfig+0x2fc>)
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8007fea:	4b91      	ldr	r3, [pc, #580]	; (8008230 <RadioSetRxConfig+0x300>)
 8007fec:	781a      	ldrb	r2, [r3, #0]
 8007fee:	4b8f      	ldr	r3, [pc, #572]	; (800822c <RadioSetRxConfig+0x2fc>)
 8007ff0:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8007ff2:	4b8e      	ldr	r3, [pc, #568]	; (800822c <RadioSetRxConfig+0x2fc>)
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8007ff8:	4b8c      	ldr	r3, [pc, #560]	; (800822c <RadioSetRxConfig+0x2fc>)
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8007ffe:	2005      	movs	r0, #5
 8008000:	f7ff fec2 	bl	8007d88 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008004:	488b      	ldr	r0, [pc, #556]	; (8008234 <RadioSetRxConfig+0x304>)
 8008006:	f002 fadb 	bl	800a5c0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800800a:	488b      	ldr	r0, [pc, #556]	; (8008238 <RadioSetRxConfig+0x308>)
 800800c:	f002 fbaa 	bl	800a764 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8008010:	4a8a      	ldr	r2, [pc, #552]	; (800823c <RadioSetRxConfig+0x30c>)
 8008012:	f107 031c 	add.w	r3, r7, #28
 8008016:	e892 0003 	ldmia.w	r2, {r0, r1}
 800801a:	e883 0003 	stmia.w	r3, {r0, r1}
 800801e:	f107 031c 	add.w	r3, r7, #28
 8008022:	4618      	mov	r0, r3
 8008024:	f001 fe6b 	bl	8009cfe <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8008028:	f240 10ff 	movw	r0, #511	; 0x1ff
 800802c:	f001 feb6 	bl	8009d9c <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8008030:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8008034:	f000 fe09 	bl	8008c4a <RadioRead>
 8008038:	4603      	mov	r3, r0
 800803a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 800803e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008042:	f023 0310 	bic.w	r3, r3, #16
 8008046:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 800804a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800804e:	4619      	mov	r1, r3
 8008050:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8008054:	f000 fde7 	bl	8008c26 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8008058:	2104      	movs	r1, #4
 800805a:	f640 00b9 	movw	r0, #2233	; 0x8b9
 800805e:	f000 fde2 	bl	8008c26 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8008062:	f640 009b 	movw	r0, #2203	; 0x89b
 8008066:	f000 fdf0 	bl	8008c4a <RadioRead>
 800806a:	4603      	mov	r3, r0
 800806c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8008070:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008074:	f023 031c 	bic.w	r3, r3, #28
 8008078:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 800807c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008080:	f043 0308 	orr.w	r3, r3, #8
 8008084:	b2db      	uxtb	r3, r3
 8008086:	4619      	mov	r1, r3
 8008088:	f640 009b 	movw	r0, #2203	; 0x89b
 800808c:	f000 fdcb 	bl	8008c26 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8008090:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8008094:	f000 fdd9 	bl	8008c4a <RadioRead>
 8008098:	4603      	mov	r3, r0
 800809a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800809e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080a2:	f023 0318 	bic.w	r3, r3, #24
 80080a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 80080aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080ae:	f043 0318 	orr.w	r3, r3, #24
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	4619      	mov	r1, r3
 80080b6:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80080ba:	f000 fdb4 	bl	8008c26 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 80080be:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80080c2:	f000 fdc2 	bl	8008c4a <RadioRead>
 80080c6:	4603      	mov	r3, r0
 80080c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 80080cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 80080d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080dc:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	4619      	mov	r1, r3
 80080e4:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80080e8:	f000 fd9d 	bl	8008c26 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80080ec:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80080ee:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80080f2:	fb02 f303 	mul.w	r3, r2, r3
 80080f6:	461a      	mov	r2, r3
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80080fe:	4a4b      	ldr	r2, [pc, #300]	; (800822c <RadioSetRxConfig+0x2fc>)
 8008100:	6093      	str	r3, [r2, #8]
            break;
 8008102:	e108      	b.n	8008316 <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8008104:	2000      	movs	r0, #0
 8008106:	f001 ffc1 	bl	800a08c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800810a:	4b48      	ldr	r3, [pc, #288]	; (800822c <RadioSetRxConfig+0x2fc>)
 800810c:	2200      	movs	r2, #0
 800810e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8008112:	4a46      	ldr	r2, [pc, #280]	; (800822c <RadioSetRxConfig+0x2fc>)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8008118:	4b44      	ldr	r3, [pc, #272]	; (800822c <RadioSetRxConfig+0x2fc>)
 800811a:	220b      	movs	r2, #11
 800811c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8008120:	68b8      	ldr	r0, [r7, #8]
 8008122:	f002 fe71 	bl	800ae08 <SUBGRF_GetFskBandwidthRegValue>
 8008126:	4603      	mov	r3, r0
 8008128:	461a      	mov	r2, r3
 800812a:	4b40      	ldr	r3, [pc, #256]	; (800822c <RadioSetRxConfig+0x2fc>)
 800812c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008130:	4b3e      	ldr	r3, [pc, #248]	; (800822c <RadioSetRxConfig+0x2fc>)
 8008132:	2200      	movs	r2, #0
 8008134:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8008136:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008138:	00db      	lsls	r3, r3, #3
 800813a:	b29a      	uxth	r2, r3
 800813c:	4b3b      	ldr	r3, [pc, #236]	; (800822c <RadioSetRxConfig+0x2fc>)
 800813e:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8008140:	4b3a      	ldr	r3, [pc, #232]	; (800822c <RadioSetRxConfig+0x2fc>)
 8008142:	2204      	movs	r2, #4
 8008144:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8008146:	4b39      	ldr	r3, [pc, #228]	; (800822c <RadioSetRxConfig+0x2fc>)
 8008148:	2218      	movs	r2, #24
 800814a:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800814c:	4b37      	ldr	r3, [pc, #220]	; (800822c <RadioSetRxConfig+0x2fc>)
 800814e:	2200      	movs	r2, #0
 8008150:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8008152:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008156:	f083 0301 	eor.w	r3, r3, #1
 800815a:	b2db      	uxtb	r3, r3
 800815c:	461a      	mov	r2, r3
 800815e:	4b33      	ldr	r3, [pc, #204]	; (800822c <RadioSetRxConfig+0x2fc>)
 8008160:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8008162:	4b33      	ldr	r3, [pc, #204]	; (8008230 <RadioSetRxConfig+0x300>)
 8008164:	781a      	ldrb	r2, [r3, #0]
 8008166:	4b31      	ldr	r3, [pc, #196]	; (800822c <RadioSetRxConfig+0x2fc>)
 8008168:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 800816a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800816e:	2b00      	cmp	r3, #0
 8008170:	d003      	beq.n	800817a <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8008172:	4b2e      	ldr	r3, [pc, #184]	; (800822c <RadioSetRxConfig+0x2fc>)
 8008174:	22f2      	movs	r2, #242	; 0xf2
 8008176:	75da      	strb	r2, [r3, #23]
 8008178:	e002      	b.n	8008180 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800817a:	4b2c      	ldr	r3, [pc, #176]	; (800822c <RadioSetRxConfig+0x2fc>)
 800817c:	2201      	movs	r2, #1
 800817e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8008180:	4b2a      	ldr	r3, [pc, #168]	; (800822c <RadioSetRxConfig+0x2fc>)
 8008182:	2201      	movs	r2, #1
 8008184:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8008186:	f000 fc52 	bl	8008a2e <RadioStandby>
            RadioSetModem( MODEM_FSK );
 800818a:	2000      	movs	r0, #0
 800818c:	f7ff fdfc 	bl	8007d88 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008190:	4828      	ldr	r0, [pc, #160]	; (8008234 <RadioSetRxConfig+0x304>)
 8008192:	f002 fa15 	bl	800a5c0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008196:	4828      	ldr	r0, [pc, #160]	; (8008238 <RadioSetRxConfig+0x308>)
 8008198:	f002 fae4 	bl	800a764 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800819c:	4a28      	ldr	r2, [pc, #160]	; (8008240 <RadioSetRxConfig+0x310>)
 800819e:	f107 0314 	add.w	r3, r7, #20
 80081a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80081a6:	e883 0003 	stmia.w	r3, {r0, r1}
 80081aa:	f107 0314 	add.w	r3, r7, #20
 80081ae:	4618      	mov	r0, r3
 80081b0:	f001 fda5 	bl	8009cfe <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80081b4:	f240 10ff 	movw	r0, #511	; 0x1ff
 80081b8:	f001 fdf0 	bl	8009d9c <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80081bc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80081be:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80081c2:	fb02 f303 	mul.w	r3, r2, r3
 80081c6:	461a      	mov	r2, r3
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ce:	4a17      	ldr	r2, [pc, #92]	; (800822c <RadioSetRxConfig+0x2fc>)
 80081d0:	6093      	str	r3, [r2, #8]
            break;
 80081d2:	e0a0      	b.n	8008316 <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80081d4:	2000      	movs	r0, #0
 80081d6:	f001 ff59 	bl	800a08c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80081da:	4b14      	ldr	r3, [pc, #80]	; (800822c <RadioSetRxConfig+0x2fc>)
 80081dc:	2201      	movs	r2, #1
 80081de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	b2da      	uxtb	r2, r3
 80081e6:	4b11      	ldr	r3, [pc, #68]	; (800822c <RadioSetRxConfig+0x2fc>)
 80081e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80081ec:	4a15      	ldr	r2, [pc, #84]	; (8008244 <RadioSetRxConfig+0x314>)
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	4413      	add	r3, r2
 80081f2:	781a      	ldrb	r2, [r3, #0]
 80081f4:	4b0d      	ldr	r3, [pc, #52]	; (800822c <RadioSetRxConfig+0x2fc>)
 80081f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 80081fa:	4a0c      	ldr	r2, [pc, #48]	; (800822c <RadioSetRxConfig+0x2fc>)
 80081fc:	7bbb      	ldrb	r3, [r7, #14]
 80081fe:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d105      	bne.n	8008214 <RadioSetRxConfig+0x2e4>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2b0b      	cmp	r3, #11
 800820c:	d008      	beq.n	8008220 <RadioSetRxConfig+0x2f0>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2b0c      	cmp	r3, #12
 8008212:	d005      	beq.n	8008220 <RadioSetRxConfig+0x2f0>
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	2b01      	cmp	r3, #1
 8008218:	d116      	bne.n	8008248 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2b0c      	cmp	r3, #12
 800821e:	d113      	bne.n	8008248 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8008220:	4b02      	ldr	r3, [pc, #8]	; (800822c <RadioSetRxConfig+0x2fc>)
 8008222:	2201      	movs	r2, #1
 8008224:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8008228:	e012      	b.n	8008250 <RadioSetRxConfig+0x320>
 800822a:	bf00      	nop
 800822c:	20000438 	.word	0x20000438
 8008230:	20000008 	.word	0x20000008
 8008234:	20000470 	.word	0x20000470
 8008238:	20000446 	.word	0x20000446
 800823c:	0800dda0 	.word	0x0800dda0
 8008240:	0800dda8 	.word	0x0800dda8
 8008244:	0800e188 	.word	0x0800e188
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8008248:	4b35      	ldr	r3, [pc, #212]	; (8008320 <RadioSetRxConfig+0x3f0>)
 800824a:	2200      	movs	r2, #0
 800824c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008250:	4b33      	ldr	r3, [pc, #204]	; (8008320 <RadioSetRxConfig+0x3f0>)
 8008252:	2201      	movs	r2, #1
 8008254:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8008256:	4b32      	ldr	r3, [pc, #200]	; (8008320 <RadioSetRxConfig+0x3f0>)
 8008258:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800825c:	2b05      	cmp	r3, #5
 800825e:	d004      	beq.n	800826a <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8008260:	4b2f      	ldr	r3, [pc, #188]	; (8008320 <RadioSetRxConfig+0x3f0>)
 8008262:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8008266:	2b06      	cmp	r3, #6
 8008268:	d10a      	bne.n	8008280 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 800826a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800826c:	2b0b      	cmp	r3, #11
 800826e:	d803      	bhi.n	8008278 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8008270:	4b2b      	ldr	r3, [pc, #172]	; (8008320 <RadioSetRxConfig+0x3f0>)
 8008272:	220c      	movs	r2, #12
 8008274:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8008276:	e006      	b.n	8008286 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8008278:	4a29      	ldr	r2, [pc, #164]	; (8008320 <RadioSetRxConfig+0x3f0>)
 800827a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800827c:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 800827e:	e002      	b.n	8008286 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8008280:	4a27      	ldr	r2, [pc, #156]	; (8008320 <RadioSetRxConfig+0x3f0>)
 8008282:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008284:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8008286:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800828a:	4b25      	ldr	r3, [pc, #148]	; (8008320 <RadioSetRxConfig+0x3f0>)
 800828c:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800828e:	4b25      	ldr	r3, [pc, #148]	; (8008324 <RadioSetRxConfig+0x3f4>)
 8008290:	781a      	ldrb	r2, [r3, #0]
 8008292:	4b23      	ldr	r3, [pc, #140]	; (8008320 <RadioSetRxConfig+0x3f0>)
 8008294:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8008296:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 800829a:	4b21      	ldr	r3, [pc, #132]	; (8008320 <RadioSetRxConfig+0x3f0>)
 800829c:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80082a0:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80082a4:	4b1e      	ldr	r3, [pc, #120]	; (8008320 <RadioSetRxConfig+0x3f0>)
 80082a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80082aa:	f000 fbc0 	bl	8008a2e <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80082ae:	2001      	movs	r0, #1
 80082b0:	f7ff fd6a 	bl	8007d88 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80082b4:	481c      	ldr	r0, [pc, #112]	; (8008328 <RadioSetRxConfig+0x3f8>)
 80082b6:	f002 f983 	bl	800a5c0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80082ba:	481c      	ldr	r0, [pc, #112]	; (800832c <RadioSetRxConfig+0x3fc>)
 80082bc:	f002 fa52 	bl	800a764 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80082c0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	4618      	mov	r0, r3
 80082c6:	f001 fef0 	bl	800a0aa <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80082ca:	4b15      	ldr	r3, [pc, #84]	; (8008320 <RadioSetRxConfig+0x3f0>)
 80082cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d10d      	bne.n	80082f0 <RadioSetRxConfig+0x3c0>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80082d4:	f240 7036 	movw	r0, #1846	; 0x736
 80082d8:	f002 fba0 	bl	800aa1c <SUBGRF_ReadRegister>
 80082dc:	4603      	mov	r3, r0
 80082de:	f023 0304 	bic.w	r3, r3, #4
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	4619      	mov	r1, r3
 80082e6:	f240 7036 	movw	r0, #1846	; 0x736
 80082ea:	f002 fb83 	bl	800a9f4 <SUBGRF_WriteRegister>
 80082ee:	e00c      	b.n	800830a <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 80082f0:	f240 7036 	movw	r0, #1846	; 0x736
 80082f4:	f002 fb92 	bl	800aa1c <SUBGRF_ReadRegister>
 80082f8:	4603      	mov	r3, r0
 80082fa:	f043 0304 	orr.w	r3, r3, #4
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	4619      	mov	r1, r3
 8008302:	f240 7036 	movw	r0, #1846	; 0x736
 8008306:	f002 fb75 	bl	800a9f4 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 800830a:	4b05      	ldr	r3, [pc, #20]	; (8008320 <RadioSetRxConfig+0x3f0>)
 800830c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008310:	609a      	str	r2, [r3, #8]
            break;
 8008312:	e000      	b.n	8008316 <RadioSetRxConfig+0x3e6>
            break;
 8008314:	bf00      	nop
    }
}
 8008316:	bf00      	nop
 8008318:	3728      	adds	r7, #40	; 0x28
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop
 8008320:	20000438 	.word	0x20000438
 8008324:	20000008 	.word	0x20000008
 8008328:	20000470 	.word	0x20000470
 800832c:	20000446 	.word	0x20000446

08008330 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b086      	sub	sp, #24
 8008334:	af00      	add	r7, sp, #0
 8008336:	60ba      	str	r2, [r7, #8]
 8008338:	607b      	str	r3, [r7, #4]
 800833a:	4603      	mov	r3, r0
 800833c:	73fb      	strb	r3, [r7, #15]
 800833e:	460b      	mov	r3, r1
 8008340:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8008342:	f002 fe2e 	bl	800afa2 <RFW_DeInit>
    switch( modem )
 8008346:	7bfb      	ldrb	r3, [r7, #15]
 8008348:	2b04      	cmp	r3, #4
 800834a:	f000 80c7 	beq.w	80084dc <RadioSetTxConfig+0x1ac>
 800834e:	2b04      	cmp	r3, #4
 8008350:	f300 80d6 	bgt.w	8008500 <RadioSetTxConfig+0x1d0>
 8008354:	2b00      	cmp	r3, #0
 8008356:	d002      	beq.n	800835e <RadioSetTxConfig+0x2e>
 8008358:	2b01      	cmp	r3, #1
 800835a:	d059      	beq.n	8008410 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 800835c:	e0d0      	b.n	8008500 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800835e:	4b74      	ldr	r3, [pc, #464]	; (8008530 <RadioSetTxConfig+0x200>)
 8008360:	2200      	movs	r2, #0
 8008362:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8008366:	4a72      	ldr	r2, [pc, #456]	; (8008530 <RadioSetTxConfig+0x200>)
 8008368:	6a3b      	ldr	r3, [r7, #32]
 800836a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800836c:	4b70      	ldr	r3, [pc, #448]	; (8008530 <RadioSetTxConfig+0x200>)
 800836e:	220b      	movs	r2, #11
 8008370:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f002 fd47 	bl	800ae08 <SUBGRF_GetFskBandwidthRegValue>
 800837a:	4603      	mov	r3, r0
 800837c:	461a      	mov	r2, r3
 800837e:	4b6c      	ldr	r3, [pc, #432]	; (8008530 <RadioSetTxConfig+0x200>)
 8008380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8008384:	4a6a      	ldr	r2, [pc, #424]	; (8008530 <RadioSetTxConfig+0x200>)
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800838a:	4b69      	ldr	r3, [pc, #420]	; (8008530 <RadioSetTxConfig+0x200>)
 800838c:	2200      	movs	r2, #0
 800838e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8008390:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008392:	00db      	lsls	r3, r3, #3
 8008394:	b29a      	uxth	r2, r3
 8008396:	4b66      	ldr	r3, [pc, #408]	; (8008530 <RadioSetTxConfig+0x200>)
 8008398:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800839a:	4b65      	ldr	r3, [pc, #404]	; (8008530 <RadioSetTxConfig+0x200>)
 800839c:	2204      	movs	r2, #4
 800839e:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 80083a0:	4b63      	ldr	r3, [pc, #396]	; (8008530 <RadioSetTxConfig+0x200>)
 80083a2:	2218      	movs	r2, #24
 80083a4:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80083a6:	4b62      	ldr	r3, [pc, #392]	; (8008530 <RadioSetTxConfig+0x200>)
 80083a8:	2200      	movs	r2, #0
 80083aa:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80083ac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80083b0:	f083 0301 	eor.w	r3, r3, #1
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	461a      	mov	r2, r3
 80083b8:	4b5d      	ldr	r3, [pc, #372]	; (8008530 <RadioSetTxConfig+0x200>)
 80083ba:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 80083bc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d003      	beq.n	80083cc <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80083c4:	4b5a      	ldr	r3, [pc, #360]	; (8008530 <RadioSetTxConfig+0x200>)
 80083c6:	22f2      	movs	r2, #242	; 0xf2
 80083c8:	75da      	strb	r2, [r3, #23]
 80083ca:	e002      	b.n	80083d2 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80083cc:	4b58      	ldr	r3, [pc, #352]	; (8008530 <RadioSetTxConfig+0x200>)
 80083ce:	2201      	movs	r2, #1
 80083d0:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80083d2:	4b57      	ldr	r3, [pc, #348]	; (8008530 <RadioSetTxConfig+0x200>)
 80083d4:	2201      	movs	r2, #1
 80083d6:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80083d8:	f000 fb29 	bl	8008a2e <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 80083dc:	2000      	movs	r0, #0
 80083de:	f7ff fcd3 	bl	8007d88 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80083e2:	4854      	ldr	r0, [pc, #336]	; (8008534 <RadioSetTxConfig+0x204>)
 80083e4:	f002 f8ec 	bl	800a5c0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80083e8:	4853      	ldr	r0, [pc, #332]	; (8008538 <RadioSetTxConfig+0x208>)
 80083ea:	f002 f9bb 	bl	800a764 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80083ee:	4a53      	ldr	r2, [pc, #332]	; (800853c <RadioSetTxConfig+0x20c>)
 80083f0:	f107 0310 	add.w	r3, r7, #16
 80083f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80083f8:	e883 0003 	stmia.w	r3, {r0, r1}
 80083fc:	f107 0310 	add.w	r3, r7, #16
 8008400:	4618      	mov	r0, r3
 8008402:	f001 fc7c 	bl	8009cfe <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8008406:	f240 10ff 	movw	r0, #511	; 0x1ff
 800840a:	f001 fcc7 	bl	8009d9c <SUBGRF_SetWhiteningSeed>
            break;
 800840e:	e078      	b.n	8008502 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8008410:	4b47      	ldr	r3, [pc, #284]	; (8008530 <RadioSetTxConfig+0x200>)
 8008412:	2201      	movs	r2, #1
 8008414:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8008418:	6a3b      	ldr	r3, [r7, #32]
 800841a:	b2da      	uxtb	r2, r3
 800841c:	4b44      	ldr	r3, [pc, #272]	; (8008530 <RadioSetTxConfig+0x200>)
 800841e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8008422:	4a47      	ldr	r2, [pc, #284]	; (8008540 <RadioSetTxConfig+0x210>)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	4413      	add	r3, r2
 8008428:	781a      	ldrb	r2, [r3, #0]
 800842a:	4b41      	ldr	r3, [pc, #260]	; (8008530 <RadioSetTxConfig+0x200>)
 800842c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8008430:	4a3f      	ldr	r2, [pc, #252]	; (8008530 <RadioSetTxConfig+0x200>)
 8008432:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008436:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d105      	bne.n	800844c <RadioSetTxConfig+0x11c>
 8008440:	6a3b      	ldr	r3, [r7, #32]
 8008442:	2b0b      	cmp	r3, #11
 8008444:	d008      	beq.n	8008458 <RadioSetTxConfig+0x128>
 8008446:	6a3b      	ldr	r3, [r7, #32]
 8008448:	2b0c      	cmp	r3, #12
 800844a:	d005      	beq.n	8008458 <RadioSetTxConfig+0x128>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2b01      	cmp	r3, #1
 8008450:	d107      	bne.n	8008462 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8008452:	6a3b      	ldr	r3, [r7, #32]
 8008454:	2b0c      	cmp	r3, #12
 8008456:	d104      	bne.n	8008462 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8008458:	4b35      	ldr	r3, [pc, #212]	; (8008530 <RadioSetTxConfig+0x200>)
 800845a:	2201      	movs	r2, #1
 800845c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8008460:	e003      	b.n	800846a <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8008462:	4b33      	ldr	r3, [pc, #204]	; (8008530 <RadioSetTxConfig+0x200>)
 8008464:	2200      	movs	r2, #0
 8008466:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800846a:	4b31      	ldr	r3, [pc, #196]	; (8008530 <RadioSetTxConfig+0x200>)
 800846c:	2201      	movs	r2, #1
 800846e:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8008470:	4b2f      	ldr	r3, [pc, #188]	; (8008530 <RadioSetTxConfig+0x200>)
 8008472:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008476:	2b05      	cmp	r3, #5
 8008478:	d004      	beq.n	8008484 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 800847a:	4b2d      	ldr	r3, [pc, #180]	; (8008530 <RadioSetTxConfig+0x200>)
 800847c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8008480:	2b06      	cmp	r3, #6
 8008482:	d10a      	bne.n	800849a <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8008484:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008486:	2b0b      	cmp	r3, #11
 8008488:	d803      	bhi.n	8008492 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800848a:	4b29      	ldr	r3, [pc, #164]	; (8008530 <RadioSetTxConfig+0x200>)
 800848c:	220c      	movs	r2, #12
 800848e:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8008490:	e006      	b.n	80084a0 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8008492:	4a27      	ldr	r2, [pc, #156]	; (8008530 <RadioSetTxConfig+0x200>)
 8008494:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008496:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8008498:	e002      	b.n	80084a0 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800849a:	4a25      	ldr	r2, [pc, #148]	; (8008530 <RadioSetTxConfig+0x200>)
 800849c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800849e:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80084a0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80084a4:	4b22      	ldr	r3, [pc, #136]	; (8008530 <RadioSetTxConfig+0x200>)
 80084a6:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80084a8:	4b26      	ldr	r3, [pc, #152]	; (8008544 <RadioSetTxConfig+0x214>)
 80084aa:	781a      	ldrb	r2, [r3, #0]
 80084ac:	4b20      	ldr	r3, [pc, #128]	; (8008530 <RadioSetTxConfig+0x200>)
 80084ae:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80084b0:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80084b4:	4b1e      	ldr	r3, [pc, #120]	; (8008530 <RadioSetTxConfig+0x200>)
 80084b6:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80084ba:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80084be:	4b1c      	ldr	r3, [pc, #112]	; (8008530 <RadioSetTxConfig+0x200>)
 80084c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80084c4:	f000 fab3 	bl	8008a2e <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80084c8:	2001      	movs	r0, #1
 80084ca:	f7ff fc5d 	bl	8007d88 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80084ce:	4819      	ldr	r0, [pc, #100]	; (8008534 <RadioSetTxConfig+0x204>)
 80084d0:	f002 f876 	bl	800a5c0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80084d4:	4818      	ldr	r0, [pc, #96]	; (8008538 <RadioSetTxConfig+0x208>)
 80084d6:	f002 f945 	bl	800a764 <SUBGRF_SetPacketParams>
            break;
 80084da:	e012      	b.n	8008502 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 80084dc:	2004      	movs	r0, #4
 80084de:	f7ff fc53 	bl	8007d88 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80084e2:	4b13      	ldr	r3, [pc, #76]	; (8008530 <RadioSetTxConfig+0x200>)
 80084e4:	2202      	movs	r2, #2
 80084e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 80084ea:	4a11      	ldr	r2, [pc, #68]	; (8008530 <RadioSetTxConfig+0x200>)
 80084ec:	6a3b      	ldr	r3, [r7, #32]
 80084ee:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80084f0:	4b0f      	ldr	r3, [pc, #60]	; (8008530 <RadioSetTxConfig+0x200>)
 80084f2:	2216      	movs	r2, #22
 80084f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80084f8:	480e      	ldr	r0, [pc, #56]	; (8008534 <RadioSetTxConfig+0x204>)
 80084fa:	f002 f861 	bl	800a5c0 <SUBGRF_SetModulationParams>
            break;
 80084fe:	e000      	b.n	8008502 <RadioSetTxConfig+0x1d2>
            break;
 8008500:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8008502:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008506:	4618      	mov	r0, r3
 8008508:	f002 fb90 	bl	800ac2c <SUBGRF_SetRfTxPower>
 800850c:	4603      	mov	r3, r0
 800850e:	461a      	mov	r2, r3
 8008510:	4b07      	ldr	r3, [pc, #28]	; (8008530 <RadioSetTxConfig+0x200>)
 8008512:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 8008516:	4b06      	ldr	r3, [pc, #24]	; (8008530 <RadioSetTxConfig+0x200>)
 8008518:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800851c:	4618      	mov	r0, r3
 800851e:	f002 fd54 	bl	800afca <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8008522:	4a03      	ldr	r2, [pc, #12]	; (8008530 <RadioSetTxConfig+0x200>)
 8008524:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008526:	6053      	str	r3, [r2, #4]
}
 8008528:	bf00      	nop
 800852a:	3718      	adds	r7, #24
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}
 8008530:	20000438 	.word	0x20000438
 8008534:	20000470 	.word	0x20000470
 8008538:	20000446 	.word	0x20000446
 800853c:	0800dda8 	.word	0x0800dda8
 8008540:	0800e188 	.word	0x0800e188
 8008544:	20000008 	.word	0x20000008

08008548 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
    return true;
 8008550:	2301      	movs	r3, #1
}
 8008552:	4618      	mov	r0, r3
 8008554:	370c      	adds	r7, #12
 8008556:	46bd      	mov	sp, r7
 8008558:	bc80      	pop	{r7}
 800855a:	4770      	bx	lr

0800855c <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 800855c:	b480      	push	{r7}
 800855e:	b085      	sub	sp, #20
 8008560:	af00      	add	r7, sp, #0
 8008562:	4603      	mov	r3, r0
 8008564:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8008566:	2300      	movs	r3, #0
 8008568:	60fb      	str	r3, [r7, #12]

    switch( bw )
 800856a:	79fb      	ldrb	r3, [r7, #7]
 800856c:	2b0a      	cmp	r3, #10
 800856e:	d83e      	bhi.n	80085ee <RadioGetLoRaBandwidthInHz+0x92>
 8008570:	a201      	add	r2, pc, #4	; (adr r2, 8008578 <RadioGetLoRaBandwidthInHz+0x1c>)
 8008572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008576:	bf00      	nop
 8008578:	080085a5 	.word	0x080085a5
 800857c:	080085b5 	.word	0x080085b5
 8008580:	080085c5 	.word	0x080085c5
 8008584:	080085d5 	.word	0x080085d5
 8008588:	080085dd 	.word	0x080085dd
 800858c:	080085e3 	.word	0x080085e3
 8008590:	080085e9 	.word	0x080085e9
 8008594:	080085ef 	.word	0x080085ef
 8008598:	080085ad 	.word	0x080085ad
 800859c:	080085bd 	.word	0x080085bd
 80085a0:	080085cd 	.word	0x080085cd
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 80085a4:	f641 6384 	movw	r3, #7812	; 0x1e84
 80085a8:	60fb      	str	r3, [r7, #12]
        break;
 80085aa:	e020      	b.n	80085ee <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 80085ac:	f642 03b1 	movw	r3, #10417	; 0x28b1
 80085b0:	60fb      	str	r3, [r7, #12]
        break;
 80085b2:	e01c      	b.n	80085ee <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 80085b4:	f643 5309 	movw	r3, #15625	; 0x3d09
 80085b8:	60fb      	str	r3, [r7, #12]
        break;
 80085ba:	e018      	b.n	80085ee <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 80085bc:	f245 1361 	movw	r3, #20833	; 0x5161
 80085c0:	60fb      	str	r3, [r7, #12]
        break;
 80085c2:	e014      	b.n	80085ee <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 80085c4:	f647 2312 	movw	r3, #31250	; 0x7a12
 80085c8:	60fb      	str	r3, [r7, #12]
        break;
 80085ca:	e010      	b.n	80085ee <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 80085cc:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 80085d0:	60fb      	str	r3, [r7, #12]
        break;
 80085d2:	e00c      	b.n	80085ee <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 80085d4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80085d8:	60fb      	str	r3, [r7, #12]
        break;
 80085da:	e008      	b.n	80085ee <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 80085dc:	4b07      	ldr	r3, [pc, #28]	; (80085fc <RadioGetLoRaBandwidthInHz+0xa0>)
 80085de:	60fb      	str	r3, [r7, #12]
        break;
 80085e0:	e005      	b.n	80085ee <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 80085e2:	4b07      	ldr	r3, [pc, #28]	; (8008600 <RadioGetLoRaBandwidthInHz+0xa4>)
 80085e4:	60fb      	str	r3, [r7, #12]
        break;
 80085e6:	e002      	b.n	80085ee <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 80085e8:	4b06      	ldr	r3, [pc, #24]	; (8008604 <RadioGetLoRaBandwidthInHz+0xa8>)
 80085ea:	60fb      	str	r3, [r7, #12]
        break;
 80085ec:	bf00      	nop
    }

    return bandwidthInHz;
 80085ee:	68fb      	ldr	r3, [r7, #12]
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3714      	adds	r7, #20
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bc80      	pop	{r7}
 80085f8:	4770      	bx	lr
 80085fa:	bf00      	nop
 80085fc:	0001e848 	.word	0x0001e848
 8008600:	0003d090 	.word	0x0003d090
 8008604:	0007a120 	.word	0x0007a120

08008608 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	4608      	mov	r0, r1
 8008612:	4611      	mov	r1, r2
 8008614:	461a      	mov	r2, r3
 8008616:	4603      	mov	r3, r0
 8008618:	70fb      	strb	r3, [r7, #3]
 800861a:	460b      	mov	r3, r1
 800861c:	803b      	strh	r3, [r7, #0]
 800861e:	4613      	mov	r3, r2
 8008620:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 8008622:	883b      	ldrh	r3, [r7, #0]
 8008624:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8008626:	78ba      	ldrb	r2, [r7, #2]
 8008628:	f082 0201 	eor.w	r2, r2, #1
 800862c:	b2d2      	uxtb	r2, r2
 800862e:	2a00      	cmp	r2, #0
 8008630:	d001      	beq.n	8008636 <RadioGetGfskTimeOnAirNumerator+0x2e>
 8008632:	2208      	movs	r2, #8
 8008634:	e000      	b.n	8008638 <RadioGetGfskTimeOnAirNumerator+0x30>
 8008636:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8008638:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800863a:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800863e:	7c3b      	ldrb	r3, [r7, #16]
 8008640:	7d39      	ldrb	r1, [r7, #20]
 8008642:	2900      	cmp	r1, #0
 8008644:	d001      	beq.n	800864a <RadioGetGfskTimeOnAirNumerator+0x42>
 8008646:	2102      	movs	r1, #2
 8008648:	e000      	b.n	800864c <RadioGetGfskTimeOnAirNumerator+0x44>
 800864a:	2100      	movs	r1, #0
 800864c:	440b      	add	r3, r1
 800864e:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8008650:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 8008652:	4618      	mov	r0, r3
 8008654:	370c      	adds	r7, #12
 8008656:	46bd      	mov	sp, r7
 8008658:	bc80      	pop	{r7}
 800865a:	4770      	bx	lr

0800865c <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800865c:	b480      	push	{r7}
 800865e:	b08b      	sub	sp, #44	; 0x2c
 8008660:	af00      	add	r7, sp, #0
 8008662:	60f8      	str	r0, [r7, #12]
 8008664:	60b9      	str	r1, [r7, #8]
 8008666:	4611      	mov	r1, r2
 8008668:	461a      	mov	r2, r3
 800866a:	460b      	mov	r3, r1
 800866c:	71fb      	strb	r3, [r7, #7]
 800866e:	4613      	mov	r3, r2
 8008670:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8008672:	79fb      	ldrb	r3, [r7, #7]
 8008674:	3304      	adds	r3, #4
 8008676:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8008678:	2300      	movs	r3, #0
 800867a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	2b05      	cmp	r3, #5
 8008682:	d002      	beq.n	800868a <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	2b06      	cmp	r3, #6
 8008688:	d104      	bne.n	8008694 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 800868a:	88bb      	ldrh	r3, [r7, #4]
 800868c:	2b0b      	cmp	r3, #11
 800868e:	d801      	bhi.n	8008694 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8008690:	230c      	movs	r3, #12
 8008692:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d105      	bne.n	80086a6 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	2b0b      	cmp	r3, #11
 800869e:	d008      	beq.n	80086b2 <RadioGetLoRaTimeOnAirNumerator+0x56>
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	2b0c      	cmp	r3, #12
 80086a4:	d005      	beq.n	80086b2 <RadioGetLoRaTimeOnAirNumerator+0x56>
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d105      	bne.n	80086b8 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	2b0c      	cmp	r3, #12
 80086b0:	d102      	bne.n	80086b8 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 80086b2:	2301      	movs	r3, #1
 80086b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80086b8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80086bc:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 80086be:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80086c2:	2a00      	cmp	r2, #0
 80086c4:	d001      	beq.n	80086ca <RadioGetLoRaTimeOnAirNumerator+0x6e>
 80086c6:	2210      	movs	r2, #16
 80086c8:	e000      	b.n	80086cc <RadioGetLoRaTimeOnAirNumerator+0x70>
 80086ca:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80086cc:	4413      	add	r3, r2
 80086ce:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 80086d4:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 80086d6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80086da:	2a00      	cmp	r2, #0
 80086dc:	d001      	beq.n	80086e2 <RadioGetLoRaTimeOnAirNumerator+0x86>
 80086de:	2200      	movs	r2, #0
 80086e0:	e000      	b.n	80086e4 <RadioGetLoRaTimeOnAirNumerator+0x88>
 80086e2:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 80086e4:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80086e6:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	2b06      	cmp	r3, #6
 80086ec:	d803      	bhi.n	80086f6 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	009b      	lsls	r3, r3, #2
 80086f2:	623b      	str	r3, [r7, #32]
 80086f4:	e00e      	b.n	8008714 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 80086f6:	69fb      	ldr	r3, [r7, #28]
 80086f8:	3308      	adds	r3, #8
 80086fa:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 80086fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008700:	2b00      	cmp	r3, #0
 8008702:	d004      	beq.n	800870e <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	3b02      	subs	r3, #2
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	623b      	str	r3, [r7, #32]
 800870c:	e002      	b.n	8008714 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8008714:	69fb      	ldr	r3, [r7, #28]
 8008716:	2b00      	cmp	r3, #0
 8008718:	da01      	bge.n	800871e <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 800871a:	2300      	movs	r3, #0
 800871c:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800871e:	69fa      	ldr	r2, [r7, #28]
 8008720:	6a3b      	ldr	r3, [r7, #32]
 8008722:	4413      	add	r3, r2
 8008724:	1e5a      	subs	r2, r3, #1
 8008726:	6a3b      	ldr	r3, [r7, #32]
 8008728:	fb92 f3f3 	sdiv	r3, r2, r3
 800872c:	697a      	ldr	r2, [r7, #20]
 800872e:	fb03 f202 	mul.w	r2, r3, r2
 8008732:	88bb      	ldrh	r3, [r7, #4]
 8008734:	4413      	add	r3, r2
    int32_t intermediate =
 8008736:	330c      	adds	r3, #12
 8008738:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	2b06      	cmp	r3, #6
 800873e:	d802      	bhi.n	8008746 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8008740:	69bb      	ldr	r3, [r7, #24]
 8008742:	3302      	adds	r3, #2
 8008744:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8008746:	69bb      	ldr	r3, [r7, #24]
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	1c5a      	adds	r2, r3, #1
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	3b02      	subs	r3, #2
 8008750:	fa02 f303 	lsl.w	r3, r2, r3
}
 8008754:	4618      	mov	r0, r3
 8008756:	372c      	adds	r7, #44	; 0x2c
 8008758:	46bd      	mov	sp, r7
 800875a:	bc80      	pop	{r7}
 800875c:	4770      	bx	lr
	...

08008760 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b08a      	sub	sp, #40	; 0x28
 8008764:	af04      	add	r7, sp, #16
 8008766:	60b9      	str	r1, [r7, #8]
 8008768:	607a      	str	r2, [r7, #4]
 800876a:	461a      	mov	r2, r3
 800876c:	4603      	mov	r3, r0
 800876e:	73fb      	strb	r3, [r7, #15]
 8008770:	4613      	mov	r3, r2
 8008772:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8008774:	2300      	movs	r3, #0
 8008776:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8008778:	2301      	movs	r3, #1
 800877a:	613b      	str	r3, [r7, #16]

    switch( modem )
 800877c:	7bfb      	ldrb	r3, [r7, #15]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d002      	beq.n	8008788 <RadioTimeOnAir+0x28>
 8008782:	2b01      	cmp	r3, #1
 8008784:	d017      	beq.n	80087b6 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8008786:	e035      	b.n	80087f4 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8008788:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 800878c:	8c3a      	ldrh	r2, [r7, #32]
 800878e:	7bb9      	ldrb	r1, [r7, #14]
 8008790:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008794:	9301      	str	r3, [sp, #4]
 8008796:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800879a:	9300      	str	r3, [sp, #0]
 800879c:	4603      	mov	r3, r0
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f7ff ff32 	bl	8008608 <RadioGetGfskTimeOnAirNumerator>
 80087a4:	4603      	mov	r3, r0
 80087a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80087aa:	fb02 f303 	mul.w	r3, r2, r3
 80087ae:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	613b      	str	r3, [r7, #16]
        break;
 80087b4:	e01e      	b.n	80087f4 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 80087b6:	8c39      	ldrh	r1, [r7, #32]
 80087b8:	7bba      	ldrb	r2, [r7, #14]
 80087ba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80087be:	9302      	str	r3, [sp, #8]
 80087c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80087c4:	9301      	str	r3, [sp, #4]
 80087c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80087ca:	9300      	str	r3, [sp, #0]
 80087cc:	460b      	mov	r3, r1
 80087ce:	6879      	ldr	r1, [r7, #4]
 80087d0:	68b8      	ldr	r0, [r7, #8]
 80087d2:	f7ff ff43 	bl	800865c <RadioGetLoRaTimeOnAirNumerator>
 80087d6:	4603      	mov	r3, r0
 80087d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80087dc:	fb02 f303 	mul.w	r3, r2, r3
 80087e0:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 80087e2:	4a0a      	ldr	r2, [pc, #40]	; (800880c <RadioTimeOnAir+0xac>)
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	4413      	add	r3, r2
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	4618      	mov	r0, r3
 80087ec:	f7ff feb6 	bl	800855c <RadioGetLoRaBandwidthInHz>
 80087f0:	6138      	str	r0, [r7, #16]
        break;
 80087f2:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 80087f4:	697a      	ldr	r2, [r7, #20]
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	4413      	add	r3, r2
 80087fa:	1e5a      	subs	r2, r3, #1
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8008802:	4618      	mov	r0, r3
 8008804:	3718      	adds	r7, #24
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
 800880a:	bf00      	nop
 800880c:	0800e188 	.word	0x0800e188

08008810 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	460b      	mov	r3, r1
 800881a:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 800881c:	2300      	movs	r3, #0
 800881e:	2200      	movs	r2, #0
 8008820:	f240 2101 	movw	r1, #513	; 0x201
 8008824:	f240 2001 	movw	r0, #513	; 0x201
 8008828:	f001 fd34 	bl	800a294 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800882c:	4b71      	ldr	r3, [pc, #452]	; (80089f4 <RadioSend+0x1e4>)
 800882e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008832:	2101      	movs	r1, #1
 8008834:	4618      	mov	r0, r3
 8008836:	f002 f9d1 	bl	800abdc <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 800883a:	4b6e      	ldr	r3, [pc, #440]	; (80089f4 <RadioSend+0x1e4>)
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	2b01      	cmp	r3, #1
 8008840:	d112      	bne.n	8008868 <RadioSend+0x58>
 8008842:	4b6c      	ldr	r3, [pc, #432]	; (80089f4 <RadioSend+0x1e4>)
 8008844:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008848:	2b06      	cmp	r3, #6
 800884a:	d10d      	bne.n	8008868 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 800884c:	f640 0089 	movw	r0, #2185	; 0x889
 8008850:	f002 f8e4 	bl	800aa1c <SUBGRF_ReadRegister>
 8008854:	4603      	mov	r3, r0
 8008856:	f023 0304 	bic.w	r3, r3, #4
 800885a:	b2db      	uxtb	r3, r3
 800885c:	4619      	mov	r1, r3
 800885e:	f640 0089 	movw	r0, #2185	; 0x889
 8008862:	f002 f8c7 	bl	800a9f4 <SUBGRF_WriteRegister>
 8008866:	e00c      	b.n	8008882 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8008868:	f640 0089 	movw	r0, #2185	; 0x889
 800886c:	f002 f8d6 	bl	800aa1c <SUBGRF_ReadRegister>
 8008870:	4603      	mov	r3, r0
 8008872:	f043 0304 	orr.w	r3, r3, #4
 8008876:	b2db      	uxtb	r3, r3
 8008878:	4619      	mov	r1, r3
 800887a:	f640 0089 	movw	r0, #2185	; 0x889
 800887e:	f002 f8b9 	bl	800a9f4 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch( SubgRf.Modem )
 8008882:	4b5c      	ldr	r3, [pc, #368]	; (80089f4 <RadioSend+0x1e4>)
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	2b04      	cmp	r3, #4
 8008888:	f200 80a7 	bhi.w	80089da <RadioSend+0x1ca>
 800888c:	a201      	add	r2, pc, #4	; (adr r2, 8008894 <RadioSend+0x84>)
 800888e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008892:	bf00      	nop
 8008894:	080088c3 	.word	0x080088c3
 8008898:	080088a9 	.word	0x080088a9
 800889c:	080088c3 	.word	0x080088c3
 80088a0:	08008923 	.word	0x08008923
 80088a4:	08008943 	.word	0x08008943
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 80088a8:	4a52      	ldr	r2, [pc, #328]	; (80089f4 <RadioSend+0x1e4>)
 80088aa:	78fb      	ldrb	r3, [r7, #3]
 80088ac:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80088ae:	4852      	ldr	r0, [pc, #328]	; (80089f8 <RadioSend+0x1e8>)
 80088b0:	f001 ff58 	bl	800a764 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80088b4:	78fb      	ldrb	r3, [r7, #3]
 80088b6:	2200      	movs	r2, #0
 80088b8:	4619      	mov	r1, r3
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f001 fa0c 	bl	8009cd8 <SUBGRF_SendPayload>
            break;
 80088c0:	e08c      	b.n	80089dc <RadioSend+0x1cc>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 80088c2:	f002 fb74 	bl	800afae <RFW_Is_Init>
 80088c6:	4603      	mov	r3, r0
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d11d      	bne.n	8008908 <RadioSend+0xf8>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 80088cc:	f107 020d 	add.w	r2, r7, #13
 80088d0:	78fb      	ldrb	r3, [r7, #3]
 80088d2:	4619      	mov	r1, r3
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f002 fb82 	bl	800afde <RFW_TransmitInit>
 80088da:	4603      	mov	r3, r0
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d10c      	bne.n	80088fa <RadioSend+0xea>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 80088e0:	7b7a      	ldrb	r2, [r7, #13]
 80088e2:	4b44      	ldr	r3, [pc, #272]	; (80089f4 <RadioSend+0x1e4>)
 80088e4:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80088e6:	4844      	ldr	r0, [pc, #272]	; (80089f8 <RadioSend+0x1e8>)
 80088e8:	f001 ff3c 	bl	800a764 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 80088ec:	7b7b      	ldrb	r3, [r7, #13]
 80088ee:	2200      	movs	r2, #0
 80088f0:	4619      	mov	r1, r3
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f001 f9f0 	bl	8009cd8 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 80088f8:	e070      	b.n	80089dc <RadioSend+0x1cc>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 80088fa:	4b40      	ldr	r3, [pc, #256]	; (80089fc <RadioSend+0x1ec>)
 80088fc:	2201      	movs	r2, #1
 80088fe:	2100      	movs	r1, #0
 8008900:	2002      	movs	r0, #2
 8008902:	f003 ff11 	bl	800c728 <UTIL_ADV_TRACE_COND_FSend>
 8008906:	e072      	b.n	80089ee <RadioSend+0x1de>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8008908:	4a3a      	ldr	r2, [pc, #232]	; (80089f4 <RadioSend+0x1e4>)
 800890a:	78fb      	ldrb	r3, [r7, #3]
 800890c:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800890e:	483a      	ldr	r0, [pc, #232]	; (80089f8 <RadioSend+0x1e8>)
 8008910:	f001 ff28 	bl	800a764 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8008914:	78fb      	ldrb	r3, [r7, #3]
 8008916:	2200      	movs	r2, #0
 8008918:	4619      	mov	r1, r3
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f001 f9dc 	bl	8009cd8 <SUBGRF_SendPayload>
            break;
 8008920:	e05c      	b.n	80089dc <RadioSend+0x1cc>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8008922:	4b34      	ldr	r3, [pc, #208]	; (80089f4 <RadioSend+0x1e4>)
 8008924:	2202      	movs	r2, #2
 8008926:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8008928:	4a32      	ldr	r2, [pc, #200]	; (80089f4 <RadioSend+0x1e4>)
 800892a:	78fb      	ldrb	r3, [r7, #3]
 800892c:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800892e:	4832      	ldr	r0, [pc, #200]	; (80089f8 <RadioSend+0x1e8>)
 8008930:	f001 ff18 	bl	800a764 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8008934:	78fb      	ldrb	r3, [r7, #3]
 8008936:	2200      	movs	r2, #0
 8008938:	4619      	mov	r1, r3
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f001 f9cc 	bl	8009cd8 <SUBGRF_SendPayload>
            break;
 8008940:	e04c      	b.n	80089dc <RadioSend+0x1cc>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8008942:	78fb      	ldrb	r3, [r7, #3]
 8008944:	461a      	mov	r2, r3
 8008946:	6879      	ldr	r1, [r7, #4]
 8008948:	482d      	ldr	r0, [pc, #180]	; (8008a00 <RadioSend+0x1f0>)
 800894a:	f000 fcbc 	bl	80092c6 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800894e:	4b29      	ldr	r3, [pc, #164]	; (80089f4 <RadioSend+0x1e4>)
 8008950:	2202      	movs	r2, #2
 8008952:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8008954:	78fb      	ldrb	r3, [r7, #3]
 8008956:	3301      	adds	r3, #1
 8008958:	b2da      	uxtb	r2, r3
 800895a:	4b26      	ldr	r3, [pc, #152]	; (80089f4 <RadioSend+0x1e4>)
 800895c:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800895e:	4826      	ldr	r0, [pc, #152]	; (80089f8 <RadioSend+0x1e8>)
 8008960:	f001 ff00 	bl	800a764 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8008964:	2100      	movs	r1, #0
 8008966:	20f1      	movs	r0, #241	; 0xf1
 8008968:	f000 f95d 	bl	8008c26 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 800896c:	2100      	movs	r1, #0
 800896e:	20f0      	movs	r0, #240	; 0xf0
 8008970:	f000 f959 	bl	8008c26 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8008974:	4b1f      	ldr	r3, [pc, #124]	; (80089f4 <RadioSend+0x1e4>)
 8008976:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008978:	2b64      	cmp	r3, #100	; 0x64
 800897a:	d108      	bne.n	800898e <RadioSend+0x17e>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 800897c:	2170      	movs	r1, #112	; 0x70
 800897e:	20f3      	movs	r0, #243	; 0xf3
 8008980:	f000 f951 	bl	8008c26 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8008984:	211d      	movs	r1, #29
 8008986:	20f2      	movs	r0, #242	; 0xf2
 8008988:	f000 f94d 	bl	8008c26 <RadioWrite>
 800898c:	e007      	b.n	800899e <RadioSend+0x18e>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 800898e:	21e1      	movs	r1, #225	; 0xe1
 8008990:	20f3      	movs	r0, #243	; 0xf3
 8008992:	f000 f948 	bl	8008c26 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8008996:	2104      	movs	r1, #4
 8008998:	20f2      	movs	r0, #242	; 0xf2
 800899a:	f000 f944 	bl	8008c26 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 800899e:	78fb      	ldrb	r3, [r7, #3]
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	00db      	lsls	r3, r3, #3
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	3302      	adds	r3, #2
 80089a8:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 80089aa:	89fb      	ldrh	r3, [r7, #14]
 80089ac:	0a1b      	lsrs	r3, r3, #8
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	4619      	mov	r1, r3
 80089b4:	20f4      	movs	r0, #244	; 0xf4
 80089b6:	f000 f936 	bl	8008c26 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 80089ba:	89fb      	ldrh	r3, [r7, #14]
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	4619      	mov	r1, r3
 80089c0:	20f5      	movs	r0, #245	; 0xf5
 80089c2:	f000 f930 	bl	8008c26 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 80089c6:	78fb      	ldrb	r3, [r7, #3]
 80089c8:	3301      	adds	r3, #1
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80089d0:	4619      	mov	r1, r3
 80089d2:	480b      	ldr	r0, [pc, #44]	; (8008a00 <RadioSend+0x1f0>)
 80089d4:	f001 f980 	bl	8009cd8 <SUBGRF_SendPayload>
            break;
 80089d8:	e000      	b.n	80089dc <RadioSend+0x1cc>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 80089da:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 80089dc:	4b05      	ldr	r3, [pc, #20]	; (80089f4 <RadioSend+0x1e4>)
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	4619      	mov	r1, r3
 80089e2:	4808      	ldr	r0, [pc, #32]	; (8008a04 <RadioSend+0x1f4>)
 80089e4:	f003 fd18 	bl	800c418 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80089e8:	4806      	ldr	r0, [pc, #24]	; (8008a04 <RadioSend+0x1f4>)
 80089ea:	f003 fc37 	bl	800c25c <UTIL_TIMER_Start>
}
 80089ee:	3710      	adds	r7, #16
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}
 80089f4:	20000438 	.word	0x20000438
 80089f8:	20000446 	.word	0x20000446
 80089fc:	0800ddb0 	.word	0x0800ddb0
 8008a00:	20000334 	.word	0x20000334
 8008a04:	20000494 	.word	0x20000494

08008a08 <RadioSleep>:

static void RadioSleep( void )
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8008a0e:	2300      	movs	r3, #0
 8008a10:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8008a12:	793b      	ldrb	r3, [r7, #4]
 8008a14:	f043 0304 	orr.w	r3, r3, #4
 8008a18:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8008a1a:	7938      	ldrb	r0, [r7, #4]
 8008a1c:	f001 fa38 	bl	8009e90 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8008a20:	2002      	movs	r0, #2
 8008a22:	f7f8 f9cb 	bl	8000dbc <HAL_Delay>
}
 8008a26:	bf00      	nop
 8008a28:	3708      	adds	r7, #8
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}

08008a2e <RadioStandby>:

static void RadioStandby( void )
{
 8008a2e:	b580      	push	{r7, lr}
 8008a30:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8008a32:	2000      	movs	r0, #0
 8008a34:	f001 fa5e 	bl	8009ef4 <SUBGRF_SetStandby>
}
 8008a38:	bf00      	nop
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init( ) )
 8008a44:	f002 fab3 	bl	800afae <RFW_Is_Init>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d102      	bne.n	8008a54 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8008a4e:	f002 fad6 	bl	800affe <RFW_ReceiveInit>
 8008a52:	e007      	b.n	8008a64 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8008a54:	2300      	movs	r3, #0
 8008a56:	2200      	movs	r2, #0
 8008a58:	f240 2162 	movw	r1, #610	; 0x262
 8008a5c:	f240 2062 	movw	r0, #610	; 0x262
 8008a60:	f001 fc18 	bl	800a294 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d006      	beq.n	8008a78 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8008a6a:	6879      	ldr	r1, [r7, #4]
 8008a6c:	4811      	ldr	r0, [pc, #68]	; (8008ab4 <RadioRx+0x78>)
 8008a6e:	f003 fcd3 	bl	800c418 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8008a72:	4810      	ldr	r0, [pc, #64]	; (8008ab4 <RadioRx+0x78>)
 8008a74:	f003 fbf2 	bl	800c25c <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8008a78:	4b0f      	ldr	r3, [pc, #60]	; (8008ab8 <RadioRx+0x7c>)
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008a7e:	4b0e      	ldr	r3, [pc, #56]	; (8008ab8 <RadioRx+0x7c>)
 8008a80:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008a84:	2100      	movs	r1, #0
 8008a86:	4618      	mov	r0, r3
 8008a88:	f002 f8a8 	bl	800abdc <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8008a8c:	4b0a      	ldr	r3, [pc, #40]	; (8008ab8 <RadioRx+0x7c>)
 8008a8e:	785b      	ldrb	r3, [r3, #1]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d004      	beq.n	8008a9e <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8008a94:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8008a98:	f001 fa68 	bl	8009f6c <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8008a9c:	e005      	b.n	8008aaa <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8008a9e:	4b06      	ldr	r3, [pc, #24]	; (8008ab8 <RadioRx+0x7c>)
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	019b      	lsls	r3, r3, #6
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f001 fa61 	bl	8009f6c <SUBGRF_SetRx>
}
 8008aaa:	bf00      	nop
 8008aac:	3708      	adds	r7, #8
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	200004ac 	.word	0x200004ac
 8008ab8:	20000438 	.word	0x20000438

08008abc <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init() )
 8008ac4:	f002 fa73 	bl	800afae <RFW_Is_Init>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d102      	bne.n	8008ad4 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8008ace:	f002 fa96 	bl	800affe <RFW_ReceiveInit>
 8008ad2:	e007      	b.n	8008ae4 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	f240 2162 	movw	r1, #610	; 0x262
 8008adc:	f240 2062 	movw	r0, #610	; 0x262
 8008ae0:	f001 fbd8 	bl	800a294 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d006      	beq.n	8008af8 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8008aea:	6879      	ldr	r1, [r7, #4]
 8008aec:	4811      	ldr	r0, [pc, #68]	; (8008b34 <RadioRxBoosted+0x78>)
 8008aee:	f003 fc93 	bl	800c418 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8008af2:	4810      	ldr	r0, [pc, #64]	; (8008b34 <RadioRxBoosted+0x78>)
 8008af4:	f003 fbb2 	bl	800c25c <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8008af8:	4b0f      	ldr	r3, [pc, #60]	; (8008b38 <RadioRxBoosted+0x7c>)
 8008afa:	2200      	movs	r2, #0
 8008afc:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008afe:	4b0e      	ldr	r3, [pc, #56]	; (8008b38 <RadioRxBoosted+0x7c>)
 8008b00:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008b04:	2100      	movs	r1, #0
 8008b06:	4618      	mov	r0, r3
 8008b08:	f002 f868 	bl	800abdc <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8008b0c:	4b0a      	ldr	r3, [pc, #40]	; (8008b38 <RadioRxBoosted+0x7c>)
 8008b0e:	785b      	ldrb	r3, [r3, #1]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d004      	beq.n	8008b1e <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8008b14:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8008b18:	f001 fa48 	bl	8009fac <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8008b1c:	e005      	b.n	8008b2a <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8008b1e:	4b06      	ldr	r3, [pc, #24]	; (8008b38 <RadioRxBoosted+0x7c>)
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	019b      	lsls	r3, r3, #6
 8008b24:	4618      	mov	r0, r3
 8008b26:	f001 fa41 	bl	8009fac <SUBGRF_SetRxBoosted>
}
 8008b2a:	bf00      	nop
 8008b2c:	3708      	adds	r7, #8
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	200004ac 	.word	0x200004ac
 8008b38:	20000438 	.word	0x20000438

08008b3c <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b082      	sub	sp, #8
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	005a      	lsls	r2, r3, #1
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	4a0c      	ldr	r2, [pc, #48]	; (8008b80 <RadioSetRxDutyCycle+0x44>)
 8008b50:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8008b52:	2300      	movs	r3, #0
 8008b54:	2200      	movs	r2, #0
 8008b56:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008b5a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008b5e:	f001 fb99 	bl	800a294 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008b62:	4b07      	ldr	r3, [pc, #28]	; (8008b80 <RadioSetRxDutyCycle+0x44>)
 8008b64:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008b68:	2100      	movs	r1, #0
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f002 f836 	bl	800abdc <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8008b70:	6839      	ldr	r1, [r7, #0]
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f001 fa3e 	bl	8009ff4 <SUBGRF_SetRxDutyCycle>
}
 8008b78:	bf00      	nop
 8008b7a:	3708      	adds	r7, #8
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}
 8008b80:	20000438 	.word	0x20000438

08008b84 <RadioStartCad>:

static void RadioStartCad( void )
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008b88:	4b09      	ldr	r3, [pc, #36]	; (8008bb0 <RadioStartCad+0x2c>)
 8008b8a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008b8e:	2100      	movs	r1, #0
 8008b90:	4618      	mov	r0, r3
 8008b92:	f002 f823 	bl	800abdc <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8008b96:	2300      	movs	r3, #0
 8008b98:	2200      	movs	r2, #0
 8008b9a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8008b9e:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8008ba2:	f001 fb77 	bl	800a294 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8008ba6:	f001 fa51 	bl	800a04c <SUBGRF_SetCad>
}
 8008baa:	bf00      	nop
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	bf00      	nop
 8008bb0:	20000438 	.word	0x20000438

08008bb4 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b084      	sub	sp, #16
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	460b      	mov	r3, r1
 8008bbe:	70fb      	strb	r3, [r7, #3]
 8008bc0:	4613      	mov	r3, r2
 8008bc2:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 8008bc4:	883b      	ldrh	r3, [r7, #0]
 8008bc6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008bca:	fb02 f303 	mul.w	r3, r2, r3
 8008bce:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f001 fbbb 	bl	800a34c <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8008bd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f002 f826 	bl	800ac2c <SUBGRF_SetRfTxPower>
 8008be0:	4603      	mov	r3, r0
 8008be2:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8008be4:	7afb      	ldrb	r3, [r7, #11]
 8008be6:	2101      	movs	r1, #1
 8008be8:	4618      	mov	r0, r3
 8008bea:	f001 fff7 	bl	800abdc <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8008bee:	f001 fa3b 	bl	800a068 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8008bf2:	68f9      	ldr	r1, [r7, #12]
 8008bf4:	4804      	ldr	r0, [pc, #16]	; (8008c08 <RadioSetTxContinuousWave+0x54>)
 8008bf6:	f003 fc0f 	bl	800c418 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8008bfa:	4803      	ldr	r0, [pc, #12]	; (8008c08 <RadioSetTxContinuousWave+0x54>)
 8008bfc:	f003 fb2e 	bl	800c25c <UTIL_TIMER_Start>
}
 8008c00:	bf00      	nop
 8008c02:	3710      	adds	r7, #16
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}
 8008c08:	20000494 	.word	0x20000494

08008c0c <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	4603      	mov	r3, r0
 8008c14:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8008c16:	f001 fe5a 	bl	800a8ce <SUBGRF_GetRssiInst>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	b21b      	sxth	r3, r3
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3708      	adds	r7, #8
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}

08008c26 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8008c26:	b580      	push	{r7, lr}
 8008c28:	b082      	sub	sp, #8
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	460a      	mov	r2, r1
 8008c30:	80fb      	strh	r3, [r7, #6]
 8008c32:	4613      	mov	r3, r2
 8008c34:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8008c36:	797a      	ldrb	r2, [r7, #5]
 8008c38:	88fb      	ldrh	r3, [r7, #6]
 8008c3a:	4611      	mov	r1, r2
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f001 fed9 	bl	800a9f4 <SUBGRF_WriteRegister>
}
 8008c42:	bf00      	nop
 8008c44:	3708      	adds	r7, #8
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}

08008c4a <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8008c4a:	b580      	push	{r7, lr}
 8008c4c:	b082      	sub	sp, #8
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	4603      	mov	r3, r0
 8008c52:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8008c54:	88fb      	ldrh	r3, [r7, #6]
 8008c56:	4618      	mov	r0, r3
 8008c58:	f001 fee0 	bl	800aa1c <SUBGRF_ReadRegister>
 8008c5c:	4603      	mov	r3, r0
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3708      	adds	r7, #8
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}

08008c66 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8008c66:	b580      	push	{r7, lr}
 8008c68:	b082      	sub	sp, #8
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	6039      	str	r1, [r7, #0]
 8008c70:	80fb      	strh	r3, [r7, #6]
 8008c72:	4613      	mov	r3, r2
 8008c74:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8008c76:	797b      	ldrb	r3, [r7, #5]
 8008c78:	b29a      	uxth	r2, r3
 8008c7a:	88fb      	ldrh	r3, [r7, #6]
 8008c7c:	6839      	ldr	r1, [r7, #0]
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f001 fee0 	bl	800aa44 <SUBGRF_WriteRegisters>
}
 8008c84:	bf00      	nop
 8008c86:	3708      	adds	r7, #8
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	4603      	mov	r3, r0
 8008c94:	6039      	str	r1, [r7, #0]
 8008c96:	80fb      	strh	r3, [r7, #6]
 8008c98:	4613      	mov	r3, r2
 8008c9a:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8008c9c:	797b      	ldrb	r3, [r7, #5]
 8008c9e:	b29a      	uxth	r2, r3
 8008ca0:	88fb      	ldrh	r3, [r7, #6]
 8008ca2:	6839      	ldr	r1, [r7, #0]
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f001 feef 	bl	800aa88 <SUBGRF_ReadRegisters>
}
 8008caa:	bf00      	nop
 8008cac:	3708      	adds	r7, #8
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
	...

08008cb4 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b082      	sub	sp, #8
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	4603      	mov	r3, r0
 8008cbc:	460a      	mov	r2, r1
 8008cbe:	71fb      	strb	r3, [r7, #7]
 8008cc0:	4613      	mov	r3, r2
 8008cc2:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8008cc4:	79fb      	ldrb	r3, [r7, #7]
 8008cc6:	2b01      	cmp	r3, #1
 8008cc8:	d10a      	bne.n	8008ce0 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8008cca:	4a0e      	ldr	r2, [pc, #56]	; (8008d04 <RadioSetMaxPayloadLength+0x50>)
 8008ccc:	79bb      	ldrb	r3, [r7, #6]
 8008cce:	7013      	strb	r3, [r2, #0]
 8008cd0:	4b0c      	ldr	r3, [pc, #48]	; (8008d04 <RadioSetMaxPayloadLength+0x50>)
 8008cd2:	781a      	ldrb	r2, [r3, #0]
 8008cd4:	4b0c      	ldr	r3, [pc, #48]	; (8008d08 <RadioSetMaxPayloadLength+0x54>)
 8008cd6:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008cd8:	480c      	ldr	r0, [pc, #48]	; (8008d0c <RadioSetMaxPayloadLength+0x58>)
 8008cda:	f001 fd43 	bl	800a764 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8008cde:	e00d      	b.n	8008cfc <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8008ce0:	4b09      	ldr	r3, [pc, #36]	; (8008d08 <RadioSetMaxPayloadLength+0x54>)
 8008ce2:	7d5b      	ldrb	r3, [r3, #21]
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d109      	bne.n	8008cfc <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8008ce8:	4a06      	ldr	r2, [pc, #24]	; (8008d04 <RadioSetMaxPayloadLength+0x50>)
 8008cea:	79bb      	ldrb	r3, [r7, #6]
 8008cec:	7013      	strb	r3, [r2, #0]
 8008cee:	4b05      	ldr	r3, [pc, #20]	; (8008d04 <RadioSetMaxPayloadLength+0x50>)
 8008cf0:	781a      	ldrb	r2, [r3, #0]
 8008cf2:	4b05      	ldr	r3, [pc, #20]	; (8008d08 <RadioSetMaxPayloadLength+0x54>)
 8008cf4:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008cf6:	4805      	ldr	r0, [pc, #20]	; (8008d0c <RadioSetMaxPayloadLength+0x58>)
 8008cf8:	f001 fd34 	bl	800a764 <SUBGRF_SetPacketParams>
}
 8008cfc:	bf00      	nop
 8008cfe:	3708      	adds	r7, #8
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}
 8008d04:	20000008 	.word	0x20000008
 8008d08:	20000438 	.word	0x20000438
 8008d0c:	20000446 	.word	0x20000446

08008d10 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	4603      	mov	r3, r0
 8008d18:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8008d1a:	4a13      	ldr	r2, [pc, #76]	; (8008d68 <RadioSetPublicNetwork+0x58>)
 8008d1c:	79fb      	ldrb	r3, [r7, #7]
 8008d1e:	7313      	strb	r3, [r2, #12]
 8008d20:	4b11      	ldr	r3, [pc, #68]	; (8008d68 <RadioSetPublicNetwork+0x58>)
 8008d22:	7b1a      	ldrb	r2, [r3, #12]
 8008d24:	4b10      	ldr	r3, [pc, #64]	; (8008d68 <RadioSetPublicNetwork+0x58>)
 8008d26:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8008d28:	2001      	movs	r0, #1
 8008d2a:	f7ff f82d 	bl	8007d88 <RadioSetModem>
    if( enable == true )
 8008d2e:	79fb      	ldrb	r3, [r7, #7]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d00a      	beq.n	8008d4a <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8008d34:	2134      	movs	r1, #52	; 0x34
 8008d36:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8008d3a:	f001 fe5b 	bl	800a9f4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8008d3e:	2144      	movs	r1, #68	; 0x44
 8008d40:	f240 7041 	movw	r0, #1857	; 0x741
 8008d44:	f001 fe56 	bl	800a9f4 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8008d48:	e009      	b.n	8008d5e <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8008d4a:	2114      	movs	r1, #20
 8008d4c:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8008d50:	f001 fe50 	bl	800a9f4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8008d54:	2124      	movs	r1, #36	; 0x24
 8008d56:	f240 7041 	movw	r0, #1857	; 0x741
 8008d5a:	f001 fe4b 	bl	800a9f4 <SUBGRF_WriteRegister>
}
 8008d5e:	bf00      	nop
 8008d60:	3708      	adds	r7, #8
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	bf00      	nop
 8008d68:	20000438 	.word	0x20000438

08008d6c <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8008d70:	f001 ff90 	bl	800ac94 <SUBGRF_GetRadioWakeUpTime>
 8008d74:	4603      	mov	r3, r0
 8008d76:	3303      	adds	r3, #3
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8008d84:	f000 f80e 	bl	8008da4 <RadioOnTxTimeoutProcess>
}
 8008d88:	bf00      	nop
 8008d8a:	3708      	adds	r7, #8
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b082      	sub	sp, #8
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8008d98:	f000 f818 	bl	8008dcc <RadioOnRxTimeoutProcess>
}
 8008d9c:	bf00      	nop
 8008d9e:	3708      	adds	r7, #8
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8008da8:	4b07      	ldr	r3, [pc, #28]	; (8008dc8 <RadioOnTxTimeoutProcess+0x24>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d008      	beq.n	8008dc2 <RadioOnTxTimeoutProcess+0x1e>
 8008db0:	4b05      	ldr	r3, [pc, #20]	; (8008dc8 <RadioOnTxTimeoutProcess+0x24>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d003      	beq.n	8008dc2 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8008dba:	4b03      	ldr	r3, [pc, #12]	; (8008dc8 <RadioOnTxTimeoutProcess+0x24>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	4798      	blx	r3
    }
}
 8008dc2:	bf00      	nop
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop
 8008dc8:	20000434 	.word	0x20000434

08008dcc <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8008dd0:	4b07      	ldr	r3, [pc, #28]	; (8008df0 <RadioOnRxTimeoutProcess+0x24>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d008      	beq.n	8008dea <RadioOnRxTimeoutProcess+0x1e>
 8008dd8:	4b05      	ldr	r3, [pc, #20]	; (8008df0 <RadioOnRxTimeoutProcess+0x24>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	68db      	ldr	r3, [r3, #12]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d003      	beq.n	8008dea <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8008de2:	4b03      	ldr	r3, [pc, #12]	; (8008df0 <RadioOnRxTimeoutProcess+0x24>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	68db      	ldr	r3, [r3, #12]
 8008de8:	4798      	blx	r3
    }
}
 8008dea:	bf00      	nop
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	20000434 	.word	0x20000434

08008df4 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b082      	sub	sp, #8
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8008dfe:	4a05      	ldr	r2, [pc, #20]	; (8008e14 <RadioOnDioIrq+0x20>)
 8008e00:	88fb      	ldrh	r3, [r7, #6]
 8008e02:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 8008e06:	f000 f807 	bl	8008e18 <RadioIrqProcess>
}
 8008e0a:	bf00      	nop
 8008e0c:	3708      	adds	r7, #8
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop
 8008e14:	20000438 	.word	0x20000438

08008e18 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8008e18:	b590      	push	{r4, r7, lr}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8008e22:	2300      	movs	r3, #0
 8008e24:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8008e26:	4ba8      	ldr	r3, [pc, #672]	; (80090c8 <RadioIrqProcess+0x2b0>)
 8008e28:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e30:	f000 810c 	beq.w	800904c <RadioIrqProcess+0x234>
 8008e34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e38:	f300 81e8 	bgt.w	800920c <RadioIrqProcess+0x3f4>
 8008e3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e40:	f000 80f0 	beq.w	8009024 <RadioIrqProcess+0x20c>
 8008e44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e48:	f300 81e0 	bgt.w	800920c <RadioIrqProcess+0x3f4>
 8008e4c:	2b80      	cmp	r3, #128	; 0x80
 8008e4e:	f000 80d5 	beq.w	8008ffc <RadioIrqProcess+0x1e4>
 8008e52:	2b80      	cmp	r3, #128	; 0x80
 8008e54:	f300 81da 	bgt.w	800920c <RadioIrqProcess+0x3f4>
 8008e58:	2b20      	cmp	r3, #32
 8008e5a:	dc49      	bgt.n	8008ef0 <RadioIrqProcess+0xd8>
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	f340 81d5 	ble.w	800920c <RadioIrqProcess+0x3f4>
 8008e62:	3b01      	subs	r3, #1
 8008e64:	2b1f      	cmp	r3, #31
 8008e66:	f200 81d1 	bhi.w	800920c <RadioIrqProcess+0x3f4>
 8008e6a:	a201      	add	r2, pc, #4	; (adr r2, 8008e70 <RadioIrqProcess+0x58>)
 8008e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e70:	08008ef9 	.word	0x08008ef9
 8008e74:	08008f33 	.word	0x08008f33
 8008e78:	0800920d 	.word	0x0800920d
 8008e7c:	080090e9 	.word	0x080090e9
 8008e80:	0800920d 	.word	0x0800920d
 8008e84:	0800920d 	.word	0x0800920d
 8008e88:	0800920d 	.word	0x0800920d
 8008e8c:	08009165 	.word	0x08009165
 8008e90:	0800920d 	.word	0x0800920d
 8008e94:	0800920d 	.word	0x0800920d
 8008e98:	0800920d 	.word	0x0800920d
 8008e9c:	0800920d 	.word	0x0800920d
 8008ea0:	0800920d 	.word	0x0800920d
 8008ea4:	0800920d 	.word	0x0800920d
 8008ea8:	0800920d 	.word	0x0800920d
 8008eac:	08009181 	.word	0x08009181
 8008eb0:	0800920d 	.word	0x0800920d
 8008eb4:	0800920d 	.word	0x0800920d
 8008eb8:	0800920d 	.word	0x0800920d
 8008ebc:	0800920d 	.word	0x0800920d
 8008ec0:	0800920d 	.word	0x0800920d
 8008ec4:	0800920d 	.word	0x0800920d
 8008ec8:	0800920d 	.word	0x0800920d
 8008ecc:	0800920d 	.word	0x0800920d
 8008ed0:	0800920d 	.word	0x0800920d
 8008ed4:	0800920d 	.word	0x0800920d
 8008ed8:	0800920d 	.word	0x0800920d
 8008edc:	0800920d 	.word	0x0800920d
 8008ee0:	0800920d 	.word	0x0800920d
 8008ee4:	0800920d 	.word	0x0800920d
 8008ee8:	0800920d 	.word	0x0800920d
 8008eec:	0800918f 	.word	0x0800918f
 8008ef0:	2b40      	cmp	r3, #64	; 0x40
 8008ef2:	f000 816d 	beq.w	80091d0 <RadioIrqProcess+0x3b8>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 8008ef6:	e189      	b.n	800920c <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 8008ef8:	4874      	ldr	r0, [pc, #464]	; (80090cc <RadioIrqProcess+0x2b4>)
 8008efa:	f003 fa1d 	bl	800c338 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8008efe:	2000      	movs	r0, #0
 8008f00:	f000 fff8 	bl	8009ef4 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8008f04:	f002 f85a 	bl	800afbc <RFW_Is_LongPacketModeEnabled>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d101      	bne.n	8008f12 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8008f0e:	f002 f87e 	bl	800b00e <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8008f12:	4b6f      	ldr	r3, [pc, #444]	; (80090d0 <RadioIrqProcess+0x2b8>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	f000 817a 	beq.w	8009210 <RadioIrqProcess+0x3f8>
 8008f1c:	4b6c      	ldr	r3, [pc, #432]	; (80090d0 <RadioIrqProcess+0x2b8>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	f000 8174 	beq.w	8009210 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 8008f28:	4b69      	ldr	r3, [pc, #420]	; (80090d0 <RadioIrqProcess+0x2b8>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4798      	blx	r3
        break;
 8008f30:	e16e      	b.n	8009210 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 8008f32:	4868      	ldr	r0, [pc, #416]	; (80090d4 <RadioIrqProcess+0x2bc>)
 8008f34:	f003 fa00 	bl	800c338 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8008f38:	4b63      	ldr	r3, [pc, #396]	; (80090c8 <RadioIrqProcess+0x2b0>)
 8008f3a:	785b      	ldrb	r3, [r3, #1]
 8008f3c:	f083 0301 	eor.w	r3, r3, #1
 8008f40:	b2db      	uxtb	r3, r3
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d014      	beq.n	8008f70 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8008f46:	2000      	movs	r0, #0
 8008f48:	f000 ffd4 	bl	8009ef4 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8008f4c:	2100      	movs	r1, #0
 8008f4e:	f640 1002 	movw	r0, #2306	; 0x902
 8008f52:	f001 fd4f 	bl	800a9f4 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8008f56:	f640 1044 	movw	r0, #2372	; 0x944
 8008f5a:	f001 fd5f 	bl	800aa1c <SUBGRF_ReadRegister>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	f043 0302 	orr.w	r3, r3, #2
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	4619      	mov	r1, r3
 8008f68:	f640 1044 	movw	r0, #2372	; 0x944
 8008f6c:	f001 fd42 	bl	800a9f4 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8008f70:	1dfb      	adds	r3, r7, #7
 8008f72:	22ff      	movs	r2, #255	; 0xff
 8008f74:	4619      	mov	r1, r3
 8008f76:	4858      	ldr	r0, [pc, #352]	; (80090d8 <RadioIrqProcess+0x2c0>)
 8008f78:	f000 fe8c 	bl	8009c94 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8008f7c:	4857      	ldr	r0, [pc, #348]	; (80090dc <RadioIrqProcess+0x2c4>)
 8008f7e:	f001 fce7 	bl	800a950 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8008f82:	4b53      	ldr	r3, [pc, #332]	; (80090d0 <RadioIrqProcess+0x2b8>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d036      	beq.n	8008ff8 <RadioIrqProcess+0x1e0>
 8008f8a:	4b51      	ldr	r3, [pc, #324]	; (80090d0 <RadioIrqProcess+0x2b8>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	689b      	ldr	r3, [r3, #8]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d031      	beq.n	8008ff8 <RadioIrqProcess+0x1e0>
            switch( SubgRf.PacketStatus.packetType )
 8008f94:	4b4c      	ldr	r3, [pc, #304]	; (80090c8 <RadioIrqProcess+0x2b0>)
 8008f96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	d10e      	bne.n	8008fbc <RadioIrqProcess+0x1a4>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 8008f9e:	4b4c      	ldr	r3, [pc, #304]	; (80090d0 <RadioIrqProcess+0x2b8>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	689c      	ldr	r4, [r3, #8]
 8008fa4:	79fb      	ldrb	r3, [r7, #7]
 8008fa6:	b299      	uxth	r1, r3
 8008fa8:	4b47      	ldr	r3, [pc, #284]	; (80090c8 <RadioIrqProcess+0x2b0>)
 8008faa:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8008fae:	b21a      	sxth	r2, r3
 8008fb0:	4b45      	ldr	r3, [pc, #276]	; (80090c8 <RadioIrqProcess+0x2b0>)
 8008fb2:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8008fb6:	4848      	ldr	r0, [pc, #288]	; (80090d8 <RadioIrqProcess+0x2c0>)
 8008fb8:	47a0      	blx	r4
                break;
 8008fba:	e01e      	b.n	8008ffa <RadioIrqProcess+0x1e2>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8008fbc:	4b42      	ldr	r3, [pc, #264]	; (80090c8 <RadioIrqProcess+0x2b0>)
 8008fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fc0:	463a      	mov	r2, r7
 8008fc2:	4611      	mov	r1, r2
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f001 ff47 	bl	800ae58 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 8008fca:	4b41      	ldr	r3, [pc, #260]	; (80090d0 <RadioIrqProcess+0x2b8>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	689c      	ldr	r4, [r3, #8]
 8008fd0:	79fb      	ldrb	r3, [r7, #7]
 8008fd2:	b299      	uxth	r1, r3
 8008fd4:	4b3c      	ldr	r3, [pc, #240]	; (80090c8 <RadioIrqProcess+0x2b0>)
 8008fd6:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 8008fda:	b218      	sxth	r0, r3
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008fe2:	4a3f      	ldr	r2, [pc, #252]	; (80090e0 <RadioIrqProcess+0x2c8>)
 8008fe4:	fb82 c203 	smull	ip, r2, r2, r3
 8008fe8:	1192      	asrs	r2, r2, #6
 8008fea:	17db      	asrs	r3, r3, #31
 8008fec:	1ad3      	subs	r3, r2, r3
 8008fee:	b25b      	sxtb	r3, r3
 8008ff0:	4602      	mov	r2, r0
 8008ff2:	4839      	ldr	r0, [pc, #228]	; (80090d8 <RadioIrqProcess+0x2c0>)
 8008ff4:	47a0      	blx	r4
                break;
 8008ff6:	e000      	b.n	8008ffa <RadioIrqProcess+0x1e2>
        }
 8008ff8:	bf00      	nop
        break;
 8008ffa:	e118      	b.n	800922e <RadioIrqProcess+0x416>
        SUBGRF_SetStandby( STDBY_RC );
 8008ffc:	2000      	movs	r0, #0
 8008ffe:	f000 ff79 	bl	8009ef4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8009002:	4b33      	ldr	r3, [pc, #204]	; (80090d0 <RadioIrqProcess+0x2b8>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	2b00      	cmp	r3, #0
 8009008:	f000 8104 	beq.w	8009214 <RadioIrqProcess+0x3fc>
 800900c:	4b30      	ldr	r3, [pc, #192]	; (80090d0 <RadioIrqProcess+0x2b8>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	699b      	ldr	r3, [r3, #24]
 8009012:	2b00      	cmp	r3, #0
 8009014:	f000 80fe 	beq.w	8009214 <RadioIrqProcess+0x3fc>
            RadioEvents->CadDone( false );
 8009018:	4b2d      	ldr	r3, [pc, #180]	; (80090d0 <RadioIrqProcess+0x2b8>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	699b      	ldr	r3, [r3, #24]
 800901e:	2000      	movs	r0, #0
 8009020:	4798      	blx	r3
        break;
 8009022:	e0f7      	b.n	8009214 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 8009024:	2000      	movs	r0, #0
 8009026:	f000 ff65 	bl	8009ef4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800902a:	4b29      	ldr	r3, [pc, #164]	; (80090d0 <RadioIrqProcess+0x2b8>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	2b00      	cmp	r3, #0
 8009030:	f000 80f2 	beq.w	8009218 <RadioIrqProcess+0x400>
 8009034:	4b26      	ldr	r3, [pc, #152]	; (80090d0 <RadioIrqProcess+0x2b8>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	699b      	ldr	r3, [r3, #24]
 800903a:	2b00      	cmp	r3, #0
 800903c:	f000 80ec 	beq.w	8009218 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( true );
 8009040:	4b23      	ldr	r3, [pc, #140]	; (80090d0 <RadioIrqProcess+0x2b8>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	699b      	ldr	r3, [r3, #24]
 8009046:	2001      	movs	r0, #1
 8009048:	4798      	blx	r3
        break;
 800904a:	e0e5      	b.n	8009218 <RadioIrqProcess+0x400>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 800904c:	4b25      	ldr	r3, [pc, #148]	; (80090e4 <RadioIrqProcess+0x2cc>)
 800904e:	2201      	movs	r2, #1
 8009050:	2100      	movs	r1, #0
 8009052:	2002      	movs	r0, #2
 8009054:	f003 fb68 	bl	800c728 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8009058:	f000 fe02 	bl	8009c60 <SUBGRF_GetOperatingMode>
 800905c:	4603      	mov	r3, r0
 800905e:	2b04      	cmp	r3, #4
 8009060:	d115      	bne.n	800908e <RadioIrqProcess+0x276>
            TimerStop( &TxTimeoutTimer );
 8009062:	481a      	ldr	r0, [pc, #104]	; (80090cc <RadioIrqProcess+0x2b4>)
 8009064:	f003 f968 	bl	800c338 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8009068:	2000      	movs	r0, #0
 800906a:	f000 ff43 	bl	8009ef4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800906e:	4b18      	ldr	r3, [pc, #96]	; (80090d0 <RadioIrqProcess+0x2b8>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	2b00      	cmp	r3, #0
 8009074:	f000 80d2 	beq.w	800921c <RadioIrqProcess+0x404>
 8009078:	4b15      	ldr	r3, [pc, #84]	; (80090d0 <RadioIrqProcess+0x2b8>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	2b00      	cmp	r3, #0
 8009080:	f000 80cc 	beq.w	800921c <RadioIrqProcess+0x404>
                RadioEvents->TxTimeout( );
 8009084:	4b12      	ldr	r3, [pc, #72]	; (80090d0 <RadioIrqProcess+0x2b8>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	685b      	ldr	r3, [r3, #4]
 800908a:	4798      	blx	r3
        break;
 800908c:	e0c6      	b.n	800921c <RadioIrqProcess+0x404>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800908e:	f000 fde7 	bl	8009c60 <SUBGRF_GetOperatingMode>
 8009092:	4603      	mov	r3, r0
 8009094:	2b05      	cmp	r3, #5
 8009096:	f040 80c1 	bne.w	800921c <RadioIrqProcess+0x404>
            TimerStop( &RxTimeoutTimer );
 800909a:	480e      	ldr	r0, [pc, #56]	; (80090d4 <RadioIrqProcess+0x2bc>)
 800909c:	f003 f94c 	bl	800c338 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80090a0:	2000      	movs	r0, #0
 80090a2:	f000 ff27 	bl	8009ef4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80090a6:	4b0a      	ldr	r3, [pc, #40]	; (80090d0 <RadioIrqProcess+0x2b8>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	f000 80b6 	beq.w	800921c <RadioIrqProcess+0x404>
 80090b0:	4b07      	ldr	r3, [pc, #28]	; (80090d0 <RadioIrqProcess+0x2b8>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	68db      	ldr	r3, [r3, #12]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	f000 80b0 	beq.w	800921c <RadioIrqProcess+0x404>
                RadioEvents->RxTimeout( );
 80090bc:	4b04      	ldr	r3, [pc, #16]	; (80090d0 <RadioIrqProcess+0x2b8>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	68db      	ldr	r3, [r3, #12]
 80090c2:	4798      	blx	r3
        break;
 80090c4:	e0aa      	b.n	800921c <RadioIrqProcess+0x404>
 80090c6:	bf00      	nop
 80090c8:	20000438 	.word	0x20000438
 80090cc:	20000494 	.word	0x20000494
 80090d0:	20000434 	.word	0x20000434
 80090d4:	200004ac 	.word	0x200004ac
 80090d8:	20000334 	.word	0x20000334
 80090dc:	2000045c 	.word	0x2000045c
 80090e0:	10624dd3 	.word	0x10624dd3
 80090e4:	0800ddc8 	.word	0x0800ddc8
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 80090e8:	4b53      	ldr	r3, [pc, #332]	; (8009238 <RadioIrqProcess+0x420>)
 80090ea:	2201      	movs	r2, #1
 80090ec:	2100      	movs	r1, #0
 80090ee:	2002      	movs	r0, #2
 80090f0:	f003 fb1a 	bl	800c728 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 80090f4:	4b51      	ldr	r3, [pc, #324]	; (800923c <RadioIrqProcess+0x424>)
 80090f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	f000 8091 	beq.w	8009220 <RadioIrqProcess+0x408>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 80090fe:	4a50      	ldr	r2, [pc, #320]	; (8009240 <RadioIrqProcess+0x428>)
 8009100:	4b4e      	ldr	r3, [pc, #312]	; (800923c <RadioIrqProcess+0x424>)
 8009102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009104:	0c1b      	lsrs	r3, r3, #16
 8009106:	b2db      	uxtb	r3, r3
 8009108:	4619      	mov	r1, r3
 800910a:	f640 1003 	movw	r0, #2307	; 0x903
 800910e:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 8009110:	4a4b      	ldr	r2, [pc, #300]	; (8009240 <RadioIrqProcess+0x428>)
 8009112:	4b4a      	ldr	r3, [pc, #296]	; (800923c <RadioIrqProcess+0x424>)
 8009114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009116:	0a1b      	lsrs	r3, r3, #8
 8009118:	b2db      	uxtb	r3, r3
 800911a:	4619      	mov	r1, r3
 800911c:	f640 1004 	movw	r0, #2308	; 0x904
 8009120:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 8009122:	4a47      	ldr	r2, [pc, #284]	; (8009240 <RadioIrqProcess+0x428>)
 8009124:	4b45      	ldr	r3, [pc, #276]	; (800923c <RadioIrqProcess+0x424>)
 8009126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009128:	b2db      	uxtb	r3, r3
 800912a:	4619      	mov	r1, r3
 800912c:	f640 1005 	movw	r0, #2309	; 0x905
 8009130:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 8009132:	4c43      	ldr	r4, [pc, #268]	; (8009240 <RadioIrqProcess+0x428>)
 8009134:	4b43      	ldr	r3, [pc, #268]	; (8009244 <RadioIrqProcess+0x42c>)
 8009136:	f640 1002 	movw	r0, #2306	; 0x902
 800913a:	4798      	blx	r3
 800913c:	4603      	mov	r3, r0
 800913e:	f043 0301 	orr.w	r3, r3, #1
 8009142:	b2db      	uxtb	r3, r3
 8009144:	4619      	mov	r1, r3
 8009146:	f640 1002 	movw	r0, #2306	; 0x902
 800914a:	47a0      	blx	r4
          SubgRf.RxDcPreambleDetectTimeout = 0;
 800914c:	4b3b      	ldr	r3, [pc, #236]	; (800923c <RadioIrqProcess+0x424>)
 800914e:	2200      	movs	r2, #0
 8009150:	659a      	str	r2, [r3, #88]	; 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8009152:	2300      	movs	r3, #0
 8009154:	2200      	movs	r2, #0
 8009156:	f240 2162 	movw	r1, #610	; 0x262
 800915a:	f240 2062 	movw	r0, #610	; 0x262
 800915e:	f001 f899 	bl	800a294 <SUBGRF_SetDioIrqParams>
        break;
 8009162:	e05d      	b.n	8009220 <RadioIrqProcess+0x408>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8009164:	4b38      	ldr	r3, [pc, #224]	; (8009248 <RadioIrqProcess+0x430>)
 8009166:	2201      	movs	r2, #1
 8009168:	2100      	movs	r1, #0
 800916a:	2002      	movs	r0, #2
 800916c:	f003 fadc 	bl	800c728 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8009170:	f001 ff1d 	bl	800afae <RFW_Is_Init>
 8009174:	4603      	mov	r3, r0
 8009176:	2b01      	cmp	r3, #1
 8009178:	d154      	bne.n	8009224 <RadioIrqProcess+0x40c>
            RFW_ReceivePayload( );
 800917a:	f001 ff4e 	bl	800b01a <RFW_ReceivePayload>
        break;
 800917e:	e051      	b.n	8009224 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8009180:	4b32      	ldr	r3, [pc, #200]	; (800924c <RadioIrqProcess+0x434>)
 8009182:	2201      	movs	r2, #1
 8009184:	2100      	movs	r1, #0
 8009186:	2002      	movs	r0, #2
 8009188:	f003 face 	bl	800c728 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800918c:	e04f      	b.n	800922e <RadioIrqProcess+0x416>
        TimerStop( &RxTimeoutTimer );
 800918e:	4830      	ldr	r0, [pc, #192]	; (8009250 <RadioIrqProcess+0x438>)
 8009190:	f003 f8d2 	bl	800c338 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8009194:	4b29      	ldr	r3, [pc, #164]	; (800923c <RadioIrqProcess+0x424>)
 8009196:	785b      	ldrb	r3, [r3, #1]
 8009198:	f083 0301 	eor.w	r3, r3, #1
 800919c:	b2db      	uxtb	r3, r3
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d002      	beq.n	80091a8 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 80091a2:	2000      	movs	r0, #0
 80091a4:	f000 fea6 	bl	8009ef4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80091a8:	4b2a      	ldr	r3, [pc, #168]	; (8009254 <RadioIrqProcess+0x43c>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d03b      	beq.n	8009228 <RadioIrqProcess+0x410>
 80091b0:	4b28      	ldr	r3, [pc, #160]	; (8009254 <RadioIrqProcess+0x43c>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	68db      	ldr	r3, [r3, #12]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d036      	beq.n	8009228 <RadioIrqProcess+0x410>
            RadioEvents->RxTimeout( );
 80091ba:	4b26      	ldr	r3, [pc, #152]	; (8009254 <RadioIrqProcess+0x43c>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 80091c2:	4b25      	ldr	r3, [pc, #148]	; (8009258 <RadioIrqProcess+0x440>)
 80091c4:	2201      	movs	r2, #1
 80091c6:	2100      	movs	r1, #0
 80091c8:	2002      	movs	r0, #2
 80091ca:	f003 faad 	bl	800c728 <UTIL_ADV_TRACE_COND_FSend>
        break;
 80091ce:	e02b      	b.n	8009228 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 80091d0:	4b22      	ldr	r3, [pc, #136]	; (800925c <RadioIrqProcess+0x444>)
 80091d2:	2201      	movs	r2, #1
 80091d4:	2100      	movs	r1, #0
 80091d6:	2002      	movs	r0, #2
 80091d8:	f003 faa6 	bl	800c728 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 80091dc:	4b17      	ldr	r3, [pc, #92]	; (800923c <RadioIrqProcess+0x424>)
 80091de:	785b      	ldrb	r3, [r3, #1]
 80091e0:	f083 0301 	eor.w	r3, r3, #1
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d002      	beq.n	80091f0 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 80091ea:	2000      	movs	r0, #0
 80091ec:	f000 fe82 	bl	8009ef4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 80091f0:	4b18      	ldr	r3, [pc, #96]	; (8009254 <RadioIrqProcess+0x43c>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d019      	beq.n	800922c <RadioIrqProcess+0x414>
 80091f8:	4b16      	ldr	r3, [pc, #88]	; (8009254 <RadioIrqProcess+0x43c>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	691b      	ldr	r3, [r3, #16]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d014      	beq.n	800922c <RadioIrqProcess+0x414>
            RadioEvents->RxError( );
 8009202:	4b14      	ldr	r3, [pc, #80]	; (8009254 <RadioIrqProcess+0x43c>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	691b      	ldr	r3, [r3, #16]
 8009208:	4798      	blx	r3
        break;
 800920a:	e00f      	b.n	800922c <RadioIrqProcess+0x414>
        break;
 800920c:	bf00      	nop
 800920e:	e00e      	b.n	800922e <RadioIrqProcess+0x416>
        break;
 8009210:	bf00      	nop
 8009212:	e00c      	b.n	800922e <RadioIrqProcess+0x416>
        break;
 8009214:	bf00      	nop
 8009216:	e00a      	b.n	800922e <RadioIrqProcess+0x416>
        break;
 8009218:	bf00      	nop
 800921a:	e008      	b.n	800922e <RadioIrqProcess+0x416>
        break;
 800921c:	bf00      	nop
 800921e:	e006      	b.n	800922e <RadioIrqProcess+0x416>
        break;
 8009220:	bf00      	nop
 8009222:	e004      	b.n	800922e <RadioIrqProcess+0x416>
        break;
 8009224:	bf00      	nop
 8009226:	e002      	b.n	800922e <RadioIrqProcess+0x416>
        break;
 8009228:	bf00      	nop
 800922a:	e000      	b.n	800922e <RadioIrqProcess+0x416>
        break;
 800922c:	bf00      	nop
    }
}
 800922e:	bf00      	nop
 8009230:	370c      	adds	r7, #12
 8009232:	46bd      	mov	sp, r7
 8009234:	bd90      	pop	{r4, r7, pc}
 8009236:	bf00      	nop
 8009238:	0800dddc 	.word	0x0800dddc
 800923c:	20000438 	.word	0x20000438
 8009240:	08008c27 	.word	0x08008c27
 8009244:	08008c4b 	.word	0x08008c4b
 8009248:	0800dde8 	.word	0x0800dde8
 800924c:	0800ddf4 	.word	0x0800ddf4
 8009250:	200004ac 	.word	0x200004ac
 8009254:	20000434 	.word	0x20000434
 8009258:	0800de00 	.word	0x0800de00
 800925c:	0800de0c 	.word	0x0800de0c

08009260 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8009260:	b580      	push	{r7, lr}
 8009262:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8009264:	4b09      	ldr	r3, [pc, #36]	; (800928c <RadioTxPrbs+0x2c>)
 8009266:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800926a:	2101      	movs	r1, #1
 800926c:	4618      	mov	r0, r3
 800926e:	f001 fcb5 	bl	800abdc <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8009272:	4b07      	ldr	r3, [pc, #28]	; (8009290 <RadioTxPrbs+0x30>)
 8009274:	212d      	movs	r1, #45	; 0x2d
 8009276:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800927a:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 800927c:	f000 fefd 	bl	800a07a <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8009280:	4804      	ldr	r0, [pc, #16]	; (8009294 <RadioTxPrbs+0x34>)
 8009282:	f000 fe53 	bl	8009f2c <SUBGRF_SetTx>
}
 8009286:	bf00      	nop
 8009288:	bd80      	pop	{r7, pc}
 800928a:	bf00      	nop
 800928c:	20000438 	.word	0x20000438
 8009290:	08008c27 	.word	0x08008c27
 8009294:	000fffff 	.word	0x000fffff

08009298 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b084      	sub	sp, #16
 800929c:	af00      	add	r7, sp, #0
 800929e:	4603      	mov	r3, r0
 80092a0:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 80092a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092a6:	4618      	mov	r0, r3
 80092a8:	f001 fcc0 	bl	800ac2c <SUBGRF_SetRfTxPower>
 80092ac:	4603      	mov	r3, r0
 80092ae:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 80092b0:	7bfb      	ldrb	r3, [r7, #15]
 80092b2:	2101      	movs	r1, #1
 80092b4:	4618      	mov	r0, r3
 80092b6:	f001 fc91 	bl	800abdc <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 80092ba:	f000 fed5 	bl	800a068 <SUBGRF_SetTxContinuousWave>
}
 80092be:	bf00      	nop
 80092c0:	3710      	adds	r7, #16
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}

080092c6 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 80092c6:	b480      	push	{r7}
 80092c8:	b089      	sub	sp, #36	; 0x24
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	60f8      	str	r0, [r7, #12]
 80092ce:	60b9      	str	r1, [r7, #8]
 80092d0:	4613      	mov	r3, r2
 80092d2:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 80092d4:	2300      	movs	r3, #0
 80092d6:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 80092d8:	2300      	movs	r3, #0
 80092da:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 80092dc:	2300      	movs	r3, #0
 80092de:	61bb      	str	r3, [r7, #24]
 80092e0:	e011      	b.n	8009306 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 80092e2:	69bb      	ldr	r3, [r7, #24]
 80092e4:	68ba      	ldr	r2, [r7, #8]
 80092e6:	4413      	add	r3, r2
 80092e8:	781a      	ldrb	r2, [r3, #0]
 80092ea:	69bb      	ldr	r3, [r7, #24]
 80092ec:	68b9      	ldr	r1, [r7, #8]
 80092ee:	440b      	add	r3, r1
 80092f0:	43d2      	mvns	r2, r2
 80092f2:	b2d2      	uxtb	r2, r2
 80092f4:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 80092f6:	69bb      	ldr	r3, [r7, #24]
 80092f8:	68fa      	ldr	r2, [r7, #12]
 80092fa:	4413      	add	r3, r2
 80092fc:	2200      	movs	r2, #0
 80092fe:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8009300:	69bb      	ldr	r3, [r7, #24]
 8009302:	3301      	adds	r3, #1
 8009304:	61bb      	str	r3, [r7, #24]
 8009306:	79fb      	ldrb	r3, [r7, #7]
 8009308:	69ba      	ldr	r2, [r7, #24]
 800930a:	429a      	cmp	r2, r3
 800930c:	dbe9      	blt.n	80092e2 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 800930e:	2300      	movs	r3, #0
 8009310:	61bb      	str	r3, [r7, #24]
 8009312:	e049      	b.n	80093a8 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8009314:	69bb      	ldr	r3, [r7, #24]
 8009316:	425a      	negs	r2, r3
 8009318:	f003 0307 	and.w	r3, r3, #7
 800931c:	f002 0207 	and.w	r2, r2, #7
 8009320:	bf58      	it	pl
 8009322:	4253      	negpl	r3, r2
 8009324:	b2db      	uxtb	r3, r3
 8009326:	f1c3 0307 	rsb	r3, r3, #7
 800932a:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 800932c:	69bb      	ldr	r3, [r7, #24]
 800932e:	2b00      	cmp	r3, #0
 8009330:	da00      	bge.n	8009334 <payload_integration+0x6e>
 8009332:	3307      	adds	r3, #7
 8009334:	10db      	asrs	r3, r3, #3
 8009336:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8009338:	69bb      	ldr	r3, [r7, #24]
 800933a:	3301      	adds	r3, #1
 800933c:	425a      	negs	r2, r3
 800933e:	f003 0307 	and.w	r3, r3, #7
 8009342:	f002 0207 	and.w	r2, r2, #7
 8009346:	bf58      	it	pl
 8009348:	4253      	negpl	r3, r2
 800934a:	b2db      	uxtb	r3, r3
 800934c:	f1c3 0307 	rsb	r3, r3, #7
 8009350:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8009352:	69bb      	ldr	r3, [r7, #24]
 8009354:	3301      	adds	r3, #1
 8009356:	2b00      	cmp	r3, #0
 8009358:	da00      	bge.n	800935c <payload_integration+0x96>
 800935a:	3307      	adds	r3, #7
 800935c:	10db      	asrs	r3, r3, #3
 800935e:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8009360:	7dbb      	ldrb	r3, [r7, #22]
 8009362:	68ba      	ldr	r2, [r7, #8]
 8009364:	4413      	add	r3, r2
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	461a      	mov	r2, r3
 800936a:	7dfb      	ldrb	r3, [r7, #23]
 800936c:	fa42 f303 	asr.w	r3, r2, r3
 8009370:	b2db      	uxtb	r3, r3
 8009372:	f003 0301 	and.w	r3, r3, #1
 8009376:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8009378:	7ffa      	ldrb	r2, [r7, #31]
 800937a:	7cfb      	ldrb	r3, [r7, #19]
 800937c:	4053      	eors	r3, r2
 800937e:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8009380:	7d3b      	ldrb	r3, [r7, #20]
 8009382:	68fa      	ldr	r2, [r7, #12]
 8009384:	4413      	add	r3, r2
 8009386:	781b      	ldrb	r3, [r3, #0]
 8009388:	b25a      	sxtb	r2, r3
 800938a:	7ff9      	ldrb	r1, [r7, #31]
 800938c:	7d7b      	ldrb	r3, [r7, #21]
 800938e:	fa01 f303 	lsl.w	r3, r1, r3
 8009392:	b25b      	sxtb	r3, r3
 8009394:	4313      	orrs	r3, r2
 8009396:	b259      	sxtb	r1, r3
 8009398:	7d3b      	ldrb	r3, [r7, #20]
 800939a:	68fa      	ldr	r2, [r7, #12]
 800939c:	4413      	add	r3, r2
 800939e:	b2ca      	uxtb	r2, r1
 80093a0:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 80093a2:	69bb      	ldr	r3, [r7, #24]
 80093a4:	3301      	adds	r3, #1
 80093a6:	61bb      	str	r3, [r7, #24]
 80093a8:	79fb      	ldrb	r3, [r7, #7]
 80093aa:	00db      	lsls	r3, r3, #3
 80093ac:	69ba      	ldr	r2, [r7, #24]
 80093ae:	429a      	cmp	r2, r3
 80093b0:	dbb0      	blt.n	8009314 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 80093b2:	7ffb      	ldrb	r3, [r7, #31]
 80093b4:	01db      	lsls	r3, r3, #7
 80093b6:	b25a      	sxtb	r2, r3
 80093b8:	7ffb      	ldrb	r3, [r7, #31]
 80093ba:	019b      	lsls	r3, r3, #6
 80093bc:	b25b      	sxtb	r3, r3
 80093be:	4313      	orrs	r3, r2
 80093c0:	b25b      	sxtb	r3, r3
 80093c2:	7ffa      	ldrb	r2, [r7, #31]
 80093c4:	2a00      	cmp	r2, #0
 80093c6:	d101      	bne.n	80093cc <payload_integration+0x106>
 80093c8:	2220      	movs	r2, #32
 80093ca:	e000      	b.n	80093ce <payload_integration+0x108>
 80093cc:	2200      	movs	r2, #0
 80093ce:	4313      	orrs	r3, r2
 80093d0:	b259      	sxtb	r1, r3
 80093d2:	79fb      	ldrb	r3, [r7, #7]
 80093d4:	68fa      	ldr	r2, [r7, #12]
 80093d6:	4413      	add	r3, r2
 80093d8:	b2ca      	uxtb	r2, r1
 80093da:	701a      	strb	r2, [r3, #0]
}
 80093dc:	bf00      	nop
 80093de:	3724      	adds	r7, #36	; 0x24
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bc80      	pop	{r7}
 80093e4:	4770      	bx	lr
	...

080093e8 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b08c      	sub	sp, #48	; 0x30
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	60b9      	str	r1, [r7, #8]
 80093f0:	607a      	str	r2, [r7, #4]
 80093f2:	603b      	str	r3, [r7, #0]
 80093f4:	4603      	mov	r3, r0
 80093f6:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 80093f8:	2300      	movs	r3, #0
 80093fa:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 80093fc:	2300      	movs	r3, #0
 80093fe:	623b      	str	r3, [r7, #32]
 8009400:	2300      	movs	r3, #0
 8009402:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8009404:	f001 fdcd 	bl	800afa2 <RFW_DeInit>

    if( rxContinuous != 0 )
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d001      	beq.n	8009412 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 800940e:	2300      	movs	r3, #0
 8009410:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2b00      	cmp	r3, #0
 8009416:	bf14      	ite	ne
 8009418:	2301      	movne	r3, #1
 800941a:	2300      	moveq	r3, #0
 800941c:	b2da      	uxtb	r2, r3
 800941e:	4ba3      	ldr	r3, [pc, #652]	; (80096ac <RadioSetRxGenericConfig+0x2c4>)
 8009420:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8009422:	7bfb      	ldrb	r3, [r7, #15]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d003      	beq.n	8009430 <RadioSetRxGenericConfig+0x48>
 8009428:	2b01      	cmp	r3, #1
 800942a:	f000 80dc 	beq.w	80095e6 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 800942e:	e194      	b.n	800975a <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	689b      	ldr	r3, [r3, #8]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d003      	beq.n	8009440 <RadioSetRxGenericConfig+0x58>
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	68db      	ldr	r3, [r3, #12]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d102      	bne.n	8009446 <RadioSetRxGenericConfig+0x5e>
            return -1;
 8009440:	f04f 33ff 	mov.w	r3, #4294967295
 8009444:	e18a      	b.n	800975c <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	7f9b      	ldrb	r3, [r3, #30]
 800944a:	2b08      	cmp	r3, #8
 800944c:	d902      	bls.n	8009454 <RadioSetRxGenericConfig+0x6c>
            return -1;
 800944e:	f04f 33ff 	mov.w	r3, #4294967295
 8009452:	e183      	b.n	800975c <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	6919      	ldr	r1, [r3, #16]
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	7f9b      	ldrb	r3, [r3, #30]
 800945c:	b29a      	uxth	r2, r3
 800945e:	f107 0320 	add.w	r3, r7, #32
 8009462:	4618      	mov	r0, r3
 8009464:	f002 fa0e 	bl	800b884 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	2b00      	cmp	r3, #0
 800946e:	bf14      	ite	ne
 8009470:	2301      	movne	r3, #1
 8009472:	2300      	moveq	r3, #0
 8009474:	b2db      	uxtb	r3, r3
 8009476:	4618      	mov	r0, r3
 8009478:	f000 fe08 	bl	800a08c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800947c:	4b8b      	ldr	r3, [pc, #556]	; (80096ac <RadioSetRxGenericConfig+0x2c4>)
 800947e:	2200      	movs	r2, #0
 8009480:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	4a88      	ldr	r2, [pc, #544]	; (80096ac <RadioSetRxGenericConfig+0x2c4>)
 800948a:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8009492:	4b86      	ldr	r3, [pc, #536]	; (80096ac <RadioSetRxGenericConfig+0x2c4>)
 8009494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	4618      	mov	r0, r3
 800949e:	f001 fcb3 	bl	800ae08 <SUBGRF_GetFskBandwidthRegValue>
 80094a2:	4603      	mov	r3, r0
 80094a4:	461a      	mov	r2, r3
 80094a6:	4b81      	ldr	r3, [pc, #516]	; (80096ac <RadioSetRxGenericConfig+0x2c4>)
 80094a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80094ac:	4b7f      	ldr	r3, [pc, #508]	; (80096ac <RadioSetRxGenericConfig+0x2c4>)
 80094ae:	2200      	movs	r2, #0
 80094b0:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	68db      	ldr	r3, [r3, #12]
 80094b6:	b29b      	uxth	r3, r3
 80094b8:	00db      	lsls	r3, r3, #3
 80094ba:	b29a      	uxth	r2, r3
 80094bc:	4b7b      	ldr	r3, [pc, #492]	; (80096ac <RadioSetRxGenericConfig+0x2c4>)
 80094be:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	7fda      	ldrb	r2, [r3, #31]
 80094c4:	4b79      	ldr	r3, [pc, #484]	; (80096ac <RadioSetRxGenericConfig+0x2c4>)
 80094c6:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	7f9b      	ldrb	r3, [r3, #30]
 80094cc:	00db      	lsls	r3, r3, #3
 80094ce:	b2da      	uxtb	r2, r3
 80094d0:	4b76      	ldr	r3, [pc, #472]	; (80096ac <RadioSetRxGenericConfig+0x2c4>)
 80094d2:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80094da:	4b74      	ldr	r3, [pc, #464]	; (80096ac <RadioSetRxGenericConfig+0x2c4>)
 80094dc:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d105      	bne.n	80094f4 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	695b      	ldr	r3, [r3, #20]
 80094ec:	b2da      	uxtb	r2, r3
 80094ee:	4b6f      	ldr	r3, [pc, #444]	; (80096ac <RadioSetRxGenericConfig+0x2c4>)
 80094f0:	759a      	strb	r2, [r3, #22]
 80094f2:	e00b      	b.n	800950c <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80094fa:	2b02      	cmp	r3, #2
 80094fc:	d103      	bne.n	8009506 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80094fe:	4b6b      	ldr	r3, [pc, #428]	; (80096ac <RadioSetRxGenericConfig+0x2c4>)
 8009500:	22ff      	movs	r2, #255	; 0xff
 8009502:	759a      	strb	r2, [r3, #22]
 8009504:	e002      	b.n	800950c <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8009506:	4b69      	ldr	r3, [pc, #420]	; (80096ac <RadioSetRxGenericConfig+0x2c4>)
 8009508:	22ff      	movs	r2, #255	; 0xff
 800950a:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009512:	2b02      	cmp	r3, #2
 8009514:	d004      	beq.n	8009520 <RadioSetRxGenericConfig+0x138>
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800951c:	2b02      	cmp	r3, #2
 800951e:	d12d      	bne.n	800957c <RadioSetRxGenericConfig+0x194>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009526:	2bf1      	cmp	r3, #241	; 0xf1
 8009528:	d00c      	beq.n	8009544 <RadioSetRxGenericConfig+0x15c>
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009530:	2bf2      	cmp	r3, #242	; 0xf2
 8009532:	d007      	beq.n	8009544 <RadioSetRxGenericConfig+0x15c>
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800953a:	2b01      	cmp	r3, #1
 800953c:	d002      	beq.n	8009544 <RadioSetRxGenericConfig+0x15c>
            return -1;
 800953e:	f04f 33ff 	mov.w	r3, #4294967295
 8009542:	e10b      	b.n	800975c <RadioSetRxGenericConfig+0x374>
          ConfigGeneric.rtx = CONFIG_RX;
 8009544:	2300      	movs	r3, #0
 8009546:	773b      	strb	r3, [r7, #28]
          ConfigGeneric.RxConfig = config;
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	61bb      	str	r3, [r7, #24]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 800954c:	4b58      	ldr	r3, [pc, #352]	; (80096b0 <RadioSetRxGenericConfig+0x2c8>)
 800954e:	6819      	ldr	r1, [r3, #0]
 8009550:	f107 0314 	add.w	r3, r7, #20
 8009554:	4a57      	ldr	r2, [pc, #348]	; (80096b4 <RadioSetRxGenericConfig+0x2cc>)
 8009556:	4618      	mov	r0, r3
 8009558:	f001 fd16 	bl	800af88 <RFW_Init>
 800955c:	4603      	mov	r3, r0
 800955e:	2b00      	cmp	r3, #0
 8009560:	d002      	beq.n	8009568 <RadioSetRxGenericConfig+0x180>
            return -1;
 8009562:	f04f 33ff 	mov.w	r3, #4294967295
 8009566:	e0f9      	b.n	800975c <RadioSetRxGenericConfig+0x374>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8009568:	4b50      	ldr	r3, [pc, #320]	; (80096ac <RadioSetRxGenericConfig+0x2c4>)
 800956a:	2200      	movs	r2, #0
 800956c:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800956e:	4b4f      	ldr	r3, [pc, #316]	; (80096ac <RadioSetRxGenericConfig+0x2c4>)
 8009570:	2201      	movs	r2, #1
 8009572:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8009574:	4b4d      	ldr	r3, [pc, #308]	; (80096ac <RadioSetRxGenericConfig+0x2c4>)
 8009576:	2200      	movs	r2, #0
 8009578:	755a      	strb	r2, [r3, #21]
        {
 800957a:	e00e      	b.n	800959a <RadioSetRxGenericConfig+0x1b2>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8009582:	4b4a      	ldr	r3, [pc, #296]	; (80096ac <RadioSetRxGenericConfig+0x2c4>)
 8009584:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800958c:	4b47      	ldr	r3, [pc, #284]	; (80096ac <RadioSetRxGenericConfig+0x2c4>)
 800958e:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8009596:	4b45      	ldr	r3, [pc, #276]	; (80096ac <RadioSetRxGenericConfig+0x2c4>)
 8009598:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800959a:	f7ff fa48 	bl	8008a2e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800959e:	2000      	movs	r0, #0
 80095a0:	f7fe fbf2 	bl	8007d88 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80095a4:	4844      	ldr	r0, [pc, #272]	; (80096b8 <RadioSetRxGenericConfig+0x2d0>)
 80095a6:	f001 f80b 	bl	800a5c0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80095aa:	4844      	ldr	r0, [pc, #272]	; (80096bc <RadioSetRxGenericConfig+0x2d4>)
 80095ac:	f001 f8da 	bl	800a764 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80095b0:	f107 0320 	add.w	r3, r7, #32
 80095b4:	4618      	mov	r0, r3
 80095b6:	f000 fba2 	bl	8009cfe <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	8b9b      	ldrh	r3, [r3, #28]
 80095be:	4618      	mov	r0, r3
 80095c0:	f000 fbec 	bl	8009d9c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	8b1b      	ldrh	r3, [r3, #24]
 80095c8:	4618      	mov	r0, r3
 80095ca:	f000 fbc7 	bl	8009d5c <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80095d4:	fb03 f202 	mul.w	r2, r3, r2
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	689b      	ldr	r3, [r3, #8]
 80095dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80095e0:	4a32      	ldr	r2, [pc, #200]	; (80096ac <RadioSetRxGenericConfig+0x2c4>)
 80095e2:	6093      	str	r3, [r2, #8]
        break;
 80095e4:	e0b9      	b.n	800975a <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d102      	bne.n	80095f4 <RadioSetRxGenericConfig+0x20c>
            return -1;
 80095ee:	f04f 33ff 	mov.w	r3, #4294967295
 80095f2:	e0b3      	b.n	800975c <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80095fa:	2b01      	cmp	r3, #1
 80095fc:	d104      	bne.n	8009608 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	695b      	ldr	r3, [r3, #20]
 8009602:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009606:	e002      	b.n	800960e <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 8009608:	23ff      	movs	r3, #255	; 0xff
 800960a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009612:	2b00      	cmp	r3, #0
 8009614:	bf14      	ite	ne
 8009616:	2301      	movne	r3, #1
 8009618:	2300      	moveq	r3, #0
 800961a:	b2db      	uxtb	r3, r3
 800961c:	4618      	mov	r0, r3
 800961e:	f000 fd35 	bl	800a08c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	b2db      	uxtb	r3, r3
 8009626:	4618      	mov	r0, r3
 8009628:	f000 fd3f 	bl	800a0aa <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800962c:	4b1f      	ldr	r3, [pc, #124]	; (80096ac <RadioSetRxGenericConfig+0x2c4>)
 800962e:	2201      	movs	r2, #1
 8009630:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800963a:	4b1c      	ldr	r3, [pc, #112]	; (80096ac <RadioSetRxGenericConfig+0x2c4>)
 800963c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8009646:	4b19      	ldr	r3, [pc, #100]	; (80096ac <RadioSetRxGenericConfig+0x2c4>)
 8009648:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8009652:	4b16      	ldr	r3, [pc, #88]	; (80096ac <RadioSetRxGenericConfig+0x2c4>)
 8009654:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800965e:	2b02      	cmp	r3, #2
 8009660:	d010      	beq.n	8009684 <RadioSetRxGenericConfig+0x29c>
 8009662:	2b02      	cmp	r3, #2
 8009664:	dc2c      	bgt.n	80096c0 <RadioSetRxGenericConfig+0x2d8>
 8009666:	2b00      	cmp	r3, #0
 8009668:	d002      	beq.n	8009670 <RadioSetRxGenericConfig+0x288>
 800966a:	2b01      	cmp	r3, #1
 800966c:	d005      	beq.n	800967a <RadioSetRxGenericConfig+0x292>
            break;
 800966e:	e027      	b.n	80096c0 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009670:	4b0e      	ldr	r3, [pc, #56]	; (80096ac <RadioSetRxGenericConfig+0x2c4>)
 8009672:	2200      	movs	r2, #0
 8009674:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009678:	e023      	b.n	80096c2 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800967a:	4b0c      	ldr	r3, [pc, #48]	; (80096ac <RadioSetRxGenericConfig+0x2c4>)
 800967c:	2201      	movs	r2, #1
 800967e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009682:	e01e      	b.n	80096c2 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800968a:	2b0b      	cmp	r3, #11
 800968c:	d004      	beq.n	8009698 <RadioSetRxGenericConfig+0x2b0>
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009694:	2b0c      	cmp	r3, #12
 8009696:	d104      	bne.n	80096a2 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009698:	4b04      	ldr	r3, [pc, #16]	; (80096ac <RadioSetRxGenericConfig+0x2c4>)
 800969a:	2201      	movs	r2, #1
 800969c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80096a0:	e00f      	b.n	80096c2 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80096a2:	4b02      	ldr	r3, [pc, #8]	; (80096ac <RadioSetRxGenericConfig+0x2c4>)
 80096a4:	2200      	movs	r2, #0
 80096a6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80096aa:	e00a      	b.n	80096c2 <RadioSetRxGenericConfig+0x2da>
 80096ac:	20000438 	.word	0x20000438
 80096b0:	20000434 	.word	0x20000434
 80096b4:	200004ac 	.word	0x200004ac
 80096b8:	20000470 	.word	0x20000470
 80096bc:	20000446 	.word	0x20000446
            break;
 80096c0:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80096c2:	4b28      	ldr	r3, [pc, #160]	; (8009764 <RadioSetRxGenericConfig+0x37c>)
 80096c4:	2201      	movs	r2, #1
 80096c6:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 80096cc:	4b25      	ldr	r3, [pc, #148]	; (8009764 <RadioSetRxGenericConfig+0x37c>)
 80096ce:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 80096d6:	4b23      	ldr	r3, [pc, #140]	; (8009764 <RadioSetRxGenericConfig+0x37c>)
 80096d8:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80096da:	4a22      	ldr	r2, [pc, #136]	; (8009764 <RadioSetRxGenericConfig+0x37c>)
 80096dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80096e0:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80096e8:	4b1e      	ldr	r3, [pc, #120]	; (8009764 <RadioSetRxGenericConfig+0x37c>)
 80096ea:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80096f4:	4b1b      	ldr	r3, [pc, #108]	; (8009764 <RadioSetRxGenericConfig+0x37c>)
 80096f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 80096fa:	f7ff f998 	bl	8008a2e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80096fe:	2001      	movs	r0, #1
 8009700:	f7fe fb42 	bl	8007d88 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009704:	4818      	ldr	r0, [pc, #96]	; (8009768 <RadioSetRxGenericConfig+0x380>)
 8009706:	f000 ff5b 	bl	800a5c0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800970a:	4818      	ldr	r0, [pc, #96]	; (800976c <RadioSetRxGenericConfig+0x384>)
 800970c:	f001 f82a 	bl	800a764 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8009710:	4b14      	ldr	r3, [pc, #80]	; (8009764 <RadioSetRxGenericConfig+0x37c>)
 8009712:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009716:	2b01      	cmp	r3, #1
 8009718:	d10d      	bne.n	8009736 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800971a:	f240 7036 	movw	r0, #1846	; 0x736
 800971e:	f001 f97d 	bl	800aa1c <SUBGRF_ReadRegister>
 8009722:	4603      	mov	r3, r0
 8009724:	f023 0304 	bic.w	r3, r3, #4
 8009728:	b2db      	uxtb	r3, r3
 800972a:	4619      	mov	r1, r3
 800972c:	f240 7036 	movw	r0, #1846	; 0x736
 8009730:	f001 f960 	bl	800a9f4 <SUBGRF_WriteRegister>
 8009734:	e00c      	b.n	8009750 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8009736:	f240 7036 	movw	r0, #1846	; 0x736
 800973a:	f001 f96f 	bl	800aa1c <SUBGRF_ReadRegister>
 800973e:	4603      	mov	r3, r0
 8009740:	f043 0304 	orr.w	r3, r3, #4
 8009744:	b2db      	uxtb	r3, r3
 8009746:	4619      	mov	r1, r3
 8009748:	f240 7036 	movw	r0, #1846	; 0x736
 800974c:	f001 f952 	bl	800a9f4 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8009750:	4b04      	ldr	r3, [pc, #16]	; (8009764 <RadioSetRxGenericConfig+0x37c>)
 8009752:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009756:	609a      	str	r2, [r3, #8]
        break;
 8009758:	bf00      	nop
    }
    return status;
 800975a:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800975c:	4618      	mov	r0, r3
 800975e:	3730      	adds	r7, #48	; 0x30
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}
 8009764:	20000438 	.word	0x20000438
 8009768:	20000470 	.word	0x20000470
 800976c:	20000446 	.word	0x20000446

08009770 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b08e      	sub	sp, #56	; 0x38
 8009774:	af00      	add	r7, sp, #0
 8009776:	60b9      	str	r1, [r7, #8]
 8009778:	607b      	str	r3, [r7, #4]
 800977a:	4603      	mov	r3, r0
 800977c:	73fb      	strb	r3, [r7, #15]
 800977e:	4613      	mov	r3, r2
 8009780:	73bb      	strb	r3, [r7, #14]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8009782:	2300      	movs	r3, #0
 8009784:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009786:	2300      	movs	r3, #0
 8009788:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800978a:	f001 fc0a 	bl	800afa2 <RFW_DeInit>
    switch( modem )
 800978e:	7bfb      	ldrb	r3, [r7, #15]
 8009790:	2b03      	cmp	r3, #3
 8009792:	f200 8204 	bhi.w	8009b9e <RadioSetTxGenericConfig+0x42e>
 8009796:	a201      	add	r2, pc, #4	; (adr r2, 800979c <RadioSetTxGenericConfig+0x2c>)
 8009798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800979c:	08009921 	.word	0x08009921
 80097a0:	08009a69 	.word	0x08009a69
 80097a4:	08009b61 	.word	0x08009b61
 80097a8:	080097ad 	.word	0x080097ad
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	7c9b      	ldrb	r3, [r3, #18]
 80097b0:	2b08      	cmp	r3, #8
 80097b2:	d902      	bls.n	80097ba <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 80097b4:	f04f 33ff 	mov.w	r3, #4294967295
 80097b8:	e206      	b.n	8009bc8 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
          RADIO_MEMCPY8(syncword, config->msk.SyncWord, config->msk.SyncWordLength);
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	6899      	ldr	r1, [r3, #8]
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	7c9b      	ldrb	r3, [r3, #18]
 80097c2:	b29a      	uxth	r2, r3
 80097c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80097c8:	4618      	mov	r0, r3
 80097ca:	f002 f85b 	bl	800b884 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d102      	bne.n	80097dc <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 80097d6:	f04f 33ff 	mov.w	r3, #4294967295
 80097da:	e1f5      	b.n	8009bc8 <RadioSetTxGenericConfig+0x458>
        }
        else if (config->msk.BitRate<= 10000)
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f242 7210 	movw	r2, #10000	; 0x2710
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d813      	bhi.n	8009810 <RadioSetTxGenericConfig+0xa0>
        {
          /*max msk modulator datarate is 10kbps*/
          radio_modem= MODEM_MSK;
 80097e8:	2302      	movs	r3, #2
 80097ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 80097ee:	4b99      	ldr	r3, [pc, #612]	; (8009a54 <RadioSetTxGenericConfig+0x2e4>)
 80097f0:	2203      	movs	r2, #3
 80097f2:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 80097f4:	4b97      	ldr	r3, [pc, #604]	; (8009a54 <RadioSetTxGenericConfig+0x2e4>)
 80097f6:	2203      	movs	r2, #3
 80097f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a94      	ldr	r2, [pc, #592]	; (8009a54 <RadioSetTxGenericConfig+0x2e4>)
 8009802:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	7cda      	ldrb	r2, [r3, #19]
 8009808:	4b92      	ldr	r3, [pc, #584]	; (8009a54 <RadioSetTxGenericConfig+0x2e4>)
 800980a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800980e:	e017      	b.n	8009840 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
          radio_modem= MODEM_FSK;
 8009810:	2300      	movs	r3, #0
 8009812:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009816:	4b8f      	ldr	r3, [pc, #572]	; (8009a54 <RadioSetTxGenericConfig+0x2e4>)
 8009818:	2200      	movs	r2, #0
 800981a:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800981c:	4b8d      	ldr	r3, [pc, #564]	; (8009a54 <RadioSetTxGenericConfig+0x2e4>)
 800981e:	2200      	movs	r2, #0
 8009820:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a8a      	ldr	r2, [pc, #552]	; (8009a54 <RadioSetTxGenericConfig+0x2e4>)
 800982a:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	7cda      	ldrb	r2, [r3, #19]
 8009830:	4b88      	ldr	r3, [pc, #544]	; (8009a54 <RadioSetTxGenericConfig+0x2e4>)
 8009832:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
          /*do msk with gfsk modulator*/
          SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate/4;
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	089b      	lsrs	r3, r3, #2
 800983c:	4a85      	ldr	r2, [pc, #532]	; (8009a54 <RadioSetTxGenericConfig+0x2e4>)
 800983e:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	b29b      	uxth	r3, r3
 8009846:	00db      	lsls	r3, r3, #3
 8009848:	b29a      	uxth	r2, r3
 800984a:	4b82      	ldr	r3, [pc, #520]	; (8009a54 <RadioSetTxGenericConfig+0x2e4>)
 800984c:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800984e:	4b81      	ldr	r3, [pc, #516]	; (8009a54 <RadioSetTxGenericConfig+0x2e4>)
 8009850:	2204      	movs	r2, #4
 8009852:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	7c9b      	ldrb	r3, [r3, #18]
 8009858:	00db      	lsls	r3, r3, #3
 800985a:	b2da      	uxtb	r2, r3
 800985c:	4b7d      	ldr	r3, [pc, #500]	; (8009a54 <RadioSetTxGenericConfig+0x2e4>)
 800985e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8009860:	4b7c      	ldr	r3, [pc, #496]	; (8009a54 <RadioSetTxGenericConfig+0x2e4>)
 8009862:	2200      	movs	r2, #0
 8009864:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	7d9b      	ldrb	r3, [r3, #22]
 800986a:	2b02      	cmp	r3, #2
 800986c:	d003      	beq.n	8009876 <RadioSetTxGenericConfig+0x106>
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	7d1b      	ldrb	r3, [r3, #20]
 8009872:	2b02      	cmp	r3, #2
 8009874:	d12b      	bne.n	80098ce <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	7d5b      	ldrb	r3, [r3, #21]
 800987a:	2bf1      	cmp	r3, #241	; 0xf1
 800987c:	d00a      	beq.n	8009894 <RadioSetTxGenericConfig+0x124>
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	7d5b      	ldrb	r3, [r3, #21]
 8009882:	2bf2      	cmp	r3, #242	; 0xf2
 8009884:	d006      	beq.n	8009894 <RadioSetTxGenericConfig+0x124>
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	7d5b      	ldrb	r3, [r3, #21]
 800988a:	2b01      	cmp	r3, #1
 800988c:	d002      	beq.n	8009894 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 800988e:	f04f 33ff 	mov.w	r3, #4294967295
 8009892:	e199      	b.n	8009bc8 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig= config;
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8009898:	2301      	movs	r3, #1
 800989a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800989e:	4b6e      	ldr	r3, [pc, #440]	; (8009a58 <RadioSetTxGenericConfig+0x2e8>)
 80098a0:	6819      	ldr	r1, [r3, #0]
 80098a2:	f107 0320 	add.w	r3, r7, #32
 80098a6:	4a6d      	ldr	r2, [pc, #436]	; (8009a5c <RadioSetTxGenericConfig+0x2ec>)
 80098a8:	4618      	mov	r0, r3
 80098aa:	f001 fb6d 	bl	800af88 <RFW_Init>
 80098ae:	4603      	mov	r3, r0
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d002      	beq.n	80098ba <RadioSetTxGenericConfig+0x14a>
            {
              return -1;
 80098b4:	f04f 33ff 	mov.w	r3, #4294967295
 80098b8:	e186      	b.n	8009bc8 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80098ba:	4b66      	ldr	r3, [pc, #408]	; (8009a54 <RadioSetTxGenericConfig+0x2e4>)
 80098bc:	2200      	movs	r2, #0
 80098be:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 80098c0:	4b64      	ldr	r3, [pc, #400]	; (8009a54 <RadioSetTxGenericConfig+0x2e4>)
 80098c2:	2201      	movs	r2, #1
 80098c4:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80098c6:	4b63      	ldr	r3, [pc, #396]	; (8009a54 <RadioSetTxGenericConfig+0x2e4>)
 80098c8:	2200      	movs	r2, #0
 80098ca:	755a      	strb	r2, [r3, #21]
        {
 80098cc:	e00b      	b.n	80098e6 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	7d5a      	ldrb	r2, [r3, #21]
 80098d2:	4b60      	ldr	r3, [pc, #384]	; (8009a54 <RadioSetTxGenericConfig+0x2e4>)
 80098d4:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	7d9a      	ldrb	r2, [r3, #22]
 80098da:	4b5e      	ldr	r3, [pc, #376]	; (8009a54 <RadioSetTxGenericConfig+0x2e4>)
 80098dc:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	7d1a      	ldrb	r2, [r3, #20]
 80098e2:	4b5c      	ldr	r3, [pc, #368]	; (8009a54 <RadioSetTxGenericConfig+0x2e4>)
 80098e4:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 80098e6:	f7ff f8a2 	bl	8008a2e <RadioStandby>
        RadioSetModem( radio_modem );
 80098ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80098ee:	4618      	mov	r0, r3
 80098f0:	f7fe fa4a 	bl	8007d88 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80098f4:	485a      	ldr	r0, [pc, #360]	; (8009a60 <RadioSetTxGenericConfig+0x2f0>)
 80098f6:	f000 fe63 	bl	800a5c0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80098fa:	485a      	ldr	r0, [pc, #360]	; (8009a64 <RadioSetTxGenericConfig+0x2f4>)
 80098fc:	f000 ff32 	bl	800a764 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8009900:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009904:	4618      	mov	r0, r3
 8009906:	f000 f9fa 	bl	8009cfe <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	8a1b      	ldrh	r3, [r3, #16]
 800990e:	4618      	mov	r0, r3
 8009910:	f000 fa44 	bl	8009d9c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->msk.CrcPolynomial );
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	899b      	ldrh	r3, [r3, #12]
 8009918:	4618      	mov	r0, r3
 800991a:	f000 fa1f 	bl	8009d5c <SUBGRF_SetCrcPolynomial>
        break;
 800991e:	e13f      	b.n	8009ba0 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d102      	bne.n	800992e <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 8009928:	f04f 33ff 	mov.w	r3, #4294967295
 800992c:	e14c      	b.n	8009bc8 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	7c9b      	ldrb	r3, [r3, #18]
 8009932:	2b08      	cmp	r3, #8
 8009934:	d902      	bls.n	800993c <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 8009936:	f04f 33ff 	mov.w	r3, #4294967295
 800993a:	e145      	b.n	8009bc8 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8(syncword, config->fsk.SyncWord, config->fsk.SyncWordLength);
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	6899      	ldr	r1, [r3, #8]
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	7c9b      	ldrb	r3, [r3, #18]
 8009944:	b29a      	uxth	r2, r3
 8009946:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800994a:	4618      	mov	r0, r3
 800994c:	f001 ff9a 	bl	800b884 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009950:	4b40      	ldr	r3, [pc, #256]	; (8009a54 <RadioSetTxGenericConfig+0x2e4>)
 8009952:	2200      	movs	r2, #0
 8009954:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4a3d      	ldr	r2, [pc, #244]	; (8009a54 <RadioSetTxGenericConfig+0x2e4>)
 800995e:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	7cda      	ldrb	r2, [r3, #19]
 8009964:	4b3b      	ldr	r3, [pc, #236]	; (8009a54 <RadioSetTxGenericConfig+0x2e4>)
 8009966:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	699b      	ldr	r3, [r3, #24]
 800996e:	4a39      	ldr	r2, [pc, #228]	; (8009a54 <RadioSetTxGenericConfig+0x2e4>)
 8009970:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009972:	4b38      	ldr	r3, [pc, #224]	; (8009a54 <RadioSetTxGenericConfig+0x2e4>)
 8009974:	2200      	movs	r2, #0
 8009976:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	b29b      	uxth	r3, r3
 800997e:	00db      	lsls	r3, r3, #3
 8009980:	b29a      	uxth	r2, r3
 8009982:	4b34      	ldr	r3, [pc, #208]	; (8009a54 <RadioSetTxGenericConfig+0x2e4>)
 8009984:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8009986:	4b33      	ldr	r3, [pc, #204]	; (8009a54 <RadioSetTxGenericConfig+0x2e4>)
 8009988:	2204      	movs	r2, #4
 800998a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	7c9b      	ldrb	r3, [r3, #18]
 8009990:	00db      	lsls	r3, r3, #3
 8009992:	b2da      	uxtb	r2, r3
 8009994:	4b2f      	ldr	r3, [pc, #188]	; (8009a54 <RadioSetTxGenericConfig+0x2e4>)
 8009996:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8009998:	4b2e      	ldr	r3, [pc, #184]	; (8009a54 <RadioSetTxGenericConfig+0x2e4>)
 800999a:	2200      	movs	r2, #0
 800999c:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	7d9b      	ldrb	r3, [r3, #22]
 80099a2:	2b02      	cmp	r3, #2
 80099a4:	d003      	beq.n	80099ae <RadioSetTxGenericConfig+0x23e>
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	7d1b      	ldrb	r3, [r3, #20]
 80099aa:	2b02      	cmp	r3, #2
 80099ac:	d12a      	bne.n	8009a04 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	7d5b      	ldrb	r3, [r3, #21]
 80099b2:	2bf1      	cmp	r3, #241	; 0xf1
 80099b4:	d00a      	beq.n	80099cc <RadioSetTxGenericConfig+0x25c>
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	7d5b      	ldrb	r3, [r3, #21]
 80099ba:	2bf2      	cmp	r3, #242	; 0xf2
 80099bc:	d006      	beq.n	80099cc <RadioSetTxGenericConfig+0x25c>
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	7d5b      	ldrb	r3, [r3, #21]
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	d002      	beq.n	80099cc <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 80099c6:	f04f 33ff 	mov.w	r3, #4294967295
 80099ca:	e0fd      	b.n	8009bc8 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 80099cc:	2301      	movs	r3, #1
 80099ce:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 80099d4:	4b20      	ldr	r3, [pc, #128]	; (8009a58 <RadioSetTxGenericConfig+0x2e8>)
 80099d6:	6819      	ldr	r1, [r3, #0]
 80099d8:	f107 0314 	add.w	r3, r7, #20
 80099dc:	4a1f      	ldr	r2, [pc, #124]	; (8009a5c <RadioSetTxGenericConfig+0x2ec>)
 80099de:	4618      	mov	r0, r3
 80099e0:	f001 fad2 	bl	800af88 <RFW_Init>
 80099e4:	4603      	mov	r3, r0
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d002      	beq.n	80099f0 <RadioSetTxGenericConfig+0x280>
            {
              return -1;
 80099ea:	f04f 33ff 	mov.w	r3, #4294967295
 80099ee:	e0eb      	b.n	8009bc8 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80099f0:	4b18      	ldr	r3, [pc, #96]	; (8009a54 <RadioSetTxGenericConfig+0x2e4>)
 80099f2:	2200      	movs	r2, #0
 80099f4:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 80099f6:	4b17      	ldr	r3, [pc, #92]	; (8009a54 <RadioSetTxGenericConfig+0x2e4>)
 80099f8:	2201      	movs	r2, #1
 80099fa:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80099fc:	4b15      	ldr	r3, [pc, #84]	; (8009a54 <RadioSetTxGenericConfig+0x2e4>)
 80099fe:	2200      	movs	r2, #0
 8009a00:	755a      	strb	r2, [r3, #21]
        {
 8009a02:	e00b      	b.n	8009a1c <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	7d5a      	ldrb	r2, [r3, #21]
 8009a08:	4b12      	ldr	r3, [pc, #72]	; (8009a54 <RadioSetTxGenericConfig+0x2e4>)
 8009a0a:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	7d9a      	ldrb	r2, [r3, #22]
 8009a10:	4b10      	ldr	r3, [pc, #64]	; (8009a54 <RadioSetTxGenericConfig+0x2e4>)
 8009a12:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	7d1a      	ldrb	r2, [r3, #20]
 8009a18:	4b0e      	ldr	r3, [pc, #56]	; (8009a54 <RadioSetTxGenericConfig+0x2e4>)
 8009a1a:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8009a1c:	f7ff f807 	bl	8008a2e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8009a20:	2000      	movs	r0, #0
 8009a22:	f7fe f9b1 	bl	8007d88 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009a26:	480e      	ldr	r0, [pc, #56]	; (8009a60 <RadioSetTxGenericConfig+0x2f0>)
 8009a28:	f000 fdca 	bl	800a5c0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009a2c:	480d      	ldr	r0, [pc, #52]	; (8009a64 <RadioSetTxGenericConfig+0x2f4>)
 8009a2e:	f000 fe99 	bl	800a764 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8009a32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009a36:	4618      	mov	r0, r3
 8009a38:	f000 f961 	bl	8009cfe <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	8a1b      	ldrh	r3, [r3, #16]
 8009a40:	4618      	mov	r0, r3
 8009a42:	f000 f9ab 	bl	8009d9c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	899b      	ldrh	r3, [r3, #12]
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f000 f986 	bl	8009d5c <SUBGRF_SetCrcPolynomial>
        break;
 8009a50:	e0a6      	b.n	8009ba0 <RadioSetTxGenericConfig+0x430>
 8009a52:	bf00      	nop
 8009a54:	20000438 	.word	0x20000438
 8009a58:	20000434 	.word	0x20000434
 8009a5c:	20000494 	.word	0x20000494
 8009a60:	20000470 	.word	0x20000470
 8009a64:	20000446 	.word	0x20000446
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8009a68:	4b59      	ldr	r3, [pc, #356]	; (8009bd0 <RadioSetTxGenericConfig+0x460>)
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	781a      	ldrb	r2, [r3, #0]
 8009a74:	4b56      	ldr	r3, [pc, #344]	; (8009bd0 <RadioSetTxGenericConfig+0x460>)
 8009a76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	785a      	ldrb	r2, [r3, #1]
 8009a7e:	4b54      	ldr	r3, [pc, #336]	; (8009bd0 <RadioSetTxGenericConfig+0x460>)
 8009a80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	789a      	ldrb	r2, [r3, #2]
 8009a88:	4b51      	ldr	r3, [pc, #324]	; (8009bd0 <RadioSetTxGenericConfig+0x460>)
 8009a8a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	78db      	ldrb	r3, [r3, #3]
 8009a92:	2b02      	cmp	r3, #2
 8009a94:	d010      	beq.n	8009ab8 <RadioSetTxGenericConfig+0x348>
 8009a96:	2b02      	cmp	r3, #2
 8009a98:	dc20      	bgt.n	8009adc <RadioSetTxGenericConfig+0x36c>
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d002      	beq.n	8009aa4 <RadioSetTxGenericConfig+0x334>
 8009a9e:	2b01      	cmp	r3, #1
 8009aa0:	d005      	beq.n	8009aae <RadioSetTxGenericConfig+0x33e>
            {
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
          default:
            break;
 8009aa2:	e01b      	b.n	8009adc <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009aa4:	4b4a      	ldr	r3, [pc, #296]	; (8009bd0 <RadioSetTxGenericConfig+0x460>)
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009aac:	e017      	b.n	8009ade <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009aae:	4b48      	ldr	r3, [pc, #288]	; (8009bd0 <RadioSetTxGenericConfig+0x460>)
 8009ab0:	2201      	movs	r2, #1
 8009ab2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009ab6:	e012      	b.n	8009ade <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	781b      	ldrb	r3, [r3, #0]
 8009abc:	2b0b      	cmp	r3, #11
 8009abe:	d003      	beq.n	8009ac8 <RadioSetTxGenericConfig+0x358>
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	781b      	ldrb	r3, [r3, #0]
 8009ac4:	2b0c      	cmp	r3, #12
 8009ac6:	d104      	bne.n	8009ad2 <RadioSetTxGenericConfig+0x362>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009ac8:	4b41      	ldr	r3, [pc, #260]	; (8009bd0 <RadioSetTxGenericConfig+0x460>)
 8009aca:	2201      	movs	r2, #1
 8009acc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009ad0:	e005      	b.n	8009ade <RadioSetTxGenericConfig+0x36e>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009ad2:	4b3f      	ldr	r3, [pc, #252]	; (8009bd0 <RadioSetTxGenericConfig+0x460>)
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009ada:	e000      	b.n	8009ade <RadioSetTxGenericConfig+0x36e>
            break;
 8009adc:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8009ade:	4b3c      	ldr	r3, [pc, #240]	; (8009bd0 <RadioSetTxGenericConfig+0x460>)
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	889a      	ldrh	r2, [r3, #4]
 8009ae8:	4b39      	ldr	r3, [pc, #228]	; (8009bd0 <RadioSetTxGenericConfig+0x460>)
 8009aea:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	799a      	ldrb	r2, [r3, #6]
 8009af0:	4b37      	ldr	r3, [pc, #220]	; (8009bd0 <RadioSetTxGenericConfig+0x460>)
 8009af2:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	79da      	ldrb	r2, [r3, #7]
 8009af8:	4b35      	ldr	r3, [pc, #212]	; (8009bd0 <RadioSetTxGenericConfig+0x460>)
 8009afa:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	7a1a      	ldrb	r2, [r3, #8]
 8009b02:	4b33      	ldr	r3, [pc, #204]	; (8009bd0 <RadioSetTxGenericConfig+0x460>)
 8009b04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 8009b08:	f7fe ff91 	bl	8008a2e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8009b0c:	2001      	movs	r0, #1
 8009b0e:	f7fe f93b 	bl	8007d88 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009b12:	4830      	ldr	r0, [pc, #192]	; (8009bd4 <RadioSetTxGenericConfig+0x464>)
 8009b14:	f000 fd54 	bl	800a5c0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009b18:	482f      	ldr	r0, [pc, #188]	; (8009bd8 <RadioSetTxGenericConfig+0x468>)
 8009b1a:	f000 fe23 	bl	800a764 <SUBGRF_SetPacketParams>

        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8009b1e:	4b2c      	ldr	r3, [pc, #176]	; (8009bd0 <RadioSetTxGenericConfig+0x460>)
 8009b20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009b24:	2b06      	cmp	r3, #6
 8009b26:	d10d      	bne.n	8009b44 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8009b28:	f640 0089 	movw	r0, #2185	; 0x889
 8009b2c:	f000 ff76 	bl	800aa1c <SUBGRF_ReadRegister>
 8009b30:	4603      	mov	r3, r0
 8009b32:	f023 0304 	bic.w	r3, r3, #4
 8009b36:	b2db      	uxtb	r3, r3
 8009b38:	4619      	mov	r1, r3
 8009b3a:	f640 0089 	movw	r0, #2185	; 0x889
 8009b3e:	f000 ff59 	bl	800a9f4 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        // WORKAROUND END
        break;
 8009b42:	e02d      	b.n	8009ba0 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8009b44:	f640 0089 	movw	r0, #2185	; 0x889
 8009b48:	f000 ff68 	bl	800aa1c <SUBGRF_ReadRegister>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	f043 0304 	orr.w	r3, r3, #4
 8009b52:	b2db      	uxtb	r3, r3
 8009b54:	4619      	mov	r1, r3
 8009b56:	f640 0089 	movw	r0, #2185	; 0x889
 8009b5a:	f000 ff4b 	bl	800a9f4 <SUBGRF_WriteRegister>
        break;
 8009b5e:	e01f      	b.n	8009ba0 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d004      	beq.n	8009b72 <RadioSetTxGenericConfig+0x402>
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b70:	d902      	bls.n	8009b78 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 8009b72:	f04f 33ff 	mov.w	r3, #4294967295
 8009b76:	e027      	b.n	8009bc8 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 8009b78:	2003      	movs	r0, #3
 8009b7a:	f7fe f905 	bl	8007d88 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8009b7e:	4b14      	ldr	r3, [pc, #80]	; (8009bd0 <RadioSetTxGenericConfig+0x460>)
 8009b80:	2202      	movs	r2, #2
 8009b82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4a11      	ldr	r2, [pc, #68]	; (8009bd0 <RadioSetTxGenericConfig+0x460>)
 8009b8c:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8009b8e:	4b10      	ldr	r3, [pc, #64]	; (8009bd0 <RadioSetTxGenericConfig+0x460>)
 8009b90:	2216      	movs	r2, #22
 8009b92:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009b96:	480f      	ldr	r0, [pc, #60]	; (8009bd4 <RadioSetTxGenericConfig+0x464>)
 8009b98:	f000 fd12 	bl	800a5c0 <SUBGRF_SetModulationParams>
        break;
 8009b9c:	e000      	b.n	8009ba0 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 8009b9e:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8009ba0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f001 f841 	bl	800ac2c <SUBGRF_SetRfTxPower>
 8009baa:	4603      	mov	r3, r0
 8009bac:	461a      	mov	r2, r3
 8009bae:	4b08      	ldr	r3, [pc, #32]	; (8009bd0 <RadioSetTxGenericConfig+0x460>)
 8009bb0:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8009bb4:	4b06      	ldr	r3, [pc, #24]	; (8009bd0 <RadioSetTxGenericConfig+0x460>)
 8009bb6:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f001 fa05 	bl	800afca <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8009bc0:	4a03      	ldr	r2, [pc, #12]	; (8009bd0 <RadioSetTxGenericConfig+0x460>)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6053      	str	r3, [r2, #4]
    return 0;
 8009bc6:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3738      	adds	r7, #56	; 0x38
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}
 8009bd0:	20000438 	.word	0x20000438
 8009bd4:	20000470 	.word	0x20000470
 8009bd8:	20000446 	.word	0x20000446

08009bdc <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b084      	sub	sp, #16
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d002      	beq.n	8009bf0 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8009bea:	4a1a      	ldr	r2, [pc, #104]	; (8009c54 <SUBGRF_Init+0x78>)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8009bf0:	f7f7 f822 	bl	8000c38 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8009bf4:	2002      	movs	r0, #2
 8009bf6:	f001 f8e5 	bl	800adc4 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8009bfa:	4b17      	ldr	r3, [pc, #92]	; (8009c58 <SUBGRF_Init+0x7c>)
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8009c00:	2000      	movs	r0, #0
 8009c02:	f000 f977 	bl	8009ef4 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8009c06:	f001 fd7b 	bl	800b700 <RBI_IsTCXO>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d10e      	bne.n	8009c2e <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8009c10:	2140      	movs	r1, #64	; 0x40
 8009c12:	2001      	movs	r0, #1
 8009c14:	f000 fb78 	bl	800a308 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8009c18:	2100      	movs	r1, #0
 8009c1a:	f640 1011 	movw	r0, #2321	; 0x911
 8009c1e:	f000 fee9 	bl	800a9f4 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8009c22:	237f      	movs	r3, #127	; 0x7f
 8009c24:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8009c26:	7b38      	ldrb	r0, [r7, #12]
 8009c28:	f000 fa85 	bl	800a136 <SUBGRF_Calibrate>
 8009c2c:	e009      	b.n	8009c42 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8009c2e:	2120      	movs	r1, #32
 8009c30:	f640 1011 	movw	r0, #2321	; 0x911
 8009c34:	f000 fede 	bl	800a9f4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8009c38:	2120      	movs	r1, #32
 8009c3a:	f640 1012 	movw	r0, #2322	; 0x912
 8009c3e:	f000 fed9 	bl	800a9f4 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 8009c42:	f001 fd41 	bl	800b6c8 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8009c46:	4b05      	ldr	r3, [pc, #20]	; (8009c5c <SUBGRF_Init+0x80>)
 8009c48:	2201      	movs	r2, #1
 8009c4a:	701a      	strb	r2, [r3, #0]
}
 8009c4c:	bf00      	nop
 8009c4e:	3710      	adds	r7, #16
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}
 8009c54:	200004d0 	.word	0x200004d0
 8009c58:	200004cc 	.word	0x200004cc
 8009c5c:	200004c4 	.word	0x200004c4

08009c60 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8009c60:	b480      	push	{r7}
 8009c62:	af00      	add	r7, sp, #0
    return OperatingMode;
 8009c64:	4b02      	ldr	r3, [pc, #8]	; (8009c70 <SUBGRF_GetOperatingMode+0x10>)
 8009c66:	781b      	ldrb	r3, [r3, #0]
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bc80      	pop	{r7}
 8009c6e:	4770      	bx	lr
 8009c70:	200004c4 	.word	0x200004c4

08009c74 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b082      	sub	sp, #8
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
 8009c7c:	460b      	mov	r3, r1
 8009c7e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8009c80:	78fb      	ldrb	r3, [r7, #3]
 8009c82:	461a      	mov	r2, r3
 8009c84:	6879      	ldr	r1, [r7, #4]
 8009c86:	2000      	movs	r0, #0
 8009c88:	f000 ff20 	bl	800aacc <SUBGRF_WriteBuffer>
}
 8009c8c:	bf00      	nop
 8009c8e:	3708      	adds	r7, #8
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b086      	sub	sp, #24
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	60f8      	str	r0, [r7, #12]
 8009c9c:	60b9      	str	r1, [r7, #8]
 8009c9e:	4613      	mov	r3, r2
 8009ca0:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8009ca6:	f107 0317 	add.w	r3, r7, #23
 8009caa:	4619      	mov	r1, r3
 8009cac:	68b8      	ldr	r0, [r7, #8]
 8009cae:	f000 fe23 	bl	800a8f8 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	781b      	ldrb	r3, [r3, #0]
 8009cb6:	79fa      	ldrb	r2, [r7, #7]
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	d201      	bcs.n	8009cc0 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	e007      	b.n	8009cd0 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8009cc0:	7df8      	ldrb	r0, [r7, #23]
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	68f9      	ldr	r1, [r7, #12]
 8009cca:	f000 ff21 	bl	800ab10 <SUBGRF_ReadBuffer>

    return 0;
 8009cce:	2300      	movs	r3, #0
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3718      	adds	r7, #24
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b084      	sub	sp, #16
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	60f8      	str	r0, [r7, #12]
 8009ce0:	460b      	mov	r3, r1
 8009ce2:	607a      	str	r2, [r7, #4]
 8009ce4:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8009ce6:	7afb      	ldrb	r3, [r7, #11]
 8009ce8:	4619      	mov	r1, r3
 8009cea:	68f8      	ldr	r0, [r7, #12]
 8009cec:	f7ff ffc2 	bl	8009c74 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f000 f91b 	bl	8009f2c <SUBGRF_SetTx>
}
 8009cf6:	bf00      	nop
 8009cf8:	3710      	adds	r7, #16
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}

08009cfe <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8009cfe:	b580      	push	{r7, lr}
 8009d00:	b082      	sub	sp, #8
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8009d06:	2208      	movs	r2, #8
 8009d08:	6879      	ldr	r1, [r7, #4]
 8009d0a:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8009d0e:	f000 fe99 	bl	800aa44 <SUBGRF_WriteRegisters>
    return 0;
 8009d12:	2300      	movs	r3, #0
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3708      	adds	r7, #8
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}

08009d1c <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b084      	sub	sp, #16
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	4603      	mov	r3, r0
 8009d24:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8009d26:	88fb      	ldrh	r3, [r7, #6]
 8009d28:	0a1b      	lsrs	r3, r3, #8
 8009d2a:	b29b      	uxth	r3, r3
 8009d2c:	b2db      	uxtb	r3, r3
 8009d2e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8009d30:	88fb      	ldrh	r3, [r7, #6]
 8009d32:	b2db      	uxtb	r3, r3
 8009d34:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8009d36:	f000 fb6b 	bl	800a410 <SUBGRF_GetPacketType>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d108      	bne.n	8009d52 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8009d40:	f107 030c 	add.w	r3, r7, #12
 8009d44:	2202      	movs	r2, #2
 8009d46:	4619      	mov	r1, r3
 8009d48:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8009d4c:	f000 fe7a 	bl	800aa44 <SUBGRF_WriteRegisters>
            break;
 8009d50:	e000      	b.n	8009d54 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8009d52:	bf00      	nop
    }
}
 8009d54:	bf00      	nop
 8009d56:	3710      	adds	r7, #16
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}

08009d5c <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	4603      	mov	r3, r0
 8009d64:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8009d66:	88fb      	ldrh	r3, [r7, #6]
 8009d68:	0a1b      	lsrs	r3, r3, #8
 8009d6a:	b29b      	uxth	r3, r3
 8009d6c:	b2db      	uxtb	r3, r3
 8009d6e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8009d70:	88fb      	ldrh	r3, [r7, #6]
 8009d72:	b2db      	uxtb	r3, r3
 8009d74:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8009d76:	f000 fb4b 	bl	800a410 <SUBGRF_GetPacketType>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d108      	bne.n	8009d92 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8009d80:	f107 030c 	add.w	r3, r7, #12
 8009d84:	2202      	movs	r2, #2
 8009d86:	4619      	mov	r1, r3
 8009d88:	f240 60be 	movw	r0, #1726	; 0x6be
 8009d8c:	f000 fe5a 	bl	800aa44 <SUBGRF_WriteRegisters>
            break;
 8009d90:	e000      	b.n	8009d94 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8009d92:	bf00      	nop
    }
}
 8009d94:	bf00      	nop
 8009d96:	3710      	adds	r7, #16
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}

08009d9c <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b084      	sub	sp, #16
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	4603      	mov	r3, r0
 8009da4:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8009da6:	2300      	movs	r3, #0
 8009da8:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8009daa:	f000 fb31 	bl	800a410 <SUBGRF_GetPacketType>
 8009dae:	4603      	mov	r3, r0
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d121      	bne.n	8009df8 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8009db4:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8009db8:	f000 fe30 	bl	800aa1c <SUBGRF_ReadRegister>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	f023 0301 	bic.w	r3, r3, #1
 8009dc2:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8009dc4:	88fb      	ldrh	r3, [r7, #6]
 8009dc6:	0a1b      	lsrs	r3, r3, #8
 8009dc8:	b29b      	uxth	r3, r3
 8009dca:	b25b      	sxtb	r3, r3
 8009dcc:	f003 0301 	and.w	r3, r3, #1
 8009dd0:	b25a      	sxtb	r2, r3
 8009dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	b25b      	sxtb	r3, r3
 8009dda:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8009ddc:	7bfb      	ldrb	r3, [r7, #15]
 8009dde:	4619      	mov	r1, r3
 8009de0:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8009de4:	f000 fe06 	bl	800a9f4 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8009de8:	88fb      	ldrh	r3, [r7, #6]
 8009dea:	b2db      	uxtb	r3, r3
 8009dec:	4619      	mov	r1, r3
 8009dee:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8009df2:	f000 fdff 	bl	800a9f4 <SUBGRF_WriteRegister>
            break;
 8009df6:	e000      	b.n	8009dfa <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8009df8:	bf00      	nop
    }
}
 8009dfa:	bf00      	nop
 8009dfc:	3710      	adds	r7, #16
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}

08009e02 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8009e02:	b580      	push	{r7, lr}
 8009e04:	b082      	sub	sp, #8
 8009e06:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8009e10:	2300      	movs	r3, #0
 8009e12:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8009e14:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8009e18:	f000 fe00 	bl	800aa1c <SUBGRF_ReadRegister>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8009e20:	79fb      	ldrb	r3, [r7, #7]
 8009e22:	f023 0301 	bic.w	r3, r3, #1
 8009e26:	b2db      	uxtb	r3, r3
 8009e28:	4619      	mov	r1, r3
 8009e2a:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8009e2e:	f000 fde1 	bl	800a9f4 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8009e32:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8009e36:	f000 fdf1 	bl	800aa1c <SUBGRF_ReadRegister>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8009e3e:	79bb      	ldrb	r3, [r7, #6]
 8009e40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e44:	b2db      	uxtb	r3, r3
 8009e46:	4619      	mov	r1, r3
 8009e48:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8009e4c:	f000 fdd2 	bl	800a9f4 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8009e50:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8009e54:	f000 f88a 	bl	8009f6c <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8009e58:	463b      	mov	r3, r7
 8009e5a:	2204      	movs	r2, #4
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	f640 0019 	movw	r0, #2073	; 0x819
 8009e62:	f000 fe11 	bl	800aa88 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8009e66:	2000      	movs	r0, #0
 8009e68:	f000 f844 	bl	8009ef4 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8009e6c:	79fb      	ldrb	r3, [r7, #7]
 8009e6e:	4619      	mov	r1, r3
 8009e70:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8009e74:	f000 fdbe 	bl	800a9f4 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8009e78:	79bb      	ldrb	r3, [r7, #6]
 8009e7a:	4619      	mov	r1, r3
 8009e7c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8009e80:	f000 fdb8 	bl	800a9f4 <SUBGRF_WriteRegister>

    return number;
 8009e84:	683b      	ldr	r3, [r7, #0]
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3708      	adds	r7, #8
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}
	...

08009e90 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b084      	sub	sp, #16
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8009e98:	2000      	movs	r0, #0
 8009e9a:	f001 fc1c 	bl	800b6d6 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8009e9e:	2002      	movs	r0, #2
 8009ea0:	f000 ff90 	bl	800adc4 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8009ea4:	793b      	ldrb	r3, [r7, #4]
 8009ea6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009eaa:	b2db      	uxtb	r3, r3
 8009eac:	009b      	lsls	r3, r3, #2
 8009eae:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8009eb0:	793b      	ldrb	r3, [r7, #4]
 8009eb2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009eb6:	b2db      	uxtb	r3, r3
 8009eb8:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8009eba:	b25b      	sxtb	r3, r3
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8009ec0:	793b      	ldrb	r3, [r7, #4]
 8009ec2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009ec6:	b2db      	uxtb	r3, r3
 8009ec8:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	b25b      	sxtb	r3, r3
 8009ece:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8009ed0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8009ed2:	f107 030f 	add.w	r3, r7, #15
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	4619      	mov	r1, r3
 8009eda:	2084      	movs	r0, #132	; 0x84
 8009edc:	f000 fe3a 	bl	800ab54 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8009ee0:	4b03      	ldr	r3, [pc, #12]	; (8009ef0 <SUBGRF_SetSleep+0x60>)
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	701a      	strb	r2, [r3, #0]
}
 8009ee6:	bf00      	nop
 8009ee8:	3710      	adds	r7, #16
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	200004c4 	.word	0x200004c4

08009ef4 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b082      	sub	sp, #8
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	4603      	mov	r3, r0
 8009efc:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8009efe:	1dfb      	adds	r3, r7, #7
 8009f00:	2201      	movs	r2, #1
 8009f02:	4619      	mov	r1, r3
 8009f04:	2080      	movs	r0, #128	; 0x80
 8009f06:	f000 fe25 	bl	800ab54 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8009f0a:	79fb      	ldrb	r3, [r7, #7]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d103      	bne.n	8009f18 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8009f10:	4b05      	ldr	r3, [pc, #20]	; (8009f28 <SUBGRF_SetStandby+0x34>)
 8009f12:	2201      	movs	r2, #1
 8009f14:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8009f16:	e002      	b.n	8009f1e <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8009f18:	4b03      	ldr	r3, [pc, #12]	; (8009f28 <SUBGRF_SetStandby+0x34>)
 8009f1a:	2202      	movs	r2, #2
 8009f1c:	701a      	strb	r2, [r3, #0]
}
 8009f1e:	bf00      	nop
 8009f20:	3708      	adds	r7, #8
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}
 8009f26:	bf00      	nop
 8009f28:	200004c4 	.word	0x200004c4

08009f2c <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b084      	sub	sp, #16
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8009f34:	4b0c      	ldr	r3, [pc, #48]	; (8009f68 <SUBGRF_SetTx+0x3c>)
 8009f36:	2204      	movs	r2, #4
 8009f38:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	0c1b      	lsrs	r3, r3, #16
 8009f3e:	b2db      	uxtb	r3, r3
 8009f40:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	0a1b      	lsrs	r3, r3, #8
 8009f46:	b2db      	uxtb	r3, r3
 8009f48:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	b2db      	uxtb	r3, r3
 8009f4e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8009f50:	f107 030c 	add.w	r3, r7, #12
 8009f54:	2203      	movs	r2, #3
 8009f56:	4619      	mov	r1, r3
 8009f58:	2083      	movs	r0, #131	; 0x83
 8009f5a:	f000 fdfb 	bl	800ab54 <SUBGRF_WriteCommand>
}
 8009f5e:	bf00      	nop
 8009f60:	3710      	adds	r7, #16
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop
 8009f68:	200004c4 	.word	0x200004c4

08009f6c <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b084      	sub	sp, #16
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8009f74:	4b0c      	ldr	r3, [pc, #48]	; (8009fa8 <SUBGRF_SetRx+0x3c>)
 8009f76:	2205      	movs	r2, #5
 8009f78:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	0c1b      	lsrs	r3, r3, #16
 8009f7e:	b2db      	uxtb	r3, r3
 8009f80:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	0a1b      	lsrs	r3, r3, #8
 8009f86:	b2db      	uxtb	r3, r3
 8009f88:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	b2db      	uxtb	r3, r3
 8009f8e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8009f90:	f107 030c 	add.w	r3, r7, #12
 8009f94:	2203      	movs	r2, #3
 8009f96:	4619      	mov	r1, r3
 8009f98:	2082      	movs	r0, #130	; 0x82
 8009f9a:	f000 fddb 	bl	800ab54 <SUBGRF_WriteCommand>
}
 8009f9e:	bf00      	nop
 8009fa0:	3710      	adds	r7, #16
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
 8009fa6:	bf00      	nop
 8009fa8:	200004c4 	.word	0x200004c4

08009fac <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b084      	sub	sp, #16
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8009fb4:	4b0e      	ldr	r3, [pc, #56]	; (8009ff0 <SUBGRF_SetRxBoosted+0x44>)
 8009fb6:	2205      	movs	r2, #5
 8009fb8:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8009fba:	2197      	movs	r1, #151	; 0x97
 8009fbc:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8009fc0:	f000 fd18 	bl	800a9f4 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	0c1b      	lsrs	r3, r3, #16
 8009fc8:	b2db      	uxtb	r3, r3
 8009fca:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	0a1b      	lsrs	r3, r3, #8
 8009fd0:	b2db      	uxtb	r3, r3
 8009fd2:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	b2db      	uxtb	r3, r3
 8009fd8:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8009fda:	f107 030c 	add.w	r3, r7, #12
 8009fde:	2203      	movs	r2, #3
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	2082      	movs	r0, #130	; 0x82
 8009fe4:	f000 fdb6 	bl	800ab54 <SUBGRF_WriteCommand>
}
 8009fe8:	bf00      	nop
 8009fea:	3710      	adds	r7, #16
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}
 8009ff0:	200004c4 	.word	0x200004c4

08009ff4 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b084      	sub	sp, #16
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	0c1b      	lsrs	r3, r3, #16
 800a002:	b2db      	uxtb	r3, r3
 800a004:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	0a1b      	lsrs	r3, r3, #8
 800a00a:	b2db      	uxtb	r3, r3
 800a00c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	b2db      	uxtb	r3, r3
 800a012:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	0c1b      	lsrs	r3, r3, #16
 800a018:	b2db      	uxtb	r3, r3
 800a01a:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	0a1b      	lsrs	r3, r3, #8
 800a020:	b2db      	uxtb	r3, r3
 800a022:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	b2db      	uxtb	r3, r3
 800a028:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800a02a:	f107 0308 	add.w	r3, r7, #8
 800a02e:	2206      	movs	r2, #6
 800a030:	4619      	mov	r1, r3
 800a032:	2094      	movs	r0, #148	; 0x94
 800a034:	f000 fd8e 	bl	800ab54 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 800a038:	4b03      	ldr	r3, [pc, #12]	; (800a048 <SUBGRF_SetRxDutyCycle+0x54>)
 800a03a:	2206      	movs	r2, #6
 800a03c:	701a      	strb	r2, [r3, #0]
}
 800a03e:	bf00      	nop
 800a040:	3710      	adds	r7, #16
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}
 800a046:	bf00      	nop
 800a048:	200004c4 	.word	0x200004c4

0800a04c <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800a050:	2200      	movs	r2, #0
 800a052:	2100      	movs	r1, #0
 800a054:	20c5      	movs	r0, #197	; 0xc5
 800a056:	f000 fd7d 	bl	800ab54 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800a05a:	4b02      	ldr	r3, [pc, #8]	; (800a064 <SUBGRF_SetCad+0x18>)
 800a05c:	2207      	movs	r2, #7
 800a05e:	701a      	strb	r2, [r3, #0]
}
 800a060:	bf00      	nop
 800a062:	bd80      	pop	{r7, pc}
 800a064:	200004c4 	.word	0x200004c4

0800a068 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800a06c:	2200      	movs	r2, #0
 800a06e:	2100      	movs	r1, #0
 800a070:	20d1      	movs	r0, #209	; 0xd1
 800a072:	f000 fd6f 	bl	800ab54 <SUBGRF_WriteCommand>
}
 800a076:	bf00      	nop
 800a078:	bd80      	pop	{r7, pc}

0800a07a <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 800a07a:	b580      	push	{r7, lr}
 800a07c:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800a07e:	2200      	movs	r2, #0
 800a080:	2100      	movs	r1, #0
 800a082:	20d2      	movs	r0, #210	; 0xd2
 800a084:	f000 fd66 	bl	800ab54 <SUBGRF_WriteCommand>
}
 800a088:	bf00      	nop
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b082      	sub	sp, #8
 800a090:	af00      	add	r7, sp, #0
 800a092:	4603      	mov	r3, r0
 800a094:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800a096:	1dfb      	adds	r3, r7, #7
 800a098:	2201      	movs	r2, #1
 800a09a:	4619      	mov	r1, r3
 800a09c:	209f      	movs	r0, #159	; 0x9f
 800a09e:	f000 fd59 	bl	800ab54 <SUBGRF_WriteCommand>
}
 800a0a2:	bf00      	nop
 800a0a4:	3708      	adds	r7, #8
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}

0800a0aa <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 800a0aa:	b580      	push	{r7, lr}
 800a0ac:	b084      	sub	sp, #16
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800a0b4:	1dfb      	adds	r3, r7, #7
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	20a0      	movs	r0, #160	; 0xa0
 800a0bc:	f000 fd4a 	bl	800ab54 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 800a0c0:	79fb      	ldrb	r3, [r7, #7]
 800a0c2:	2b3f      	cmp	r3, #63	; 0x3f
 800a0c4:	d91c      	bls.n	800a100 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 800a0c6:	79fb      	ldrb	r3, [r7, #7]
 800a0c8:	085b      	lsrs	r3, r3, #1
 800a0ca:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 800a0d4:	e005      	b.n	800a0e2 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 800a0d6:	7bfb      	ldrb	r3, [r7, #15]
 800a0d8:	089b      	lsrs	r3, r3, #2
 800a0da:	73fb      	strb	r3, [r7, #15]
            exp++;
 800a0dc:	7bbb      	ldrb	r3, [r7, #14]
 800a0de:	3301      	adds	r3, #1
 800a0e0:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 800a0e2:	7bfb      	ldrb	r3, [r7, #15]
 800a0e4:	2b1f      	cmp	r3, #31
 800a0e6:	d8f6      	bhi.n	800a0d6 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 800a0e8:	7bfb      	ldrb	r3, [r7, #15]
 800a0ea:	00db      	lsls	r3, r3, #3
 800a0ec:	b2da      	uxtb	r2, r3
 800a0ee:	7bbb      	ldrb	r3, [r7, #14]
 800a0f0:	4413      	add	r3, r2
 800a0f2:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800a0f4:	7b7b      	ldrb	r3, [r7, #13]
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	f240 7006 	movw	r0, #1798	; 0x706
 800a0fc:	f000 fc7a 	bl	800a9f4 <SUBGRF_WriteRegister>
    }
}
 800a100:	bf00      	nop
 800a102:	3710      	adds	r7, #16
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}

0800a108 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b082      	sub	sp, #8
 800a10c:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800a10e:	f001 fafe 	bl	800b70e <RBI_IsDCDC>
 800a112:	4603      	mov	r3, r0
 800a114:	2b01      	cmp	r3, #1
 800a116:	d102      	bne.n	800a11e <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 800a118:	2301      	movs	r3, #1
 800a11a:	71fb      	strb	r3, [r7, #7]
 800a11c:	e001      	b.n	800a122 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 800a11e:	2300      	movs	r3, #0
 800a120:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800a122:	1dfb      	adds	r3, r7, #7
 800a124:	2201      	movs	r2, #1
 800a126:	4619      	mov	r1, r3
 800a128:	2096      	movs	r0, #150	; 0x96
 800a12a:	f000 fd13 	bl	800ab54 <SUBGRF_WriteCommand>
}
 800a12e:	bf00      	nop
 800a130:	3708      	adds	r7, #8
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}

0800a136 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 800a136:	b580      	push	{r7, lr}
 800a138:	b084      	sub	sp, #16
 800a13a:	af00      	add	r7, sp, #0
 800a13c:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800a13e:	793b      	ldrb	r3, [r7, #4]
 800a140:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800a144:	b2db      	uxtb	r3, r3
 800a146:	019b      	lsls	r3, r3, #6
 800a148:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800a14a:	793b      	ldrb	r3, [r7, #4]
 800a14c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a150:	b2db      	uxtb	r3, r3
 800a152:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800a154:	b25b      	sxtb	r3, r3
 800a156:	4313      	orrs	r3, r2
 800a158:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800a15a:	793b      	ldrb	r3, [r7, #4]
 800a15c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a160:	b2db      	uxtb	r3, r3
 800a162:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800a164:	b25b      	sxtb	r3, r3
 800a166:	4313      	orrs	r3, r2
 800a168:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800a16a:	793b      	ldrb	r3, [r7, #4]
 800a16c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a170:	b2db      	uxtb	r3, r3
 800a172:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800a174:	b25b      	sxtb	r3, r3
 800a176:	4313      	orrs	r3, r2
 800a178:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800a17a:	793b      	ldrb	r3, [r7, #4]
 800a17c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a180:	b2db      	uxtb	r3, r3
 800a182:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800a184:	b25b      	sxtb	r3, r3
 800a186:	4313      	orrs	r3, r2
 800a188:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800a18a:	793b      	ldrb	r3, [r7, #4]
 800a18c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a190:	b2db      	uxtb	r3, r3
 800a192:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800a194:	b25b      	sxtb	r3, r3
 800a196:	4313      	orrs	r3, r2
 800a198:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800a19a:	793b      	ldrb	r3, [r7, #4]
 800a19c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a1a0:	b2db      	uxtb	r3, r3
 800a1a2:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	b25b      	sxtb	r3, r3
 800a1a8:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800a1aa:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800a1ac:	f107 030f 	add.w	r3, r7, #15
 800a1b0:	2201      	movs	r2, #1
 800a1b2:	4619      	mov	r1, r3
 800a1b4:	2089      	movs	r0, #137	; 0x89
 800a1b6:	f000 fccd 	bl	800ab54 <SUBGRF_WriteCommand>
}
 800a1ba:	bf00      	nop
 800a1bc:	3710      	adds	r7, #16
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
	...

0800a1c4 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b084      	sub	sp, #16
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	4a1b      	ldr	r2, [pc, #108]	; (800a23c <SUBGRF_CalibrateImage+0x78>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d904      	bls.n	800a1de <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 800a1d4:	23e1      	movs	r3, #225	; 0xe1
 800a1d6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 800a1d8:	23e9      	movs	r3, #233	; 0xe9
 800a1da:	737b      	strb	r3, [r7, #13]
 800a1dc:	e022      	b.n	800a224 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	4a17      	ldr	r2, [pc, #92]	; (800a240 <SUBGRF_CalibrateImage+0x7c>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d904      	bls.n	800a1f0 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800a1e6:	23d7      	movs	r3, #215	; 0xd7
 800a1e8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800a1ea:	23db      	movs	r3, #219	; 0xdb
 800a1ec:	737b      	strb	r3, [r7, #13]
 800a1ee:	e019      	b.n	800a224 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	4a14      	ldr	r2, [pc, #80]	; (800a244 <SUBGRF_CalibrateImage+0x80>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d904      	bls.n	800a202 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 800a1f8:	23c1      	movs	r3, #193	; 0xc1
 800a1fa:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 800a1fc:	23c5      	movs	r3, #197	; 0xc5
 800a1fe:	737b      	strb	r3, [r7, #13]
 800a200:	e010      	b.n	800a224 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	4a10      	ldr	r2, [pc, #64]	; (800a248 <SUBGRF_CalibrateImage+0x84>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d904      	bls.n	800a214 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 800a20a:	2375      	movs	r3, #117	; 0x75
 800a20c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 800a20e:	2381      	movs	r3, #129	; 0x81
 800a210:	737b      	strb	r3, [r7, #13]
 800a212:	e007      	b.n	800a224 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	4a0d      	ldr	r2, [pc, #52]	; (800a24c <SUBGRF_CalibrateImage+0x88>)
 800a218:	4293      	cmp	r3, r2
 800a21a:	d903      	bls.n	800a224 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 800a21c:	236b      	movs	r3, #107	; 0x6b
 800a21e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 800a220:	236f      	movs	r3, #111	; 0x6f
 800a222:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800a224:	f107 030c 	add.w	r3, r7, #12
 800a228:	2202      	movs	r2, #2
 800a22a:	4619      	mov	r1, r3
 800a22c:	2098      	movs	r0, #152	; 0x98
 800a22e:	f000 fc91 	bl	800ab54 <SUBGRF_WriteCommand>
}
 800a232:	bf00      	nop
 800a234:	3710      	adds	r7, #16
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
 800a23a:	bf00      	nop
 800a23c:	35a4e900 	.word	0x35a4e900
 800a240:	32a9f880 	.word	0x32a9f880
 800a244:	2de54480 	.word	0x2de54480
 800a248:	1b6b0b00 	.word	0x1b6b0b00
 800a24c:	1954fc40 	.word	0x1954fc40

0800a250 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 800a250:	b590      	push	{r4, r7, lr}
 800a252:	b085      	sub	sp, #20
 800a254:	af00      	add	r7, sp, #0
 800a256:	4604      	mov	r4, r0
 800a258:	4608      	mov	r0, r1
 800a25a:	4611      	mov	r1, r2
 800a25c:	461a      	mov	r2, r3
 800a25e:	4623      	mov	r3, r4
 800a260:	71fb      	strb	r3, [r7, #7]
 800a262:	4603      	mov	r3, r0
 800a264:	71bb      	strb	r3, [r7, #6]
 800a266:	460b      	mov	r3, r1
 800a268:	717b      	strb	r3, [r7, #5]
 800a26a:	4613      	mov	r3, r2
 800a26c:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800a26e:	79fb      	ldrb	r3, [r7, #7]
 800a270:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800a272:	79bb      	ldrb	r3, [r7, #6]
 800a274:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800a276:	797b      	ldrb	r3, [r7, #5]
 800a278:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800a27a:	793b      	ldrb	r3, [r7, #4]
 800a27c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800a27e:	f107 030c 	add.w	r3, r7, #12
 800a282:	2204      	movs	r2, #4
 800a284:	4619      	mov	r1, r3
 800a286:	2095      	movs	r0, #149	; 0x95
 800a288:	f000 fc64 	bl	800ab54 <SUBGRF_WriteCommand>
}
 800a28c:	bf00      	nop
 800a28e:	3714      	adds	r7, #20
 800a290:	46bd      	mov	sp, r7
 800a292:	bd90      	pop	{r4, r7, pc}

0800a294 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 800a294:	b590      	push	{r4, r7, lr}
 800a296:	b085      	sub	sp, #20
 800a298:	af00      	add	r7, sp, #0
 800a29a:	4604      	mov	r4, r0
 800a29c:	4608      	mov	r0, r1
 800a29e:	4611      	mov	r1, r2
 800a2a0:	461a      	mov	r2, r3
 800a2a2:	4623      	mov	r3, r4
 800a2a4:	80fb      	strh	r3, [r7, #6]
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	80bb      	strh	r3, [r7, #4]
 800a2aa:	460b      	mov	r3, r1
 800a2ac:	807b      	strh	r3, [r7, #2]
 800a2ae:	4613      	mov	r3, r2
 800a2b0:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800a2b2:	88fb      	ldrh	r3, [r7, #6]
 800a2b4:	0a1b      	lsrs	r3, r3, #8
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	b2db      	uxtb	r3, r3
 800a2ba:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800a2bc:	88fb      	ldrh	r3, [r7, #6]
 800a2be:	b2db      	uxtb	r3, r3
 800a2c0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800a2c2:	88bb      	ldrh	r3, [r7, #4]
 800a2c4:	0a1b      	lsrs	r3, r3, #8
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	b2db      	uxtb	r3, r3
 800a2ca:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800a2cc:	88bb      	ldrh	r3, [r7, #4]
 800a2ce:	b2db      	uxtb	r3, r3
 800a2d0:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800a2d2:	887b      	ldrh	r3, [r7, #2]
 800a2d4:	0a1b      	lsrs	r3, r3, #8
 800a2d6:	b29b      	uxth	r3, r3
 800a2d8:	b2db      	uxtb	r3, r3
 800a2da:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800a2dc:	887b      	ldrh	r3, [r7, #2]
 800a2de:	b2db      	uxtb	r3, r3
 800a2e0:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800a2e2:	883b      	ldrh	r3, [r7, #0]
 800a2e4:	0a1b      	lsrs	r3, r3, #8
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	b2db      	uxtb	r3, r3
 800a2ea:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800a2ec:	883b      	ldrh	r3, [r7, #0]
 800a2ee:	b2db      	uxtb	r3, r3
 800a2f0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800a2f2:	f107 0308 	add.w	r3, r7, #8
 800a2f6:	2208      	movs	r2, #8
 800a2f8:	4619      	mov	r1, r3
 800a2fa:	2008      	movs	r0, #8
 800a2fc:	f000 fc2a 	bl	800ab54 <SUBGRF_WriteCommand>
}
 800a300:	bf00      	nop
 800a302:	3714      	adds	r7, #20
 800a304:	46bd      	mov	sp, r7
 800a306:	bd90      	pop	{r4, r7, pc}

0800a308 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	4603      	mov	r3, r0
 800a310:	6039      	str	r1, [r7, #0]
 800a312:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 800a314:	79fb      	ldrb	r3, [r7, #7]
 800a316:	f003 0307 	and.w	r3, r3, #7
 800a31a:	b2db      	uxtb	r3, r3
 800a31c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	0c1b      	lsrs	r3, r3, #16
 800a322:	b2db      	uxtb	r3, r3
 800a324:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	0a1b      	lsrs	r3, r3, #8
 800a32a:	b2db      	uxtb	r3, r3
 800a32c:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	b2db      	uxtb	r3, r3
 800a332:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800a334:	f107 030c 	add.w	r3, r7, #12
 800a338:	2204      	movs	r2, #4
 800a33a:	4619      	mov	r1, r3
 800a33c:	2097      	movs	r0, #151	; 0x97
 800a33e:	f000 fc09 	bl	800ab54 <SUBGRF_WriteCommand>
}
 800a342:	bf00      	nop
 800a344:	3710      	adds	r7, #16
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}
	...

0800a34c <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 800a34c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a350:	b084      	sub	sp, #16
 800a352:	af00      	add	r7, sp, #0
 800a354:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800a356:	2300      	movs	r3, #0
 800a358:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800a35a:	4b1d      	ldr	r3, [pc, #116]	; (800a3d0 <SUBGRF_SetRfFrequency+0x84>)
 800a35c:	781b      	ldrb	r3, [r3, #0]
 800a35e:	f083 0301 	eor.w	r3, r3, #1
 800a362:	b2db      	uxtb	r3, r3
 800a364:	2b00      	cmp	r3, #0
 800a366:	d005      	beq.n	800a374 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f7ff ff2b 	bl	800a1c4 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800a36e:	4b18      	ldr	r3, [pc, #96]	; (800a3d0 <SUBGRF_SetRfFrequency+0x84>)
 800a370:	2201      	movs	r2, #1
 800a372:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2200      	movs	r2, #0
 800a378:	461c      	mov	r4, r3
 800a37a:	4615      	mov	r5, r2
 800a37c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800a380:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800a384:	4a13      	ldr	r2, [pc, #76]	; (800a3d4 <SUBGRF_SetRfFrequency+0x88>)
 800a386:	f04f 0300 	mov.w	r3, #0
 800a38a:	4640      	mov	r0, r8
 800a38c:	4649      	mov	r1, r9
 800a38e:	f7f5 ff4f 	bl	8000230 <__aeabi_uldivmod>
 800a392:	4602      	mov	r2, r0
 800a394:	460b      	mov	r3, r1
 800a396:	4613      	mov	r3, r2
 800a398:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	0e1b      	lsrs	r3, r3, #24
 800a39e:	b2db      	uxtb	r3, r3
 800a3a0:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	0c1b      	lsrs	r3, r3, #16
 800a3a6:	b2db      	uxtb	r3, r3
 800a3a8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	0a1b      	lsrs	r3, r3, #8
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	b2db      	uxtb	r3, r3
 800a3b6:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800a3b8:	f107 0308 	add.w	r3, r7, #8
 800a3bc:	2204      	movs	r2, #4
 800a3be:	4619      	mov	r1, r3
 800a3c0:	2086      	movs	r0, #134	; 0x86
 800a3c2:	f000 fbc7 	bl	800ab54 <SUBGRF_WriteCommand>
}
 800a3c6:	bf00      	nop
 800a3c8:	3710      	adds	r7, #16
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a3d0:	200004cc 	.word	0x200004cc
 800a3d4:	01e84800 	.word	0x01e84800

0800a3d8 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b082      	sub	sp, #8
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	4603      	mov	r3, r0
 800a3e0:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800a3e2:	79fa      	ldrb	r2, [r7, #7]
 800a3e4:	4b09      	ldr	r3, [pc, #36]	; (800a40c <SUBGRF_SetPacketType+0x34>)
 800a3e6:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 800a3e8:	79fb      	ldrb	r3, [r7, #7]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d104      	bne.n	800a3f8 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800a3ee:	2100      	movs	r1, #0
 800a3f0:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800a3f4:	f000 fafe 	bl	800a9f4 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800a3f8:	1dfb      	adds	r3, r7, #7
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	4619      	mov	r1, r3
 800a3fe:	208a      	movs	r0, #138	; 0x8a
 800a400:	f000 fba8 	bl	800ab54 <SUBGRF_WriteCommand>
}
 800a404:	bf00      	nop
 800a406:	3708      	adds	r7, #8
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}
 800a40c:	200004c5 	.word	0x200004c5

0800a410 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 800a410:	b480      	push	{r7}
 800a412:	af00      	add	r7, sp, #0
    return PacketType;
 800a414:	4b02      	ldr	r3, [pc, #8]	; (800a420 <SUBGRF_GetPacketType+0x10>)
 800a416:	781b      	ldrb	r3, [r3, #0]
}
 800a418:	4618      	mov	r0, r3
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bc80      	pop	{r7}
 800a41e:	4770      	bx	lr
 800a420:	200004c5 	.word	0x200004c5

0800a424 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b084      	sub	sp, #16
 800a428:	af00      	add	r7, sp, #0
 800a42a:	4603      	mov	r3, r0
 800a42c:	71fb      	strb	r3, [r7, #7]
 800a42e:	460b      	mov	r3, r1
 800a430:	71bb      	strb	r3, [r7, #6]
 800a432:	4613      	mov	r3, r2
 800a434:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 800a436:	79fb      	ldrb	r3, [r7, #7]
 800a438:	2b01      	cmp	r3, #1
 800a43a:	d149      	bne.n	800a4d0 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 800a43c:	2000      	movs	r0, #0
 800a43e:	f001 f96d 	bl	800b71c <RBI_GetRFOMaxPowerConfig>
 800a442:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 800a444:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a448:	68fa      	ldr	r2, [r7, #12]
 800a44a:	429a      	cmp	r2, r3
 800a44c:	da01      	bge.n	800a452 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	2b0e      	cmp	r3, #14
 800a456:	d10e      	bne.n	800a476 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 800a458:	2301      	movs	r3, #1
 800a45a:	2201      	movs	r2, #1
 800a45c:	2100      	movs	r1, #0
 800a45e:	2004      	movs	r0, #4
 800a460:	f7ff fef6 	bl	800a250 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800a464:	79ba      	ldrb	r2, [r7, #6]
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	b2db      	uxtb	r3, r3
 800a46a:	1ad3      	subs	r3, r2, r3
 800a46c:	b2db      	uxtb	r3, r3
 800a46e:	330e      	adds	r3, #14
 800a470:	b2db      	uxtb	r3, r3
 800a472:	71bb      	strb	r3, [r7, #6]
 800a474:	e01f      	b.n	800a4b6 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2b0a      	cmp	r3, #10
 800a47a:	d10e      	bne.n	800a49a <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 800a47c:	2301      	movs	r3, #1
 800a47e:	2201      	movs	r2, #1
 800a480:	2100      	movs	r1, #0
 800a482:	2001      	movs	r0, #1
 800a484:	f7ff fee4 	bl	800a250 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 800a488:	79ba      	ldrb	r2, [r7, #6]
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	b2db      	uxtb	r3, r3
 800a48e:	1ad3      	subs	r3, r2, r3
 800a490:	b2db      	uxtb	r3, r3
 800a492:	330d      	adds	r3, #13
 800a494:	b2db      	uxtb	r3, r3
 800a496:	71bb      	strb	r3, [r7, #6]
 800a498:	e00d      	b.n	800a4b6 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 800a49a:	2301      	movs	r3, #1
 800a49c:	2201      	movs	r2, #1
 800a49e:	2100      	movs	r1, #0
 800a4a0:	2006      	movs	r0, #6
 800a4a2:	f7ff fed5 	bl	800a250 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800a4a6:	79ba      	ldrb	r2, [r7, #6]
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	b2db      	uxtb	r3, r3
 800a4ac:	1ad3      	subs	r3, r2, r3
 800a4ae:	b2db      	uxtb	r3, r3
 800a4b0:	330e      	adds	r3, #14
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 800a4b6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a4ba:	f113 0f11 	cmn.w	r3, #17
 800a4be:	da01      	bge.n	800a4c4 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 800a4c0:	23ef      	movs	r3, #239	; 0xef
 800a4c2:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 800a4c4:	2118      	movs	r1, #24
 800a4c6:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800a4ca:	f000 fa93 	bl	800a9f4 <SUBGRF_WriteRegister>
 800a4ce:	e067      	b.n	800a5a0 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 800a4d0:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800a4d4:	f000 faa2 	bl	800aa1c <SUBGRF_ReadRegister>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	f043 031e 	orr.w	r3, r3, #30
 800a4de:	b2db      	uxtb	r3, r3
 800a4e0:	4619      	mov	r1, r3
 800a4e2:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800a4e6:	f000 fa85 	bl	800a9f4 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 800a4ea:	2001      	movs	r0, #1
 800a4ec:	f001 f916 	bl	800b71c <RBI_GetRFOMaxPowerConfig>
 800a4f0:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 800a4f2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a4f6:	68fa      	ldr	r2, [r7, #12]
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	da01      	bge.n	800a500 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2b14      	cmp	r3, #20
 800a504:	d10e      	bne.n	800a524 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 800a506:	2301      	movs	r3, #1
 800a508:	2200      	movs	r2, #0
 800a50a:	2105      	movs	r1, #5
 800a50c:	2003      	movs	r0, #3
 800a50e:	f7ff fe9f 	bl	800a250 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800a512:	79ba      	ldrb	r2, [r7, #6]
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	b2db      	uxtb	r3, r3
 800a518:	1ad3      	subs	r3, r2, r3
 800a51a:	b2db      	uxtb	r3, r3
 800a51c:	3316      	adds	r3, #22
 800a51e:	b2db      	uxtb	r3, r3
 800a520:	71bb      	strb	r3, [r7, #6]
 800a522:	e031      	b.n	800a588 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	2b11      	cmp	r3, #17
 800a528:	d10e      	bne.n	800a548 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 800a52a:	2301      	movs	r3, #1
 800a52c:	2200      	movs	r2, #0
 800a52e:	2103      	movs	r1, #3
 800a530:	2002      	movs	r0, #2
 800a532:	f7ff fe8d 	bl	800a250 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800a536:	79ba      	ldrb	r2, [r7, #6]
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	b2db      	uxtb	r3, r3
 800a53c:	1ad3      	subs	r3, r2, r3
 800a53e:	b2db      	uxtb	r3, r3
 800a540:	3316      	adds	r3, #22
 800a542:	b2db      	uxtb	r3, r3
 800a544:	71bb      	strb	r3, [r7, #6]
 800a546:	e01f      	b.n	800a588 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	2b0e      	cmp	r3, #14
 800a54c:	d10e      	bne.n	800a56c <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 800a54e:	2301      	movs	r3, #1
 800a550:	2200      	movs	r2, #0
 800a552:	2102      	movs	r1, #2
 800a554:	2002      	movs	r0, #2
 800a556:	f7ff fe7b 	bl	800a250 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800a55a:	79ba      	ldrb	r2, [r7, #6]
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	b2db      	uxtb	r3, r3
 800a560:	1ad3      	subs	r3, r2, r3
 800a562:	b2db      	uxtb	r3, r3
 800a564:	330e      	adds	r3, #14
 800a566:	b2db      	uxtb	r3, r3
 800a568:	71bb      	strb	r3, [r7, #6]
 800a56a:	e00d      	b.n	800a588 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 800a56c:	2301      	movs	r3, #1
 800a56e:	2200      	movs	r2, #0
 800a570:	2107      	movs	r1, #7
 800a572:	2004      	movs	r0, #4
 800a574:	f7ff fe6c 	bl	800a250 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800a578:	79ba      	ldrb	r2, [r7, #6]
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	b2db      	uxtb	r3, r3
 800a57e:	1ad3      	subs	r3, r2, r3
 800a580:	b2db      	uxtb	r3, r3
 800a582:	3316      	adds	r3, #22
 800a584:	b2db      	uxtb	r3, r3
 800a586:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 800a588:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a58c:	f113 0f09 	cmn.w	r3, #9
 800a590:	da01      	bge.n	800a596 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 800a592:	23f7      	movs	r3, #247	; 0xf7
 800a594:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800a596:	2138      	movs	r1, #56	; 0x38
 800a598:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800a59c:	f000 fa2a 	bl	800a9f4 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 800a5a0:	79bb      	ldrb	r3, [r7, #6]
 800a5a2:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 800a5a4:	797b      	ldrb	r3, [r7, #5]
 800a5a6:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 800a5a8:	f107 0308 	add.w	r3, r7, #8
 800a5ac:	2202      	movs	r2, #2
 800a5ae:	4619      	mov	r1, r3
 800a5b0:	208e      	movs	r0, #142	; 0x8e
 800a5b2:	f000 facf 	bl	800ab54 <SUBGRF_WriteCommand>
}
 800a5b6:	bf00      	nop
 800a5b8:	3710      	adds	r7, #16
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}
	...

0800a5c0 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 800a5c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a5c4:	b086      	sub	sp, #24
 800a5c6:	af00      	add	r7, sp, #0
 800a5c8:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800a5ce:	4a61      	ldr	r2, [pc, #388]	; (800a754 <SUBGRF_SetModulationParams+0x194>)
 800a5d0:	f107 0308 	add.w	r3, r7, #8
 800a5d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a5d8:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	781a      	ldrb	r2, [r3, #0]
 800a5e0:	4b5d      	ldr	r3, [pc, #372]	; (800a758 <SUBGRF_SetModulationParams+0x198>)
 800a5e2:	781b      	ldrb	r3, [r3, #0]
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d004      	beq.n	800a5f2 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	781b      	ldrb	r3, [r3, #0]
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f7ff fef3 	bl	800a3d8 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	781b      	ldrb	r3, [r3, #0]
 800a5f6:	2b03      	cmp	r3, #3
 800a5f8:	f200 80a5 	bhi.w	800a746 <SUBGRF_SetModulationParams+0x186>
 800a5fc:	a201      	add	r2, pc, #4	; (adr r2, 800a604 <SUBGRF_SetModulationParams+0x44>)
 800a5fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a602:	bf00      	nop
 800a604:	0800a615 	.word	0x0800a615
 800a608:	0800a6d5 	.word	0x0800a6d5
 800a60c:	0800a697 	.word	0x0800a697
 800a610:	0800a703 	.word	0x0800a703
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 800a614:	2308      	movs	r3, #8
 800a616:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	4a4f      	ldr	r2, [pc, #316]	; (800a75c <SUBGRF_SetModulationParams+0x19c>)
 800a61e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a622:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	0c1b      	lsrs	r3, r3, #16
 800a628:	b2db      	uxtb	r3, r3
 800a62a:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	0a1b      	lsrs	r3, r3, #8
 800a630:	b2db      	uxtb	r3, r3
 800a632:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	b2db      	uxtb	r3, r3
 800a638:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	7b1b      	ldrb	r3, [r3, #12]
 800a63e:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	7b5b      	ldrb	r3, [r3, #13]
 800a644:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	689b      	ldr	r3, [r3, #8]
 800a64a:	2200      	movs	r2, #0
 800a64c:	461c      	mov	r4, r3
 800a64e:	4615      	mov	r5, r2
 800a650:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800a654:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800a658:	4a41      	ldr	r2, [pc, #260]	; (800a760 <SUBGRF_SetModulationParams+0x1a0>)
 800a65a:	f04f 0300 	mov.w	r3, #0
 800a65e:	4640      	mov	r0, r8
 800a660:	4649      	mov	r1, r9
 800a662:	f7f5 fde5 	bl	8000230 <__aeabi_uldivmod>
 800a666:	4602      	mov	r2, r0
 800a668:	460b      	mov	r3, r1
 800a66a:	4613      	mov	r3, r2
 800a66c:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	0c1b      	lsrs	r3, r3, #16
 800a672:	b2db      	uxtb	r3, r3
 800a674:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	0a1b      	lsrs	r3, r3, #8
 800a67a:	b2db      	uxtb	r3, r3
 800a67c:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	b2db      	uxtb	r3, r3
 800a682:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800a684:	7cfb      	ldrb	r3, [r7, #19]
 800a686:	b29a      	uxth	r2, r3
 800a688:	f107 0308 	add.w	r3, r7, #8
 800a68c:	4619      	mov	r1, r3
 800a68e:	208b      	movs	r0, #139	; 0x8b
 800a690:	f000 fa60 	bl	800ab54 <SUBGRF_WriteCommand>
        break;
 800a694:	e058      	b.n	800a748 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 800a696:	2304      	movs	r3, #4
 800a698:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	691b      	ldr	r3, [r3, #16]
 800a69e:	4a2f      	ldr	r2, [pc, #188]	; (800a75c <SUBGRF_SetModulationParams+0x19c>)
 800a6a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6a4:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	0c1b      	lsrs	r3, r3, #16
 800a6aa:	b2db      	uxtb	r3, r3
 800a6ac:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	0a1b      	lsrs	r3, r3, #8
 800a6b2:	b2db      	uxtb	r3, r3
 800a6b4:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	b2db      	uxtb	r3, r3
 800a6ba:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	7d1b      	ldrb	r3, [r3, #20]
 800a6c0:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800a6c2:	7cfb      	ldrb	r3, [r7, #19]
 800a6c4:	b29a      	uxth	r2, r3
 800a6c6:	f107 0308 	add.w	r3, r7, #8
 800a6ca:	4619      	mov	r1, r3
 800a6cc:	208b      	movs	r0, #139	; 0x8b
 800a6ce:	f000 fa41 	bl	800ab54 <SUBGRF_WriteCommand>
        break;
 800a6d2:	e039      	b.n	800a748 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 800a6d4:	2304      	movs	r3, #4
 800a6d6:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	7e1b      	ldrb	r3, [r3, #24]
 800a6dc:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	7e5b      	ldrb	r3, [r3, #25]
 800a6e2:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	7e9b      	ldrb	r3, [r3, #26]
 800a6e8:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	7edb      	ldrb	r3, [r3, #27]
 800a6ee:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800a6f0:	7cfb      	ldrb	r3, [r7, #19]
 800a6f2:	b29a      	uxth	r2, r3
 800a6f4:	f107 0308 	add.w	r3, r7, #8
 800a6f8:	4619      	mov	r1, r3
 800a6fa:	208b      	movs	r0, #139	; 0x8b
 800a6fc:	f000 fa2a 	bl	800ab54 <SUBGRF_WriteCommand>

        break;
 800a700:	e022      	b.n	800a748 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 800a702:	2305      	movs	r3, #5
 800a704:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	4a14      	ldr	r2, [pc, #80]	; (800a75c <SUBGRF_SetModulationParams+0x19c>)
 800a70c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a710:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	0c1b      	lsrs	r3, r3, #16
 800a716:	b2db      	uxtb	r3, r3
 800a718:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	0a1b      	lsrs	r3, r3, #8
 800a71e:	b2db      	uxtb	r3, r3
 800a720:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	b2db      	uxtb	r3, r3
 800a726:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	7b1b      	ldrb	r3, [r3, #12]
 800a72c:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	7b5b      	ldrb	r3, [r3, #13]
 800a732:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800a734:	7cfb      	ldrb	r3, [r7, #19]
 800a736:	b29a      	uxth	r2, r3
 800a738:	f107 0308 	add.w	r3, r7, #8
 800a73c:	4619      	mov	r1, r3
 800a73e:	208b      	movs	r0, #139	; 0x8b
 800a740:	f000 fa08 	bl	800ab54 <SUBGRF_WriteCommand>
        break;
 800a744:	e000      	b.n	800a748 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 800a746:	bf00      	nop
    }
}
 800a748:	bf00      	nop
 800a74a:	3718      	adds	r7, #24
 800a74c:	46bd      	mov	sp, r7
 800a74e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a752:	bf00      	nop
 800a754:	0800de1c 	.word	0x0800de1c
 800a758:	200004c5 	.word	0x200004c5
 800a75c:	3d090000 	.word	0x3d090000
 800a760:	01e84800 	.word	0x01e84800

0800a764 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b086      	sub	sp, #24
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 800a76c:	2300      	movs	r3, #0
 800a76e:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800a770:	4a48      	ldr	r2, [pc, #288]	; (800a894 <SUBGRF_SetPacketParams+0x130>)
 800a772:	f107 030c 	add.w	r3, r7, #12
 800a776:	ca07      	ldmia	r2, {r0, r1, r2}
 800a778:	c303      	stmia	r3!, {r0, r1}
 800a77a:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	781a      	ldrb	r2, [r3, #0]
 800a780:	4b45      	ldr	r3, [pc, #276]	; (800a898 <SUBGRF_SetPacketParams+0x134>)
 800a782:	781b      	ldrb	r3, [r3, #0]
 800a784:	429a      	cmp	r2, r3
 800a786:	d004      	beq.n	800a792 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	781b      	ldrb	r3, [r3, #0]
 800a78c:	4618      	mov	r0, r3
 800a78e:	f7ff fe23 	bl	800a3d8 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	781b      	ldrb	r3, [r3, #0]
 800a796:	2b03      	cmp	r3, #3
 800a798:	d878      	bhi.n	800a88c <SUBGRF_SetPacketParams+0x128>
 800a79a:	a201      	add	r2, pc, #4	; (adr r2, 800a7a0 <SUBGRF_SetPacketParams+0x3c>)
 800a79c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7a0:	0800a7b1 	.word	0x0800a7b1
 800a7a4:	0800a841 	.word	0x0800a841
 800a7a8:	0800a835 	.word	0x0800a835
 800a7ac:	0800a7b1 	.word	0x0800a7b1
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	7a5b      	ldrb	r3, [r3, #9]
 800a7b4:	2bf1      	cmp	r3, #241	; 0xf1
 800a7b6:	d10a      	bne.n	800a7ce <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800a7b8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800a7bc:	f7ff faae 	bl	8009d1c <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800a7c0:	f248 0005 	movw	r0, #32773	; 0x8005
 800a7c4:	f7ff faca 	bl	8009d5c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800a7c8:	2302      	movs	r3, #2
 800a7ca:	75bb      	strb	r3, [r7, #22]
 800a7cc:	e011      	b.n	800a7f2 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	7a5b      	ldrb	r3, [r3, #9]
 800a7d2:	2bf2      	cmp	r3, #242	; 0xf2
 800a7d4:	d10a      	bne.n	800a7ec <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800a7d6:	f641 500f 	movw	r0, #7439	; 0x1d0f
 800a7da:	f7ff fa9f 	bl	8009d1c <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800a7de:	f241 0021 	movw	r0, #4129	; 0x1021
 800a7e2:	f7ff fabb 	bl	8009d5c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800a7e6:	2306      	movs	r3, #6
 800a7e8:	75bb      	strb	r3, [r7, #22]
 800a7ea:	e002      	b.n	800a7f2 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	7a5b      	ldrb	r3, [r3, #9]
 800a7f0:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 800a7f2:	2309      	movs	r3, #9
 800a7f4:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	885b      	ldrh	r3, [r3, #2]
 800a7fa:	0a1b      	lsrs	r3, r3, #8
 800a7fc:	b29b      	uxth	r3, r3
 800a7fe:	b2db      	uxtb	r3, r3
 800a800:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	885b      	ldrh	r3, [r3, #2]
 800a806:	b2db      	uxtb	r3, r3
 800a808:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	791b      	ldrb	r3, [r3, #4]
 800a80e:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	795b      	ldrb	r3, [r3, #5]
 800a814:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	799b      	ldrb	r3, [r3, #6]
 800a81a:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	79db      	ldrb	r3, [r3, #7]
 800a820:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	7a1b      	ldrb	r3, [r3, #8]
 800a826:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 800a828:	7dbb      	ldrb	r3, [r7, #22]
 800a82a:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	7a9b      	ldrb	r3, [r3, #10]
 800a830:	753b      	strb	r3, [r7, #20]
        break;
 800a832:	e022      	b.n	800a87a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 800a834:	2301      	movs	r3, #1
 800a836:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	7b1b      	ldrb	r3, [r3, #12]
 800a83c:	733b      	strb	r3, [r7, #12]
        break;
 800a83e:	e01c      	b.n	800a87a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 800a840:	2306      	movs	r3, #6
 800a842:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	89db      	ldrh	r3, [r3, #14]
 800a848:	0a1b      	lsrs	r3, r3, #8
 800a84a:	b29b      	uxth	r3, r3
 800a84c:	b2db      	uxtb	r3, r3
 800a84e:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	89db      	ldrh	r3, [r3, #14]
 800a854:	b2db      	uxtb	r3, r3
 800a856:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	7c1a      	ldrb	r2, [r3, #16]
 800a85c:	4b0f      	ldr	r3, [pc, #60]	; (800a89c <SUBGRF_SetPacketParams+0x138>)
 800a85e:	4611      	mov	r1, r2
 800a860:	7019      	strb	r1, [r3, #0]
 800a862:	4613      	mov	r3, r2
 800a864:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	7c5b      	ldrb	r3, [r3, #17]
 800a86a:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	7c9b      	ldrb	r3, [r3, #18]
 800a870:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	7cdb      	ldrb	r3, [r3, #19]
 800a876:	747b      	strb	r3, [r7, #17]
        break;
 800a878:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800a87a:	7dfb      	ldrb	r3, [r7, #23]
 800a87c:	b29a      	uxth	r2, r3
 800a87e:	f107 030c 	add.w	r3, r7, #12
 800a882:	4619      	mov	r1, r3
 800a884:	208c      	movs	r0, #140	; 0x8c
 800a886:	f000 f965 	bl	800ab54 <SUBGRF_WriteCommand>
 800a88a:	e000      	b.n	800a88e <SUBGRF_SetPacketParams+0x12a>
        return;
 800a88c:	bf00      	nop
}
 800a88e:	3718      	adds	r7, #24
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}
 800a894:	0800de24 	.word	0x0800de24
 800a898:	200004c5 	.word	0x200004c5
 800a89c:	200004c6 	.word	0x200004c6

0800a8a0 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b084      	sub	sp, #16
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	460a      	mov	r2, r1
 800a8aa:	71fb      	strb	r3, [r7, #7]
 800a8ac:	4613      	mov	r3, r2
 800a8ae:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 800a8b0:	79fb      	ldrb	r3, [r7, #7]
 800a8b2:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 800a8b4:	79bb      	ldrb	r3, [r7, #6]
 800a8b6:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800a8b8:	f107 030c 	add.w	r3, r7, #12
 800a8bc:	2202      	movs	r2, #2
 800a8be:	4619      	mov	r1, r3
 800a8c0:	208f      	movs	r0, #143	; 0x8f
 800a8c2:	f000 f947 	bl	800ab54 <SUBGRF_WriteCommand>
}
 800a8c6:	bf00      	nop
 800a8c8:	3710      	adds	r7, #16
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}

0800a8ce <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 800a8ce:	b580      	push	{r7, lr}
 800a8d0:	b082      	sub	sp, #8
 800a8d2:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800a8d8:	1d3b      	adds	r3, r7, #4
 800a8da:	2201      	movs	r2, #1
 800a8dc:	4619      	mov	r1, r3
 800a8de:	2015      	movs	r0, #21
 800a8e0:	f000 f95a 	bl	800ab98 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800a8e4:	793b      	ldrb	r3, [r7, #4]
 800a8e6:	425b      	negs	r3, r3
 800a8e8:	105b      	asrs	r3, r3, #1
 800a8ea:	71fb      	strb	r3, [r7, #7]
    return rssi;
 800a8ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3708      	adds	r7, #8
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}

0800a8f8 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b084      	sub	sp, #16
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
 800a900:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800a902:	f107 030c 	add.w	r3, r7, #12
 800a906:	2202      	movs	r2, #2
 800a908:	4619      	mov	r1, r3
 800a90a:	2013      	movs	r0, #19
 800a90c:	f000 f944 	bl	800ab98 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800a910:	f7ff fd7e 	bl	800a410 <SUBGRF_GetPacketType>
 800a914:	4603      	mov	r3, r0
 800a916:	2b01      	cmp	r3, #1
 800a918:	d10d      	bne.n	800a936 <SUBGRF_GetRxBufferStatus+0x3e>
 800a91a:	4b0c      	ldr	r3, [pc, #48]	; (800a94c <SUBGRF_GetRxBufferStatus+0x54>)
 800a91c:	781b      	ldrb	r3, [r3, #0]
 800a91e:	b2db      	uxtb	r3, r3
 800a920:	2b01      	cmp	r3, #1
 800a922:	d108      	bne.n	800a936 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800a924:	f240 7002 	movw	r0, #1794	; 0x702
 800a928:	f000 f878 	bl	800aa1c <SUBGRF_ReadRegister>
 800a92c:	4603      	mov	r3, r0
 800a92e:	461a      	mov	r2, r3
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	701a      	strb	r2, [r3, #0]
 800a934:	e002      	b.n	800a93c <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 800a936:	7b3a      	ldrb	r2, [r7, #12]
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 800a93c:	7b7a      	ldrb	r2, [r7, #13]
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	701a      	strb	r2, [r3, #0]
}
 800a942:	bf00      	nop
 800a944:	3710      	adds	r7, #16
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}
 800a94a:	bf00      	nop
 800a94c:	200004c6 	.word	0x200004c6

0800a950 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b084      	sub	sp, #16
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800a958:	f107 030c 	add.w	r3, r7, #12
 800a95c:	2203      	movs	r2, #3
 800a95e:	4619      	mov	r1, r3
 800a960:	2014      	movs	r0, #20
 800a962:	f000 f919 	bl	800ab98 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800a966:	f7ff fd53 	bl	800a410 <SUBGRF_GetPacketType>
 800a96a:	4603      	mov	r3, r0
 800a96c:	461a      	mov	r2, r3
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	781b      	ldrb	r3, [r3, #0]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d002      	beq.n	800a980 <SUBGRF_GetPacketStatus+0x30>
 800a97a:	2b01      	cmp	r3, #1
 800a97c:	d013      	beq.n	800a9a6 <SUBGRF_GetPacketStatus+0x56>
 800a97e:	e02a      	b.n	800a9d6 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800a980:	7b3a      	ldrb	r2, [r7, #12]
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800a986:	7b7b      	ldrb	r3, [r7, #13]
 800a988:	425b      	negs	r3, r3
 800a98a:	105b      	asrs	r3, r3, #1
 800a98c:	b25a      	sxtb	r2, r3
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800a992:	7bbb      	ldrb	r3, [r7, #14]
 800a994:	425b      	negs	r3, r3
 800a996:	105b      	asrs	r3, r3, #1
 800a998:	b25a      	sxtb	r2, r3
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	609a      	str	r2, [r3, #8]
            break;
 800a9a4:	e020      	b.n	800a9e8 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800a9a6:	7b3b      	ldrb	r3, [r7, #12]
 800a9a8:	425b      	negs	r3, r3
 800a9aa:	105b      	asrs	r3, r3, #1
 800a9ac:	b25a      	sxtb	r2, r3
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800a9b2:	7b7b      	ldrb	r3, [r7, #13]
 800a9b4:	b25b      	sxtb	r3, r3
 800a9b6:	3302      	adds	r3, #2
 800a9b8:	109b      	asrs	r3, r3, #2
 800a9ba:	b25a      	sxtb	r2, r3
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800a9c0:	7bbb      	ldrb	r3, [r7, #14]
 800a9c2:	425b      	negs	r3, r3
 800a9c4:	105b      	asrs	r3, r3, #1
 800a9c6:	b25a      	sxtb	r2, r3
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800a9cc:	4b08      	ldr	r3, [pc, #32]	; (800a9f0 <SUBGRF_GetPacketStatus+0xa0>)
 800a9ce:	681a      	ldr	r2, [r3, #0]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	611a      	str	r2, [r3, #16]
            break;
 800a9d4:	e008      	b.n	800a9e8 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800a9d6:	2214      	movs	r2, #20
 800a9d8:	2100      	movs	r1, #0
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f000 ff71 	bl	800b8c2 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	220f      	movs	r2, #15
 800a9e4:	701a      	strb	r2, [r3, #0]
            break;
 800a9e6:	bf00      	nop
    }
}
 800a9e8:	bf00      	nop
 800a9ea:	3710      	adds	r7, #16
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}
 800a9f0:	200004c8 	.word	0x200004c8

0800a9f4 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b082      	sub	sp, #8
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	460a      	mov	r2, r1
 800a9fe:	80fb      	strh	r3, [r7, #6]
 800aa00:	4613      	mov	r3, r2
 800aa02:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800aa04:	1d7a      	adds	r2, r7, #5
 800aa06:	88f9      	ldrh	r1, [r7, #6]
 800aa08:	2301      	movs	r3, #1
 800aa0a:	4803      	ldr	r0, [pc, #12]	; (800aa18 <SUBGRF_WriteRegister+0x24>)
 800aa0c:	f7fa fbc8 	bl	80051a0 <HAL_SUBGHZ_WriteRegisters>
}
 800aa10:	bf00      	nop
 800aa12:	3708      	adds	r7, #8
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}
 800aa18:	2000018c 	.word	0x2000018c

0800aa1c <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b084      	sub	sp, #16
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	4603      	mov	r3, r0
 800aa24:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800aa26:	f107 020f 	add.w	r2, r7, #15
 800aa2a:	88f9      	ldrh	r1, [r7, #6]
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	4804      	ldr	r0, [pc, #16]	; (800aa40 <SUBGRF_ReadRegister+0x24>)
 800aa30:	f7fa fc15 	bl	800525e <HAL_SUBGHZ_ReadRegisters>
    return data;
 800aa34:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3710      	adds	r7, #16
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
 800aa3e:	bf00      	nop
 800aa40:	2000018c 	.word	0x2000018c

0800aa44 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b086      	sub	sp, #24
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	6039      	str	r1, [r7, #0]
 800aa4e:	80fb      	strh	r3, [r7, #6]
 800aa50:	4613      	mov	r3, r2
 800aa52:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa54:	f3ef 8310 	mrs	r3, PRIMASK
 800aa58:	60fb      	str	r3, [r7, #12]
  return(result);
 800aa5a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800aa5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aa5e:	b672      	cpsid	i
}
 800aa60:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800aa62:	88bb      	ldrh	r3, [r7, #4]
 800aa64:	88f9      	ldrh	r1, [r7, #6]
 800aa66:	683a      	ldr	r2, [r7, #0]
 800aa68:	4806      	ldr	r0, [pc, #24]	; (800aa84 <SUBGRF_WriteRegisters+0x40>)
 800aa6a:	f7fa fb99 	bl	80051a0 <HAL_SUBGHZ_WriteRegisters>
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	f383 8810 	msr	PRIMASK, r3
}
 800aa78:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800aa7a:	bf00      	nop
 800aa7c:	3718      	adds	r7, #24
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}
 800aa82:	bf00      	nop
 800aa84:	2000018c 	.word	0x2000018c

0800aa88 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b086      	sub	sp, #24
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	4603      	mov	r3, r0
 800aa90:	6039      	str	r1, [r7, #0]
 800aa92:	80fb      	strh	r3, [r7, #6]
 800aa94:	4613      	mov	r3, r2
 800aa96:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa98:	f3ef 8310 	mrs	r3, PRIMASK
 800aa9c:	60fb      	str	r3, [r7, #12]
  return(result);
 800aa9e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800aaa0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aaa2:	b672      	cpsid	i
}
 800aaa4:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800aaa6:	88bb      	ldrh	r3, [r7, #4]
 800aaa8:	88f9      	ldrh	r1, [r7, #6]
 800aaaa:	683a      	ldr	r2, [r7, #0]
 800aaac:	4806      	ldr	r0, [pc, #24]	; (800aac8 <SUBGRF_ReadRegisters+0x40>)
 800aaae:	f7fa fbd6 	bl	800525e <HAL_SUBGHZ_ReadRegisters>
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	f383 8810 	msr	PRIMASK, r3
}
 800aabc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800aabe:	bf00      	nop
 800aac0:	3718      	adds	r7, #24
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}
 800aac6:	bf00      	nop
 800aac8:	2000018c 	.word	0x2000018c

0800aacc <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b086      	sub	sp, #24
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	4603      	mov	r3, r0
 800aad4:	6039      	str	r1, [r7, #0]
 800aad6:	71fb      	strb	r3, [r7, #7]
 800aad8:	4613      	mov	r3, r2
 800aada:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aadc:	f3ef 8310 	mrs	r3, PRIMASK
 800aae0:	60fb      	str	r3, [r7, #12]
  return(result);
 800aae2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800aae4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aae6:	b672      	cpsid	i
}
 800aae8:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800aaea:	79bb      	ldrb	r3, [r7, #6]
 800aaec:	b29b      	uxth	r3, r3
 800aaee:	79f9      	ldrb	r1, [r7, #7]
 800aaf0:	683a      	ldr	r2, [r7, #0]
 800aaf2:	4806      	ldr	r0, [pc, #24]	; (800ab0c <SUBGRF_WriteBuffer+0x40>)
 800aaf4:	f7fa fcc7 	bl	8005486 <HAL_SUBGHZ_WriteBuffer>
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	f383 8810 	msr	PRIMASK, r3
}
 800ab02:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800ab04:	bf00      	nop
 800ab06:	3718      	adds	r7, #24
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}
 800ab0c:	2000018c 	.word	0x2000018c

0800ab10 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b086      	sub	sp, #24
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	4603      	mov	r3, r0
 800ab18:	6039      	str	r1, [r7, #0]
 800ab1a:	71fb      	strb	r3, [r7, #7]
 800ab1c:	4613      	mov	r3, r2
 800ab1e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab20:	f3ef 8310 	mrs	r3, PRIMASK
 800ab24:	60fb      	str	r3, [r7, #12]
  return(result);
 800ab26:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800ab28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ab2a:	b672      	cpsid	i
}
 800ab2c:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800ab2e:	79bb      	ldrb	r3, [r7, #6]
 800ab30:	b29b      	uxth	r3, r3
 800ab32:	79f9      	ldrb	r1, [r7, #7]
 800ab34:	683a      	ldr	r2, [r7, #0]
 800ab36:	4806      	ldr	r0, [pc, #24]	; (800ab50 <SUBGRF_ReadBuffer+0x40>)
 800ab38:	f7fa fcf8 	bl	800552c <HAL_SUBGHZ_ReadBuffer>
 800ab3c:	697b      	ldr	r3, [r7, #20]
 800ab3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	f383 8810 	msr	PRIMASK, r3
}
 800ab46:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800ab48:	bf00      	nop
 800ab4a:	3718      	adds	r7, #24
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}
 800ab50:	2000018c 	.word	0x2000018c

0800ab54 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b086      	sub	sp, #24
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	6039      	str	r1, [r7, #0]
 800ab5e:	71fb      	strb	r3, [r7, #7]
 800ab60:	4613      	mov	r3, r2
 800ab62:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab64:	f3ef 8310 	mrs	r3, PRIMASK
 800ab68:	60fb      	str	r3, [r7, #12]
  return(result);
 800ab6a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800ab6c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ab6e:	b672      	cpsid	i
}
 800ab70:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800ab72:	88bb      	ldrh	r3, [r7, #4]
 800ab74:	79f9      	ldrb	r1, [r7, #7]
 800ab76:	683a      	ldr	r2, [r7, #0]
 800ab78:	4806      	ldr	r0, [pc, #24]	; (800ab94 <SUBGRF_WriteCommand+0x40>)
 800ab7a:	f7fa fbd1 	bl	8005320 <HAL_SUBGHZ_ExecSetCmd>
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	f383 8810 	msr	PRIMASK, r3
}
 800ab88:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800ab8a:	bf00      	nop
 800ab8c:	3718      	adds	r7, #24
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}
 800ab92:	bf00      	nop
 800ab94:	2000018c 	.word	0x2000018c

0800ab98 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b086      	sub	sp, #24
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	4603      	mov	r3, r0
 800aba0:	6039      	str	r1, [r7, #0]
 800aba2:	71fb      	strb	r3, [r7, #7]
 800aba4:	4613      	mov	r3, r2
 800aba6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aba8:	f3ef 8310 	mrs	r3, PRIMASK
 800abac:	60fb      	str	r3, [r7, #12]
  return(result);
 800abae:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800abb0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800abb2:	b672      	cpsid	i
}
 800abb4:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800abb6:	88bb      	ldrh	r3, [r7, #4]
 800abb8:	79f9      	ldrb	r1, [r7, #7]
 800abba:	683a      	ldr	r2, [r7, #0]
 800abbc:	4806      	ldr	r0, [pc, #24]	; (800abd8 <SUBGRF_ReadCommand+0x40>)
 800abbe:	f7fa fc0e 	bl	80053de <HAL_SUBGHZ_ExecGetCmd>
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abc6:	693b      	ldr	r3, [r7, #16]
 800abc8:	f383 8810 	msr	PRIMASK, r3
}
 800abcc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800abce:	bf00      	nop
 800abd0:	3718      	adds	r7, #24
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}
 800abd6:	bf00      	nop
 800abd8:	2000018c 	.word	0x2000018c

0800abdc <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b084      	sub	sp, #16
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	4603      	mov	r3, r0
 800abe4:	460a      	mov	r2, r1
 800abe6:	71fb      	strb	r3, [r7, #7]
 800abe8:	4613      	mov	r3, r2
 800abea:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800abec:	2301      	movs	r3, #1
 800abee:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800abf0:	79bb      	ldrb	r3, [r7, #6]
 800abf2:	2b01      	cmp	r3, #1
 800abf4:	d10d      	bne.n	800ac12 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800abf6:	79fb      	ldrb	r3, [r7, #7]
 800abf8:	2b01      	cmp	r3, #1
 800abfa:	d104      	bne.n	800ac06 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800abfc:	2302      	movs	r3, #2
 800abfe:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800ac00:	2004      	movs	r0, #4
 800ac02:	f000 f8df 	bl	800adc4 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800ac06:	79fb      	ldrb	r3, [r7, #7]
 800ac08:	2b02      	cmp	r3, #2
 800ac0a:	d107      	bne.n	800ac1c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800ac0c:	2303      	movs	r3, #3
 800ac0e:	73fb      	strb	r3, [r7, #15]
 800ac10:	e004      	b.n	800ac1c <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800ac12:	79bb      	ldrb	r3, [r7, #6]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d101      	bne.n	800ac1c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800ac18:	2301      	movs	r3, #1
 800ac1a:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800ac1c:	7bfb      	ldrb	r3, [r7, #15]
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f000 fd59 	bl	800b6d6 <RBI_ConfigRFSwitch>
}
 800ac24:	bf00      	nop
 800ac26:	3710      	adds	r7, #16
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}

0800ac2c <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b084      	sub	sp, #16
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	4603      	mov	r3, r0
 800ac34:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800ac36:	2301      	movs	r3, #1
 800ac38:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800ac3a:	f000 fd5a 	bl	800b6f2 <RBI_GetTxConfig>
 800ac3e:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	2b02      	cmp	r3, #2
 800ac44:	d016      	beq.n	800ac74 <SUBGRF_SetRfTxPower+0x48>
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	2b02      	cmp	r3, #2
 800ac4a:	dc16      	bgt.n	800ac7a <SUBGRF_SetRfTxPower+0x4e>
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d003      	beq.n	800ac5a <SUBGRF_SetRfTxPower+0x2e>
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	2b01      	cmp	r3, #1
 800ac56:	d00a      	beq.n	800ac6e <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800ac58:	e00f      	b.n	800ac7a <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800ac5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac5e:	2b0f      	cmp	r3, #15
 800ac60:	dd02      	ble.n	800ac68 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800ac62:	2302      	movs	r3, #2
 800ac64:	73fb      	strb	r3, [r7, #15]
            break;
 800ac66:	e009      	b.n	800ac7c <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800ac68:	2301      	movs	r3, #1
 800ac6a:	73fb      	strb	r3, [r7, #15]
            break;
 800ac6c:	e006      	b.n	800ac7c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800ac6e:	2301      	movs	r3, #1
 800ac70:	73fb      	strb	r3, [r7, #15]
            break;
 800ac72:	e003      	b.n	800ac7c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800ac74:	2302      	movs	r3, #2
 800ac76:	73fb      	strb	r3, [r7, #15]
            break;
 800ac78:	e000      	b.n	800ac7c <SUBGRF_SetRfTxPower+0x50>
            break;
 800ac7a:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800ac7c:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800ac80:	7bfb      	ldrb	r3, [r7, #15]
 800ac82:	2202      	movs	r2, #2
 800ac84:	4618      	mov	r0, r3
 800ac86:	f7ff fbcd 	bl	800a424 <SUBGRF_SetTxParams>

    return paSelect;
 800ac8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	3710      	adds	r7, #16
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}

0800ac94 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800ac94:	b480      	push	{r7}
 800ac96:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800ac98:	2301      	movs	r3, #1
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bc80      	pop	{r7}
 800aca0:	4770      	bx	lr
	...

0800aca4 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b082      	sub	sp, #8
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800acac:	4b03      	ldr	r3, [pc, #12]	; (800acbc <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	2001      	movs	r0, #1
 800acb2:	4798      	blx	r3
}
 800acb4:	bf00      	nop
 800acb6:	3708      	adds	r7, #8
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}
 800acbc:	200004d0 	.word	0x200004d0

0800acc0 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b082      	sub	sp, #8
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800acc8:	4b03      	ldr	r3, [pc, #12]	; (800acd8 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	2002      	movs	r0, #2
 800acce:	4798      	blx	r3
}
 800acd0:	bf00      	nop
 800acd2:	3708      	adds	r7, #8
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}
 800acd8:	200004d0 	.word	0x200004d0

0800acdc <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b082      	sub	sp, #8
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800ace4:	4b03      	ldr	r3, [pc, #12]	; (800acf4 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	2040      	movs	r0, #64	; 0x40
 800acea:	4798      	blx	r3
}
 800acec:	bf00      	nop
 800acee:	3708      	adds	r7, #8
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}
 800acf4:	200004d0 	.word	0x200004d0

0800acf8 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b082      	sub	sp, #8
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
 800ad00:	460b      	mov	r3, r1
 800ad02:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800ad04:	78fb      	ldrb	r3, [r7, #3]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d002      	beq.n	800ad10 <HAL_SUBGHZ_CADStatusCallback+0x18>
 800ad0a:	2b01      	cmp	r3, #1
 800ad0c:	d005      	beq.n	800ad1a <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800ad0e:	e00a      	b.n	800ad26 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800ad10:	4b07      	ldr	r3, [pc, #28]	; (800ad30 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	2080      	movs	r0, #128	; 0x80
 800ad16:	4798      	blx	r3
            break;
 800ad18:	e005      	b.n	800ad26 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800ad1a:	4b05      	ldr	r3, [pc, #20]	; (800ad30 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	f44f 7080 	mov.w	r0, #256	; 0x100
 800ad22:	4798      	blx	r3
            break;
 800ad24:	bf00      	nop
    }
}
 800ad26:	bf00      	nop
 800ad28:	3708      	adds	r7, #8
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	bf00      	nop
 800ad30:	200004d0 	.word	0x200004d0

0800ad34 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b082      	sub	sp, #8
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800ad3c:	4b04      	ldr	r3, [pc, #16]	; (800ad50 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f44f 7000 	mov.w	r0, #512	; 0x200
 800ad44:	4798      	blx	r3
}
 800ad46:	bf00      	nop
 800ad48:	3708      	adds	r7, #8
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}
 800ad4e:	bf00      	nop
 800ad50:	200004d0 	.word	0x200004d0

0800ad54 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b082      	sub	sp, #8
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800ad5c:	4b03      	ldr	r3, [pc, #12]	; (800ad6c <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	2020      	movs	r0, #32
 800ad62:	4798      	blx	r3
}
 800ad64:	bf00      	nop
 800ad66:	3708      	adds	r7, #8
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}
 800ad6c:	200004d0 	.word	0x200004d0

0800ad70 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b082      	sub	sp, #8
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800ad78:	4b03      	ldr	r3, [pc, #12]	; (800ad88 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	2004      	movs	r0, #4
 800ad7e:	4798      	blx	r3
}
 800ad80:	bf00      	nop
 800ad82:	3708      	adds	r7, #8
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}
 800ad88:	200004d0 	.word	0x200004d0

0800ad8c <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b082      	sub	sp, #8
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800ad94:	4b03      	ldr	r3, [pc, #12]	; (800ada4 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	2008      	movs	r0, #8
 800ad9a:	4798      	blx	r3
}
 800ad9c:	bf00      	nop
 800ad9e:	3708      	adds	r7, #8
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}
 800ada4:	200004d0 	.word	0x200004d0

0800ada8 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800adb0:	4b03      	ldr	r3, [pc, #12]	; (800adc0 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	2010      	movs	r0, #16
 800adb6:	4798      	blx	r3
}
 800adb8:	bf00      	nop
 800adba:	3708      	adds	r7, #8
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}
 800adc0:	200004d0 	.word	0x200004d0

0800adc4 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b084      	sub	sp, #16
 800adc8:	af00      	add	r7, sp, #0
 800adca:	4603      	mov	r3, r0
 800adcc:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800adce:	f000 fc9e 	bl	800b70e <RBI_IsDCDC>
 800add2:	4603      	mov	r3, r0
 800add4:	2b01      	cmp	r3, #1
 800add6:	d112      	bne.n	800adfe <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800add8:	f640 1023 	movw	r0, #2339	; 0x923
 800addc:	f7ff fe1e 	bl	800aa1c <SUBGRF_ReadRegister>
 800ade0:	4603      	mov	r3, r0
 800ade2:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800ade4:	7bfb      	ldrb	r3, [r7, #15]
 800ade6:	f023 0306 	bic.w	r3, r3, #6
 800adea:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800adec:	7bfa      	ldrb	r2, [r7, #15]
 800adee:	79fb      	ldrb	r3, [r7, #7]
 800adf0:	4313      	orrs	r3, r2
 800adf2:	b2db      	uxtb	r3, r3
 800adf4:	4619      	mov	r1, r3
 800adf6:	f640 1023 	movw	r0, #2339	; 0x923
 800adfa:	f7ff fdfb 	bl	800a9f4 <SUBGRF_WriteRegister>
  }
}
 800adfe:	bf00      	nop
 800ae00:	3710      	adds	r7, #16
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}
	...

0800ae08 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b085      	sub	sp, #20
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d101      	bne.n	800ae1a <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800ae16:	231f      	movs	r3, #31
 800ae18:	e016      	b.n	800ae48 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	73fb      	strb	r3, [r7, #15]
 800ae1e:	e00f      	b.n	800ae40 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800ae20:	7bfb      	ldrb	r3, [r7, #15]
 800ae22:	4a0c      	ldr	r2, [pc, #48]	; (800ae54 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800ae24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ae28:	687a      	ldr	r2, [r7, #4]
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d205      	bcs.n	800ae3a <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800ae2e:	7bfb      	ldrb	r3, [r7, #15]
 800ae30:	4a08      	ldr	r2, [pc, #32]	; (800ae54 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800ae32:	00db      	lsls	r3, r3, #3
 800ae34:	4413      	add	r3, r2
 800ae36:	791b      	ldrb	r3, [r3, #4]
 800ae38:	e006      	b.n	800ae48 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800ae3a:	7bfb      	ldrb	r3, [r7, #15]
 800ae3c:	3301      	adds	r3, #1
 800ae3e:	73fb      	strb	r3, [r7, #15]
 800ae40:	7bfb      	ldrb	r3, [r7, #15]
 800ae42:	2b15      	cmp	r3, #21
 800ae44:	d9ec      	bls.n	800ae20 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 800ae46:	e7fe      	b.n	800ae46 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3714      	adds	r7, #20
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bc80      	pop	{r7}
 800ae50:	4770      	bx	lr
 800ae52:	bf00      	nop
 800ae54:	0800e18c 	.word	0x0800e18c

0800ae58 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b08a      	sub	sp, #40	; 0x28
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
 800ae60:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800ae62:	4b35      	ldr	r3, [pc, #212]	; (800af38 <SUBGRF_GetCFO+0xe0>)
 800ae64:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 800ae66:	f640 0007 	movw	r0, #2055	; 0x807
 800ae6a:	f7ff fdd7 	bl	800aa1c <SUBGRF_ReadRegister>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800ae72:	7ffb      	ldrb	r3, [r7, #31]
 800ae74:	08db      	lsrs	r3, r3, #3
 800ae76:	b2db      	uxtb	r3, r3
 800ae78:	f003 0303 	and.w	r3, r3, #3
 800ae7c:	3328      	adds	r3, #40	; 0x28
 800ae7e:	443b      	add	r3, r7
 800ae80:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800ae84:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800ae86:	7ffb      	ldrb	r3, [r7, #31]
 800ae88:	f003 0307 	and.w	r3, r3, #7
 800ae8c:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 800ae8e:	7fba      	ldrb	r2, [r7, #30]
 800ae90:	7f7b      	ldrb	r3, [r7, #29]
 800ae92:	3b01      	subs	r3, #1
 800ae94:	fa02 f303 	lsl.w	r3, r2, r3
 800ae98:	461a      	mov	r2, r3
 800ae9a:	4b28      	ldr	r3, [pc, #160]	; (800af3c <SUBGRF_GetCFO+0xe4>)
 800ae9c:	fbb3 f3f2 	udiv	r3, r3, r2
 800aea0:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800aea2:	69ba      	ldr	r2, [r7, #24]
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	fbb2 f3f3 	udiv	r3, r2, r3
 800aeaa:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800aeac:	2301      	movs	r3, #1
 800aeae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800aeb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aeb6:	697a      	ldr	r2, [r7, #20]
 800aeb8:	fb02 f303 	mul.w	r3, r2, r3
 800aebc:	2b07      	cmp	r3, #7
 800aebe:	d802      	bhi.n	800aec6 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 800aec0:	2302      	movs	r3, #2
 800aec2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 800aec6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aeca:	697a      	ldr	r2, [r7, #20]
 800aecc:	fb02 f303 	mul.w	r3, r2, r3
 800aed0:	2b03      	cmp	r3, #3
 800aed2:	d802      	bhi.n	800aeda <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 800aed4:	2304      	movs	r3, #4
 800aed6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800aeda:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800aede:	69bb      	ldr	r3, [r7, #24]
 800aee0:	fb02 f303 	mul.w	r3, r2, r3
 800aee4:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800aee6:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 800aeea:	f7ff fd97 	bl	800aa1c <SUBGRF_ReadRegister>
 800aeee:	4603      	mov	r3, r0
 800aef0:	021b      	lsls	r3, r3, #8
 800aef2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800aef6:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800aef8:	f240 60b1 	movw	r0, #1713	; 0x6b1
 800aefc:	f7ff fd8e 	bl	800aa1c <SUBGRF_ReadRegister>
 800af00:	4603      	mov	r3, r0
 800af02:	461a      	mov	r2, r3
 800af04:	6a3b      	ldr	r3, [r7, #32]
 800af06:	4313      	orrs	r3, r2
 800af08:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800af0a:	6a3b      	ldr	r3, [r7, #32]
 800af0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af10:	2b00      	cmp	r3, #0
 800af12:	d005      	beq.n	800af20 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 800af14:	6a3b      	ldr	r3, [r7, #32]
 800af16:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800af1a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800af1e:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	095b      	lsrs	r3, r3, #5
 800af24:	6a3a      	ldr	r2, [r7, #32]
 800af26:	fb02 f303 	mul.w	r3, r2, r3
 800af2a:	11da      	asrs	r2, r3, #7
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	601a      	str	r2, [r3, #0]
}
 800af30:	bf00      	nop
 800af32:	3728      	adds	r7, #40	; 0x28
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}
 800af38:	0c0a0804 	.word	0x0c0a0804
 800af3c:	01e84800 	.word	0x01e84800

0800af40 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 800af40:	b480      	push	{r7}
 800af42:	b087      	sub	sp, #28
 800af44:	af00      	add	r7, sp, #0
 800af46:	4603      	mov	r3, r0
 800af48:	60b9      	str	r1, [r7, #8]
 800af4a:	607a      	str	r2, [r7, #4]
 800af4c:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 800af4e:	2300      	movs	r3, #0
 800af50:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 800af52:	f04f 33ff 	mov.w	r3, #4294967295
 800af56:	617b      	str	r3, [r7, #20]
#endif
  return status;
 800af58:	697b      	ldr	r3, [r7, #20]
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	371c      	adds	r7, #28
 800af5e:	46bd      	mov	sp, r7
 800af60:	bc80      	pop	{r7}
 800af62:	4770      	bx	lr

0800af64 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 800af64:	b480      	push	{r7}
 800af66:	b087      	sub	sp, #28
 800af68:	af00      	add	r7, sp, #0
 800af6a:	4603      	mov	r3, r0
 800af6c:	60b9      	str	r1, [r7, #8]
 800af6e:	607a      	str	r2, [r7, #4]
 800af70:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 800af72:	2300      	movs	r3, #0
 800af74:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 800af76:	f04f 33ff 	mov.w	r3, #4294967295
 800af7a:	617b      	str	r3, [r7, #20]
#endif
  return status;
 800af7c:	697b      	ldr	r3, [r7, #20]
}
 800af7e:	4618      	mov	r0, r3
 800af80:	371c      	adds	r7, #28
 800af82:	46bd      	mov	sp, r7
 800af84:	bc80      	pop	{r7}
 800af86:	4770      	bx	lr

0800af88 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 800af88:	b480      	push	{r7}
 800af8a:	b085      	sub	sp, #20
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	60f8      	str	r0, [r7, #12]
 800af90:	60b9      	str	r1, [r7, #8]
 800af92:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 800af94:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3714      	adds	r7, #20
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bc80      	pop	{r7}
 800afa0:	4770      	bx	lr

0800afa2 <RFW_DeInit>:

void RFW_DeInit( void)
{
 800afa2:	b480      	push	{r7}
 800afa4:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 800afa6:	bf00      	nop
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bc80      	pop	{r7}
 800afac:	4770      	bx	lr

0800afae <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 800afae:	b480      	push	{r7}
 800afb0:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 800afb2:	2300      	movs	r3, #0
#endif
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bc80      	pop	{r7}
 800afba:	4770      	bx	lr

0800afbc <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 800afbc:	b480      	push	{r7}
 800afbe:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 800afc0:	2300      	movs	r3, #0
#endif
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bc80      	pop	{r7}
 800afc8:	4770      	bx	lr

0800afca <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 800afca:	b480      	push	{r7}
 800afcc:	b083      	sub	sp, #12
 800afce:	af00      	add	r7, sp, #0
 800afd0:	4603      	mov	r3, r0
 800afd2:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 800afd4:	bf00      	nop
 800afd6:	370c      	adds	r7, #12
 800afd8:	46bd      	mov	sp, r7
 800afda:	bc80      	pop	{r7}
 800afdc:	4770      	bx	lr

0800afde <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 800afde:	b480      	push	{r7}
 800afe0:	b087      	sub	sp, #28
 800afe2:	af00      	add	r7, sp, #0
 800afe4:	60f8      	str	r0, [r7, #12]
 800afe6:	460b      	mov	r3, r1
 800afe8:	607a      	str	r2, [r7, #4]
 800afea:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 800afec:	f04f 33ff 	mov.w	r3, #4294967295
 800aff0:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;

    status= 0;
  }
#endif
  return status;
 800aff2:	697b      	ldr	r3, [r7, #20]
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	371c      	adds	r7, #28
 800aff8:	46bd      	mov	sp, r7
 800affa:	bc80      	pop	{r7}
 800affc:	4770      	bx	lr

0800affe <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800affe:	b480      	push	{r7}
 800b000:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;

  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 800b002:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 800b006:	4618      	mov	r0, r3
 800b008:	46bd      	mov	sp, r7
 800b00a:	bc80      	pop	{r7}
 800b00c:	4770      	bx	lr

0800b00e <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 800b00e:	b480      	push	{r7}
 800b010:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 800b012:	bf00      	nop
 800b014:	46bd      	mov	sp, r7
 800b016:	bc80      	pop	{r7}
 800b018:	4770      	bx	lr

0800b01a <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800b01a:	b480      	push	{r7}
 800b01c:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 800b01e:	bf00      	nop
 800b020:	46bd      	mov	sp, r7
 800b022:	bc80      	pop	{r7}
 800b024:	4770      	bx	lr

0800b026 <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 800b026:	b480      	push	{r7}
 800b028:	b083      	sub	sp, #12
 800b02a:	af00      	add	r7, sp, #0
 800b02c:	4603      	mov	r3, r0
 800b02e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 800b030:	bf00      	nop
 800b032:	370c      	adds	r7, #12
 800b034:	46bd      	mov	sp, r7
 800b036:	bc80      	pop	{r7}
 800b038:	4770      	bx	lr

0800b03a <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 800b03a:	b580      	push	{r7, lr}
 800b03c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 800b03e:	f7f5 fe33 	bl	8000ca8 <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 800b042:	f000 f821 	bl	800b088 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 800b046:	bf00      	nop
 800b048:	bd80      	pop	{r7, pc}

0800b04a <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 800b04a:	b580      	push	{r7, lr}
 800b04c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_1 */

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800b04e:	f04f 30ff 	mov.w	r0, #4294967295
 800b052:	f000 ff2d 	bl	800beb0 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_2 */

  /* USER CODE END MX_SubGHz_Phy_Process_2 */
}
 800b056:	bf00      	nop
 800b058:	bd80      	pop	{r7, pc}
	...

0800b05c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800b05c:	b480      	push	{r7}
 800b05e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800b060:	f3bf 8f4f 	dsb	sy
}
 800b064:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800b066:	4b06      	ldr	r3, [pc, #24]	; (800b080 <__NVIC_SystemReset+0x24>)
 800b068:	68db      	ldr	r3, [r3, #12]
 800b06a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800b06e:	4904      	ldr	r1, [pc, #16]	; (800b080 <__NVIC_SystemReset+0x24>)
 800b070:	4b04      	ldr	r3, [pc, #16]	; (800b084 <__NVIC_SystemReset+0x28>)
 800b072:	4313      	orrs	r3, r2
 800b074:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800b076:	f3bf 8f4f 	dsb	sy
}
 800b07a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800b07c:	bf00      	nop
 800b07e:	e7fd      	b.n	800b07c <__NVIC_SystemReset+0x20>
 800b080:	e000ed00 	.word	0xe000ed00
 800b084:	05fa0004 	.word	0x05fa0004

0800b088 <SubghzApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 800b088:	b590      	push	{r4, r7, lr}
 800b08a:	b08b      	sub	sp, #44	; 0x2c
 800b08c:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE BEGIN SubghzApp_Init_1 */

	  UTIL_TIMER_Create(&timerOneSecond,0xFFFFFFFF,UTIL_TIMER_PERIODIC,OnOneSecondElapsedEvent,NULL);
 800b08e:	2300      	movs	r3, #0
 800b090:	9300      	str	r3, [sp, #0]
 800b092:	4b4b      	ldr	r3, [pc, #300]	; (800b1c0 <SubghzApp_Init+0x138>)
 800b094:	2201      	movs	r2, #1
 800b096:	f04f 31ff 	mov.w	r1, #4294967295
 800b09a:	484a      	ldr	r0, [pc, #296]	; (800b1c4 <SubghzApp_Init+0x13c>)
 800b09c:	f001 f8a8 	bl	800c1f0 <UTIL_TIMER_Create>
	  UTIL_TIMER_SetPeriod(&timerOneSecond,10000);
 800b0a0:	f242 7110 	movw	r1, #10000	; 0x2710
 800b0a4:	4847      	ldr	r0, [pc, #284]	; (800b1c4 <SubghzApp_Init+0x13c>)
 800b0a6:	f001 f9b7 	bl	800c418 <UTIL_TIMER_SetPeriod>
	  UTIL_TIMER_Start(&timerOneSecond);
 800b0aa:	4846      	ldr	r0, [pc, #280]	; (800b1c4 <SubghzApp_Init+0x13c>)
 800b0ac:	f001 f8d6 	bl	800c25c <UTIL_TIMER_Start>
	  SYS_InitMeasurement();
 800b0b0:	f7f5 fa40 	bl	8000534 <SYS_InitMeasurement>

  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 800b0b4:	4b44      	ldr	r3, [pc, #272]	; (800b1c8 <SubghzApp_Init+0x140>)
 800b0b6:	4a45      	ldr	r2, [pc, #276]	; (800b1cc <SubghzApp_Init+0x144>)
 800b0b8:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 800b0ba:	4b43      	ldr	r3, [pc, #268]	; (800b1c8 <SubghzApp_Init+0x140>)
 800b0bc:	4a44      	ldr	r2, [pc, #272]	; (800b1d0 <SubghzApp_Init+0x148>)
 800b0be:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 800b0c0:	4b41      	ldr	r3, [pc, #260]	; (800b1c8 <SubghzApp_Init+0x140>)
 800b0c2:	4a44      	ldr	r2, [pc, #272]	; (800b1d4 <SubghzApp_Init+0x14c>)
 800b0c4:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800b0c6:	4b40      	ldr	r3, [pc, #256]	; (800b1c8 <SubghzApp_Init+0x140>)
 800b0c8:	4a43      	ldr	r2, [pc, #268]	; (800b1d8 <SubghzApp_Init+0x150>)
 800b0ca:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 800b0cc:	4b3e      	ldr	r3, [pc, #248]	; (800b1c8 <SubghzApp_Init+0x140>)
 800b0ce:	4a43      	ldr	r2, [pc, #268]	; (800b1dc <SubghzApp_Init+0x154>)
 800b0d0:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 800b0d2:	4b43      	ldr	r3, [pc, #268]	; (800b1e0 <SubghzApp_Init+0x158>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	483c      	ldr	r0, [pc, #240]	; (800b1c8 <SubghzApp_Init+0x140>)
 800b0d8:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */

  srand(Radio.Random());
 800b0da:	4b41      	ldr	r3, [pc, #260]	; (800b1e0 <SubghzApp_Init+0x158>)
 800b0dc:	695b      	ldr	r3, [r3, #20]
 800b0de:	4798      	blx	r3
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f001 fdd8 	bl	800cc98 <srand>

      #if (( USE_MODEM_LORA == 1 ) && ( USE_MODEM_FSK == 0 ))
        Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 800b0e8:	4b3d      	ldr	r3, [pc, #244]	; (800b1e0 <SubghzApp_Init+0x158>)
 800b0ea:	69dc      	ldr	r4, [r3, #28]
 800b0ec:	f241 7370 	movw	r3, #6000	; 0x1770
 800b0f0:	9308      	str	r3, [sp, #32]
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	9307      	str	r3, [sp, #28]
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	9306      	str	r3, [sp, #24]
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	9305      	str	r3, [sp, #20]
 800b0fe:	2301      	movs	r3, #1
 800b100:	9304      	str	r3, [sp, #16]
 800b102:	2300      	movs	r3, #0
 800b104:	9303      	str	r3, [sp, #12]
 800b106:	2308      	movs	r3, #8
 800b108:	9302      	str	r3, [sp, #8]
 800b10a:	2301      	movs	r3, #1
 800b10c:	9301      	str	r3, [sp, #4]
 800b10e:	230c      	movs	r3, #12
 800b110:	9300      	str	r3, [sp, #0]
 800b112:	2300      	movs	r3, #0
 800b114:	2200      	movs	r2, #0
 800b116:	210e      	movs	r1, #14
 800b118:	2001      	movs	r0, #1
 800b11a:	47a0      	blx	r4
                          LORA_SPREADING_FACTOR, LORA_CODINGRATE,
                          LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
                          true, 0, 0, LORA_IQ_INVERSION_ON, TX_TIMEOUT_VALUE);

        Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 800b11c:	4b30      	ldr	r3, [pc, #192]	; (800b1e0 <SubghzApp_Init+0x158>)
 800b11e:	699c      	ldr	r4, [r3, #24]
 800b120:	2301      	movs	r3, #1
 800b122:	9309      	str	r3, [sp, #36]	; 0x24
 800b124:	2300      	movs	r3, #0
 800b126:	9308      	str	r3, [sp, #32]
 800b128:	2300      	movs	r3, #0
 800b12a:	9307      	str	r3, [sp, #28]
 800b12c:	2300      	movs	r3, #0
 800b12e:	9306      	str	r3, [sp, #24]
 800b130:	2301      	movs	r3, #1
 800b132:	9305      	str	r3, [sp, #20]
 800b134:	2300      	movs	r3, #0
 800b136:	9304      	str	r3, [sp, #16]
 800b138:	2300      	movs	r3, #0
 800b13a:	9303      	str	r3, [sp, #12]
 800b13c:	2305      	movs	r3, #5
 800b13e:	9302      	str	r3, [sp, #8]
 800b140:	2308      	movs	r3, #8
 800b142:	9301      	str	r3, [sp, #4]
 800b144:	2300      	movs	r3, #0
 800b146:	9300      	str	r3, [sp, #0]
 800b148:	2301      	movs	r3, #1
 800b14a:	220c      	movs	r2, #12
 800b14c:	2100      	movs	r1, #0
 800b14e:	2001      	movs	r0, #1
 800b150:	47a0      	blx	r4
                          LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
                          LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
                          0, true, 0, 0, LORA_IQ_INVERSION_ON, true);

        Radio.SetMaxPayloadLength(MODEM_LORA, BUFFER_SIZE);
 800b152:	4b23      	ldr	r3, [pc, #140]	; (800b1e0 <SubghzApp_Init+0x158>)
 800b154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b156:	2140      	movs	r1, #64	; 0x40
 800b158:	2001      	movs	r0, #1
 800b15a:	4798      	blx	r3

      #else
      #error "Please define a frequency band in the sys_conf.h file."
      #endif /* USE_MODEM_LORA | USE_MODEM_FSK */

        Radio.SetChannel(RF_FREQUENCY);
 800b15c:	4b20      	ldr	r3, [pc, #128]	; (800b1e0 <SubghzApp_Init+0x158>)
 800b15e:	68db      	ldr	r3, [r3, #12]
 800b160:	4820      	ldr	r0, [pc, #128]	; (800b1e4 <SubghzApp_Init+0x15c>)
 800b162:	4798      	blx	r3



        Radio.Rx(RX_TIMEOUT_VALUE);
 800b164:	4b1e      	ldr	r3, [pc, #120]	; (800b1e0 <SubghzApp_Init+0x158>)
 800b166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b168:	f241 3088 	movw	r0, #5000	; 0x1388
 800b16c:	4798      	blx	r3

        UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), 0, BaseStation_Process);
 800b16e:	4a1e      	ldr	r2, [pc, #120]	; (800b1e8 <SubghzApp_Init+0x160>)
 800b170:	2100      	movs	r1, #0
 800b172:	2001      	movs	r0, #1
 800b174:	f000 ff98 	bl	800c0a8 <UTIL_SEQ_RegTask>

        APP_LOG(TS_OFF, VLEVEL_L, "\r\nBase Station start -> ");
 800b178:	4b1c      	ldr	r3, [pc, #112]	; (800b1ec <SubghzApp_Init+0x164>)
 800b17a:	2200      	movs	r2, #0
 800b17c:	2100      	movs	r1, #0
 800b17e:	2001      	movs	r0, #1
 800b180:	f001 fad2 	bl	800c728 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_L, "RF=%uMHz , SF=%u",RF_FREQUENCY,LORA_SPREADING_FACTOR);
 800b184:	230c      	movs	r3, #12
 800b186:	9301      	str	r3, [sp, #4]
 800b188:	4b16      	ldr	r3, [pc, #88]	; (800b1e4 <SubghzApp_Init+0x15c>)
 800b18a:	9300      	str	r3, [sp, #0]
 800b18c:	4b18      	ldr	r3, [pc, #96]	; (800b1f0 <SubghzApp_Init+0x168>)
 800b18e:	2200      	movs	r2, #0
 800b190:	2100      	movs	r1, #0
 800b192:	2001      	movs	r0, #1
 800b194:	f001 fac8 	bl	800c728 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF,VLEVEL_L," , CS=%ddBm",RF_CHANNEL_FREE_RSSI_TRESHOLD);
 800b198:	f06f 034f 	mvn.w	r3, #79	; 0x4f
 800b19c:	9300      	str	r3, [sp, #0]
 800b19e:	4b15      	ldr	r3, [pc, #84]	; (800b1f4 <SubghzApp_Init+0x16c>)
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	2100      	movs	r1, #0
 800b1a4:	2001      	movs	r0, #1
 800b1a6:	f001 fabf 	bl	800c728 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_L, "\r\n");
 800b1aa:	4b13      	ldr	r3, [pc, #76]	; (800b1f8 <SubghzApp_Init+0x170>)
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	2100      	movs	r1, #0
 800b1b0:	2001      	movs	r0, #1
 800b1b2:	f001 fab9 	bl	800c728 <UTIL_ADV_TRACE_COND_FSend>

  /* USER CODE END SubghzApp_Init_2 */
}
 800b1b6:	bf00      	nop
 800b1b8:	3704      	adds	r7, #4
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd90      	pop	{r4, r7, pc}
 800b1be:	bf00      	nop
 800b1c0:	0800b2d5 	.word	0x0800b2d5
 800b1c4:	20000534 	.word	0x20000534
 800b1c8:	200004d4 	.word	0x200004d4
 800b1cc:	0800b1fd 	.word	0x0800b1fd
 800b1d0:	0800b219 	.word	0x0800b219
 800b1d4:	0800b281 	.word	0x0800b281
 800b1d8:	0800b29d 	.word	0x0800b29d
 800b1dc:	0800b2b9 	.word	0x0800b2b9
 800b1e0:	0800e104 	.word	0x0800e104
 800b1e4:	33bca100 	.word	0x33bca100
 800b1e8:	0800b335 	.word	0x0800b335
 800b1ec:	0800de30 	.word	0x0800de30
 800b1f0:	0800de4c 	.word	0x0800de4c
 800b1f4:	0800de60 	.word	0x0800de60
 800b1f8:	0800de6c 	.word	0x0800de6c

0800b1fc <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
	State = TX_DONE;
 800b200:	4b04      	ldr	r3, [pc, #16]	; (800b214 <OnTxDone+0x18>)
 800b202:	2204      	movs	r2, #4
 800b204:	701a      	strb	r2, [r3, #0]
	UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800b206:	2100      	movs	r1, #0
 800b208:	2001      	movs	r0, #1
 800b20a:	f000 ff6f 	bl	800c0ec <UTIL_SEQ_SetTask>
  /* USER CODE END OnTxDone */
}
 800b20e:	bf00      	nop
 800b210:	bd80      	pop	{r7, pc}
 800b212:	bf00      	nop
 800b214:	2000000c 	.word	0x2000000c

0800b218 <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b084      	sub	sp, #16
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	60f8      	str	r0, [r7, #12]
 800b220:	4608      	mov	r0, r1
 800b222:	4611      	mov	r1, r2
 800b224:	461a      	mov	r2, r3
 800b226:	4603      	mov	r3, r0
 800b228:	817b      	strh	r3, [r7, #10]
 800b22a:	460b      	mov	r3, r1
 800b22c:	813b      	strh	r3, [r7, #8]
 800b22e:	4613      	mov	r3, r2
 800b230:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */

	BufferSize = size;
 800b232:	4a0e      	ldr	r2, [pc, #56]	; (800b26c <OnRxDone+0x54>)
 800b234:	897b      	ldrh	r3, [r7, #10]
 800b236:	8013      	strh	r3, [r2, #0]
	memcpy(Buffer, payload, BufferSize);
 800b238:	4b0c      	ldr	r3, [pc, #48]	; (800b26c <OnRxDone+0x54>)
 800b23a:	881b      	ldrh	r3, [r3, #0]
 800b23c:	461a      	mov	r2, r3
 800b23e:	68f9      	ldr	r1, [r7, #12]
 800b240:	480b      	ldr	r0, [pc, #44]	; (800b270 <OnRxDone+0x58>)
 800b242:	f001 fd13 	bl	800cc6c <memcpy>
	RssiValue = rssi;
 800b246:	893b      	ldrh	r3, [r7, #8]
 800b248:	b25a      	sxtb	r2, r3
 800b24a:	4b0a      	ldr	r3, [pc, #40]	; (800b274 <OnRxDone+0x5c>)
 800b24c:	701a      	strb	r2, [r3, #0]
	SnrValue = LoraSnr_FskCfo;
 800b24e:	4a0a      	ldr	r2, [pc, #40]	; (800b278 <OnRxDone+0x60>)
 800b250:	79fb      	ldrb	r3, [r7, #7]
 800b252:	7013      	strb	r3, [r2, #0]
	State = RX_DONE;
 800b254:	4b09      	ldr	r3, [pc, #36]	; (800b27c <OnRxDone+0x64>)
 800b256:	2200      	movs	r2, #0
 800b258:	701a      	strb	r2, [r3, #0]
	UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800b25a:	2100      	movs	r1, #0
 800b25c:	2001      	movs	r0, #1
 800b25e:	f000 ff45 	bl	800c0ec <UTIL_SEQ_SetTask>

  /* USER CODE END OnRxDone */
}
 800b262:	bf00      	nop
 800b264:	3710      	adds	r7, #16
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}
 800b26a:	bf00      	nop
 800b26c:	2000000a 	.word	0x2000000a
 800b270:	200004f0 	.word	0x200004f0
 800b274:	20000530 	.word	0x20000530
 800b278:	20000531 	.word	0x20000531
 800b27c:	2000000c 	.word	0x2000000c

0800b280 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
	State = TX_TO;
 800b284:	4b04      	ldr	r3, [pc, #16]	; (800b298 <OnTxTimeout+0x18>)
 800b286:	2206      	movs	r2, #6
 800b288:	701a      	strb	r2, [r3, #0]
	UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800b28a:	2100      	movs	r1, #0
 800b28c:	2001      	movs	r0, #1
 800b28e:	f000 ff2d 	bl	800c0ec <UTIL_SEQ_SetTask>
  /* USER CODE END OnTxTimeout */
}
 800b292:	bf00      	nop
 800b294:	bd80      	pop	{r7, pc}
 800b296:	bf00      	nop
 800b298:	2000000c 	.word	0x2000000c

0800b29c <OnRxTimeout>:

static void OnRxTimeout(void)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
	 State = RX_TO;
 800b2a0:	4b04      	ldr	r3, [pc, #16]	; (800b2b4 <OnRxTimeout+0x18>)
 800b2a2:	2201      	movs	r2, #1
 800b2a4:	701a      	strb	r2, [r3, #0]
	 UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800b2a6:	2100      	movs	r1, #0
 800b2a8:	2001      	movs	r0, #1
 800b2aa:	f000 ff1f 	bl	800c0ec <UTIL_SEQ_SetTask>
  /* USER CODE END OnRxTimeout */
}
 800b2ae:	bf00      	nop
 800b2b0:	bd80      	pop	{r7, pc}
 800b2b2:	bf00      	nop
 800b2b4:	2000000c 	.word	0x2000000c

0800b2b8 <OnRxError>:

static void OnRxError(void)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
	State = RX_ERR;
 800b2bc:	4b04      	ldr	r3, [pc, #16]	; (800b2d0 <OnRxError+0x18>)
 800b2be:	2202      	movs	r2, #2
 800b2c0:	701a      	strb	r2, [r3, #0]
	UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800b2c2:	2100      	movs	r1, #0
 800b2c4:	2001      	movs	r0, #1
 800b2c6:	f000 ff11 	bl	800c0ec <UTIL_SEQ_SetTask>
  /* USER CODE END OnRxError */
}
 800b2ca:	bf00      	nop
 800b2cc:	bd80      	pop	{r7, pc}
 800b2ce:	bf00      	nop
 800b2d0:	2000000c 	.word	0x2000000c

0800b2d4 <OnOneSecondElapsedEvent>:

/* USER CODE BEGIN PrFD */

static void OnOneSecondElapsedEvent(void *context)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b082      	sub	sp, #8
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
  if (WatchDogRx>0)
 800b2dc:	4b07      	ldr	r3, [pc, #28]	; (800b2fc <OnOneSecondElapsedEvent+0x28>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d005      	beq.n	800b2f0 <OnOneSecondElapsedEvent+0x1c>
  {
    WatchDogRx--;
 800b2e4:	4b05      	ldr	r3, [pc, #20]	; (800b2fc <OnOneSecondElapsedEvent+0x28>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	3b01      	subs	r3, #1
 800b2ea:	4a04      	ldr	r2, [pc, #16]	; (800b2fc <OnOneSecondElapsedEvent+0x28>)
 800b2ec:	6013      	str	r3, [r2, #0]
  }
  else
  {
	NVIC_SystemReset();
  }
}
 800b2ee:	e001      	b.n	800b2f4 <OnOneSecondElapsedEvent+0x20>
	NVIC_SystemReset();
 800b2f0:	f7ff feb4 	bl	800b05c <__NVIC_SystemReset>
}
 800b2f4:	3708      	adds	r7, #8
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}
 800b2fa:	bf00      	nop
 800b2fc:	20000010 	.word	0x20000010

0800b300 <powInt>:


static uint32_t powInt(uint32_t base, uint32_t exp)
{
 800b300:	b480      	push	{r7}
 800b302:	b085      	sub	sp, #20
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	6039      	str	r1, [r7, #0]
    uint32_t result = 1;
 800b30a:	2301      	movs	r3, #1
 800b30c:	60fb      	str	r3, [r7, #12]
    while(exp) { result *= base; exp--; }
 800b30e:	e007      	b.n	800b320 <powInt+0x20>
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	687a      	ldr	r2, [r7, #4]
 800b314:	fb02 f303 	mul.w	r3, r2, r3
 800b318:	60fb      	str	r3, [r7, #12]
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	3b01      	subs	r3, #1
 800b31e:	603b      	str	r3, [r7, #0]
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d1f4      	bne.n	800b310 <powInt+0x10>
    return result;
 800b326:	68fb      	ldr	r3, [r7, #12]
}
 800b328:	4618      	mov	r0, r3
 800b32a:	3714      	adds	r7, #20
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bc80      	pop	{r7}
 800b330:	4770      	bx	lr
	...

0800b334 <BaseStation_Process>:


static void BaseStation_Process(void)
{
 800b334:	b590      	push	{r4, r7, lr}
 800b336:	b087      	sub	sp, #28
 800b338:	af02      	add	r7, sp, #8
	int16_t i;
	bool isChannelFree = true;
 800b33a:	2301      	movs	r3, #1
 800b33c:	737b      	strb	r3, [r7, #13]
	uint32_t backoffTime,carrierSenseTime;
	int16_t rssi;

	  switch (State)
 800b33e:	4ba7      	ldr	r3, [pc, #668]	; (800b5dc <BaseStation_Process+0x2a8>)
 800b340:	781b      	ldrb	r3, [r3, #0]
 800b342:	2b06      	cmp	r3, #6
 800b344:	f200 81ac 	bhi.w	800b6a0 <BaseStation_Process+0x36c>
 800b348:	a201      	add	r2, pc, #4	; (adr r2, 800b350 <BaseStation_Process+0x1c>)
 800b34a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b34e:	bf00      	nop
 800b350:	0800b38d 	.word	0x0800b38d
 800b354:	0800b4a9 	.word	0x0800b4a9
 800b358:	0800b4b9 	.word	0x0800b4b9
 800b35c:	0800b4d5 	.word	0x0800b4d5
 800b360:	0800b675 	.word	0x0800b675
 800b364:	0800b36d 	.word	0x0800b36d
 800b368:	0800b685 	.word	0x0800b685
	  {
	    case RX_START:
	      Radio.SetChannel(RF_FREQUENCY);
 800b36c:	4b9c      	ldr	r3, [pc, #624]	; (800b5e0 <BaseStation_Process+0x2ac>)
 800b36e:	68db      	ldr	r3, [r3, #12]
 800b370:	489c      	ldr	r0, [pc, #624]	; (800b5e4 <BaseStation_Process+0x2b0>)
 800b372:	4798      	blx	r3
		  Radio.Rx(RX_TIMEOUT_VALUE);
 800b374:	4b9a      	ldr	r3, [pc, #616]	; (800b5e0 <BaseStation_Process+0x2ac>)
 800b376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b378:	f241 3088 	movw	r0, #5000	; 0x1388
 800b37c:	4798      	blx	r3
		  APP_LOG(TS_ON,VLEVEL_L, "RX...\r\n\r\n");
 800b37e:	4b9a      	ldr	r3, [pc, #616]	; (800b5e8 <BaseStation_Process+0x2b4>)
 800b380:	2201      	movs	r2, #1
 800b382:	2100      	movs	r1, #0
 800b384:	2001      	movs	r0, #1
 800b386:	f001 f9cf 	bl	800c728 <UTIL_ADV_TRACE_COND_FSend>
		  break;
 800b38a:	e18a      	b.n	800b6a2 <BaseStation_Process+0x36e>

		case RX_DONE:
		  WatchDogRx = WATCHDOG_RX_PERIOD;
 800b38c:	4b97      	ldr	r3, [pc, #604]	; (800b5ec <BaseStation_Process+0x2b8>)
 800b38e:	223c      	movs	r2, #60	; 0x3c
 800b390:	601a      	str	r2, [r3, #0]

		  if (Buffer[0]<0x20)  /* Print byte format data -> NODE_ID < 0x20 */
 800b392:	4b97      	ldr	r3, [pc, #604]	; (800b5f0 <BaseStation_Process+0x2bc>)
 800b394:	781b      	ldrb	r3, [r3, #0]
 800b396:	2b1f      	cmp	r3, #31
 800b398:	d84b      	bhi.n	800b432 <BaseStation_Process+0xfe>
		  {
		    APP_LOG(TS_ON,VLEVEL_L,"\r\nNode ID: %02X | ",Buffer[0]);
 800b39a:	4b95      	ldr	r3, [pc, #596]	; (800b5f0 <BaseStation_Process+0x2bc>)
 800b39c:	781b      	ldrb	r3, [r3, #0]
 800b39e:	9300      	str	r3, [sp, #0]
 800b3a0:	4b94      	ldr	r3, [pc, #592]	; (800b5f4 <BaseStation_Process+0x2c0>)
 800b3a2:	2201      	movs	r2, #1
 800b3a4:	2100      	movs	r1, #0
 800b3a6:	2001      	movs	r0, #1
 800b3a8:	f001 f9be 	bl	800c728 <UTIL_ADV_TRACE_COND_FSend>
			APP_LOG(TS_OFF,VLEVEL_L,"RX data: TS=%ddegC , BAT=%d",(int8_t)(Buffer[1]),Buffer[2]);
 800b3ac:	4b90      	ldr	r3, [pc, #576]	; (800b5f0 <BaseStation_Process+0x2bc>)
 800b3ae:	785b      	ldrb	r3, [r3, #1]
 800b3b0:	b25b      	sxtb	r3, r3
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	4b8e      	ldr	r3, [pc, #568]	; (800b5f0 <BaseStation_Process+0x2bc>)
 800b3b6:	789b      	ldrb	r3, [r3, #2]
 800b3b8:	9301      	str	r3, [sp, #4]
 800b3ba:	9200      	str	r2, [sp, #0]
 800b3bc:	4b8e      	ldr	r3, [pc, #568]	; (800b5f8 <BaseStation_Process+0x2c4>)
 800b3be:	2200      	movs	r2, #0
 800b3c0:	2100      	movs	r1, #0
 800b3c2:	2001      	movs	r0, #1
 800b3c4:	f001 f9b0 	bl	800c728 <UTIL_ADV_TRACE_COND_FSend>
			APP_LOG(TS_OFF,VLEVEL_L," , FSentCnt=%u , FAckCnt=%u\r\n",(uint16_t)(Buffer[3]<<8)+Buffer[4],(uint16_t)(Buffer[5]<<8)+Buffer[6]);
 800b3c8:	4b89      	ldr	r3, [pc, #548]	; (800b5f0 <BaseStation_Process+0x2bc>)
 800b3ca:	78db      	ldrb	r3, [r3, #3]
 800b3cc:	b29b      	uxth	r3, r3
 800b3ce:	021b      	lsls	r3, r3, #8
 800b3d0:	b29b      	uxth	r3, r3
 800b3d2:	461a      	mov	r2, r3
 800b3d4:	4b86      	ldr	r3, [pc, #536]	; (800b5f0 <BaseStation_Process+0x2bc>)
 800b3d6:	791b      	ldrb	r3, [r3, #4]
 800b3d8:	4413      	add	r3, r2
 800b3da:	4a85      	ldr	r2, [pc, #532]	; (800b5f0 <BaseStation_Process+0x2bc>)
 800b3dc:	7952      	ldrb	r2, [r2, #5]
 800b3de:	b292      	uxth	r2, r2
 800b3e0:	0212      	lsls	r2, r2, #8
 800b3e2:	b292      	uxth	r2, r2
 800b3e4:	4611      	mov	r1, r2
 800b3e6:	4a82      	ldr	r2, [pc, #520]	; (800b5f0 <BaseStation_Process+0x2bc>)
 800b3e8:	7992      	ldrb	r2, [r2, #6]
 800b3ea:	440a      	add	r2, r1
 800b3ec:	9201      	str	r2, [sp, #4]
 800b3ee:	9300      	str	r3, [sp, #0]
 800b3f0:	4b82      	ldr	r3, [pc, #520]	; (800b5fc <BaseStation_Process+0x2c8>)
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	2100      	movs	r1, #0
 800b3f6:	2001      	movs	r0, #1
 800b3f8:	f001 f996 	bl	800c728 <UTIL_ADV_TRACE_COND_FSend>
			APP_LOG(TS_OFF,VLEVEL_L,"RSSI: %ddBm\r\n",RssiValue);
 800b3fc:	4b80      	ldr	r3, [pc, #512]	; (800b600 <BaseStation_Process+0x2cc>)
 800b3fe:	f993 3000 	ldrsb.w	r3, [r3]
 800b402:	9300      	str	r3, [sp, #0]
 800b404:	4b7f      	ldr	r3, [pc, #508]	; (800b604 <BaseStation_Process+0x2d0>)
 800b406:	2200      	movs	r2, #0
 800b408:	2100      	movs	r1, #0
 800b40a:	2001      	movs	r0, #1
 800b40c:	f001 f98c 	bl	800c728 <UTIL_ADV_TRACE_COND_FSend>
			APP_LOG(TS_OFF,VLEVEL_L,"SNR : %ddB\r\n\r\n",SnrValue);
 800b410:	4b7d      	ldr	r3, [pc, #500]	; (800b608 <BaseStation_Process+0x2d4>)
 800b412:	f993 3000 	ldrsb.w	r3, [r3]
 800b416:	9300      	str	r3, [sp, #0]
 800b418:	4b7c      	ldr	r3, [pc, #496]	; (800b60c <BaseStation_Process+0x2d8>)
 800b41a:	2200      	movs	r2, #0
 800b41c:	2100      	movs	r1, #0
 800b41e:	2001      	movs	r0, #1
 800b420:	f001 f982 	bl	800c728 <UTIL_ADV_TRACE_COND_FSend>
			APP_LOG(TS_OFF,VLEVEL_L,"\r\n");
 800b424:	4b7a      	ldr	r3, [pc, #488]	; (800b610 <BaseStation_Process+0x2dc>)
 800b426:	2200      	movs	r2, #0
 800b428:	2100      	movs	r1, #0
 800b42a:	2001      	movs	r0, #1
 800b42c:	f001 f97c 	bl	800c728 <UTIL_ADV_TRACE_COND_FSend>
 800b430:	e032      	b.n	800b498 <BaseStation_Process+0x164>
		  }
		  else  /* Print ASCII format data -> NODE_ID/Buffer[0] >= 0x20 */
		  {
		    APP_LOG(TS_ON,VLEVEL_L,"RX CHAR: ");
 800b432:	4b78      	ldr	r3, [pc, #480]	; (800b614 <BaseStation_Process+0x2e0>)
 800b434:	2201      	movs	r2, #1
 800b436:	2100      	movs	r1, #0
 800b438:	2001      	movs	r0, #1
 800b43a:	f001 f975 	bl	800c728 <UTIL_ADV_TRACE_COND_FSend>
			for (i=0;i<BufferSize;i++)
 800b43e:	2300      	movs	r3, #0
 800b440:	81fb      	strh	r3, [r7, #14]
 800b442:	e01d      	b.n	800b480 <BaseStation_Process+0x14c>
			{
			  if (Buffer[i]>=0x20) { APP_LOG(TS_OFF,VLEVEL_L,"%c",Buffer[i]); }
 800b444:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b448:	4a69      	ldr	r2, [pc, #420]	; (800b5f0 <BaseStation_Process+0x2bc>)
 800b44a:	5cd3      	ldrb	r3, [r2, r3]
 800b44c:	2b1f      	cmp	r3, #31
 800b44e:	d90b      	bls.n	800b468 <BaseStation_Process+0x134>
 800b450:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b454:	4a66      	ldr	r2, [pc, #408]	; (800b5f0 <BaseStation_Process+0x2bc>)
 800b456:	5cd3      	ldrb	r3, [r2, r3]
 800b458:	9300      	str	r3, [sp, #0]
 800b45a:	4b6f      	ldr	r3, [pc, #444]	; (800b618 <BaseStation_Process+0x2e4>)
 800b45c:	2200      	movs	r2, #0
 800b45e:	2100      	movs	r1, #0
 800b460:	2001      	movs	r0, #1
 800b462:	f001 f961 	bl	800c728 <UTIL_ADV_TRACE_COND_FSend>
 800b466:	e005      	b.n	800b474 <BaseStation_Process+0x140>
			  else { APP_LOG(TS_ON,VLEVEL_L,"."); }
 800b468:	4b6c      	ldr	r3, [pc, #432]	; (800b61c <BaseStation_Process+0x2e8>)
 800b46a:	2201      	movs	r2, #1
 800b46c:	2100      	movs	r1, #0
 800b46e:	2001      	movs	r0, #1
 800b470:	f001 f95a 	bl	800c728 <UTIL_ADV_TRACE_COND_FSend>
			for (i=0;i<BufferSize;i++)
 800b474:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b478:	b29b      	uxth	r3, r3
 800b47a:	3301      	adds	r3, #1
 800b47c:	b29b      	uxth	r3, r3
 800b47e:	81fb      	strh	r3, [r7, #14]
 800b480:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b484:	4a66      	ldr	r2, [pc, #408]	; (800b620 <BaseStation_Process+0x2ec>)
 800b486:	8812      	ldrh	r2, [r2, #0]
 800b488:	4293      	cmp	r3, r2
 800b48a:	dbdb      	blt.n	800b444 <BaseStation_Process+0x110>
			}
			APP_LOG(TS_OFF,VLEVEL_L,"\r\n\r\n");
 800b48c:	4b65      	ldr	r3, [pc, #404]	; (800b624 <BaseStation_Process+0x2f0>)
 800b48e:	2200      	movs	r2, #0
 800b490:	2100      	movs	r1, #0
 800b492:	2001      	movs	r0, #1
 800b494:	f001 f948 	bl	800c728 <UTIL_ADV_TRACE_COND_FSend>
		  }
		  State = TX_START;
 800b498:	4b50      	ldr	r3, [pc, #320]	; (800b5dc <BaseStation_Process+0x2a8>)
 800b49a:	2203      	movs	r2, #3
 800b49c:	701a      	strb	r2, [r3, #0]
		  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800b49e:	2100      	movs	r1, #0
 800b4a0:	2001      	movs	r0, #1
 800b4a2:	f000 fe23 	bl	800c0ec <UTIL_SEQ_SetTask>
		  break;
 800b4a6:	e0fc      	b.n	800b6a2 <BaseStation_Process+0x36e>

		case RX_TO:
		  //APP_LOG(TS_ON, VLEVEL_L, "RX timeout\r\n\r\n");
		  State = RX_START;
 800b4a8:	4b4c      	ldr	r3, [pc, #304]	; (800b5dc <BaseStation_Process+0x2a8>)
 800b4aa:	2205      	movs	r2, #5
 800b4ac:	701a      	strb	r2, [r3, #0]
		  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800b4ae:	2100      	movs	r1, #0
 800b4b0:	2001      	movs	r0, #1
 800b4b2:	f000 fe1b 	bl	800c0ec <UTIL_SEQ_SetTask>
		  break;
 800b4b6:	e0f4      	b.n	800b6a2 <BaseStation_Process+0x36e>

		case RX_ERR:

		  APP_LOG(TS_ON, VLEVEL_L, "RX error\r\n\r\n");
 800b4b8:	4b5b      	ldr	r3, [pc, #364]	; (800b628 <BaseStation_Process+0x2f4>)
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	2100      	movs	r1, #0
 800b4be:	2001      	movs	r0, #1
 800b4c0:	f001 f932 	bl	800c728 <UTIL_ADV_TRACE_COND_FSend>
		  State = RX_START;
 800b4c4:	4b45      	ldr	r3, [pc, #276]	; (800b5dc <BaseStation_Process+0x2a8>)
 800b4c6:	2205      	movs	r2, #5
 800b4c8:	701a      	strb	r2, [r3, #0]
		  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800b4ca:	2100      	movs	r1, #0
 800b4cc:	2001      	movs	r0, #1
 800b4ce:	f000 fe0d 	bl	800c0ec <UTIL_SEQ_SetTask>
		  break;
 800b4d2:	e0e6      	b.n	800b6a2 <BaseStation_Process+0x36e>

		case TX_START:
		  i = 0;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	81fb      	strh	r3, [r7, #14]
		  Buffer[i++] = 'A';
 800b4d8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800b4dc:	b293      	uxth	r3, r2
 800b4de:	3301      	adds	r3, #1
 800b4e0:	b29b      	uxth	r3, r3
 800b4e2:	81fb      	strh	r3, [r7, #14]
 800b4e4:	4b42      	ldr	r3, [pc, #264]	; (800b5f0 <BaseStation_Process+0x2bc>)
 800b4e6:	2141      	movs	r1, #65	; 0x41
 800b4e8:	5499      	strb	r1, [r3, r2]
		  Buffer[i++] = 'C';
 800b4ea:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800b4ee:	b293      	uxth	r3, r2
 800b4f0:	3301      	adds	r3, #1
 800b4f2:	b29b      	uxth	r3, r3
 800b4f4:	81fb      	strh	r3, [r7, #14]
 800b4f6:	4b3e      	ldr	r3, [pc, #248]	; (800b5f0 <BaseStation_Process+0x2bc>)
 800b4f8:	2143      	movs	r1, #67	; 0x43
 800b4fa:	5499      	strb	r1, [r3, r2]
		  Buffer[i++] = 'K';
 800b4fc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800b500:	b293      	uxth	r3, r2
 800b502:	3301      	adds	r3, #1
 800b504:	b29b      	uxth	r3, r3
 800b506:	81fb      	strh	r3, [r7, #14]
 800b508:	4b39      	ldr	r3, [pc, #228]	; (800b5f0 <BaseStation_Process+0x2bc>)
 800b50a:	214b      	movs	r1, #75	; 0x4b
 800b50c:	5499      	strb	r1, [r3, r2]
		  BufferSize = i;
 800b50e:	89fa      	ldrh	r2, [r7, #14]
 800b510:	4b43      	ldr	r3, [pc, #268]	; (800b620 <BaseStation_Process+0x2ec>)
 800b512:	801a      	strh	r2, [r3, #0]
		  /* RF collisions avoidance and TX section */
		  Radio.SetChannel(RF_FREQUENCY);
 800b514:	4b32      	ldr	r3, [pc, #200]	; (800b5e0 <BaseStation_Process+0x2ac>)
 800b516:	68db      	ldr	r3, [r3, #12]
 800b518:	4832      	ldr	r0, [pc, #200]	; (800b5e4 <BaseStation_Process+0x2b0>)
 800b51a:	4798      	blx	r3
		  Radio.Rx(0);
 800b51c:	4b30      	ldr	r3, [pc, #192]	; (800b5e0 <BaseStation_Process+0x2ac>)
 800b51e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b520:	2000      	movs	r0, #0
 800b522:	4798      	blx	r3
		  HAL_Delay(Radio.GetWakeupTime());
 800b524:	4b2e      	ldr	r3, [pc, #184]	; (800b5e0 <BaseStation_Process+0x2ac>)
 800b526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b528:	4798      	blx	r3
 800b52a:	4603      	mov	r3, r0
 800b52c:	4618      	mov	r0, r3
 800b52e:	f7f5 fc45 	bl	8000dbc <HAL_Delay>
		  for (i=0;i<RF_CHANNEL_FREE_TRIALS_MAX;i++)
 800b532:	2300      	movs	r3, #0
 800b534:	81fb      	strh	r3, [r7, #14]
 800b536:	e04c      	b.n	800b5d2 <BaseStation_Process+0x29e>
		  {
		  //APP_LOG(TS_ON,VLEVEL_L,"RF Channel Sensing #%u ...",i+1);
		  isChannelFree = true;
 800b538:	2301      	movs	r3, #1
 800b53a:	737b      	strb	r3, [r7, #13]
		  carrierSenseTime = UTIL_TIMER_GetCurrentTime();
 800b53c:	f001 f816 	bl	800c56c <UTIL_TIMER_GetCurrentTime>
 800b540:	60b8      	str	r0, [r7, #8]
		  while( UTIL_TIMER_GetElapsedTime(carrierSenseTime) < RSSI_SENSING_TIME)
 800b542:	e00d      	b.n	800b560 <BaseStation_Process+0x22c>
		  {
		    rssi = Radio.Rssi(MODEM_LORA);
 800b544:	4b26      	ldr	r3, [pc, #152]	; (800b5e0 <BaseStation_Process+0x2ac>)
 800b546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b548:	2001      	movs	r0, #1
 800b54a:	4798      	blx	r3
 800b54c:	4603      	mov	r3, r0
 800b54e:	80fb      	strh	r3, [r7, #6]
			if (rssi > RF_CHANNEL_FREE_RSSI_TRESHOLD) { isChannelFree = false; break; }
 800b550:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b554:	f113 0f4f 	cmn.w	r3, #79	; 0x4f
 800b558:	db02      	blt.n	800b560 <BaseStation_Process+0x22c>
 800b55a:	2300      	movs	r3, #0
 800b55c:	737b      	strb	r3, [r7, #13]
 800b55e:	e005      	b.n	800b56c <BaseStation_Process+0x238>
		  while( UTIL_TIMER_GetElapsedTime(carrierSenseTime) < RSSI_SENSING_TIME)
 800b560:	68b8      	ldr	r0, [r7, #8]
 800b562:	f001 f815 	bl	800c590 <UTIL_TIMER_GetElapsedTime>
 800b566:	4603      	mov	r3, r0
 800b568:	2b09      	cmp	r3, #9
 800b56a:	d9eb      	bls.n	800b544 <BaseStation_Process+0x210>
		  }
		  carrierSenseTime = UTIL_TIMER_GetElapsedTime(carrierSenseTime);
 800b56c:	68b8      	ldr	r0, [r7, #8]
 800b56e:	f001 f80f 	bl	800c590 <UTIL_TIMER_GetElapsedTime>
 800b572:	60b8      	str	r0, [r7, #8]
		  //APP_LOG(TS_OFF,VLEVEL_L," CS=%ddBm , CStime=%ums\r\n",rssi,carrierSenseTime);
		  if (isChannelFree)
 800b574:	7b7b      	ldrb	r3, [r7, #13]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d15a      	bne.n	800b630 <BaseStation_Process+0x2fc>
		  {
		    break; //RF collisions avoidance loop
		  }
		  else
		  {
		    if (i<RF_CHANNEL_FREE_TRIALS_MAX-1)
 800b57a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b57e:	2b03      	cmp	r3, #3
 800b580:	dc21      	bgt.n	800b5c6 <BaseStation_Process+0x292>
			{
			  backoffTime = CS_BACKOFF_TIME_UNIT * (1 + (rand() % powInt(2,i+1)));
 800b582:	f001 fbb7 	bl	800ccf4 <rand>
 800b586:	4603      	mov	r3, r0
 800b588:	461c      	mov	r4, r3
 800b58a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b58e:	3301      	adds	r3, #1
 800b590:	4619      	mov	r1, r3
 800b592:	2002      	movs	r0, #2
 800b594:	f7ff feb4 	bl	800b300 <powInt>
 800b598:	4603      	mov	r3, r0
 800b59a:	fbb4 f2f3 	udiv	r2, r4, r3
 800b59e:	fb02 f303 	mul.w	r3, r2, r3
 800b5a2:	1ae3      	subs	r3, r4, r3
 800b5a4:	1c5a      	adds	r2, r3, #1
 800b5a6:	4613      	mov	r3, r2
 800b5a8:	009b      	lsls	r3, r3, #2
 800b5aa:	4413      	add	r3, r2
 800b5ac:	009b      	lsls	r3, r3, #2
 800b5ae:	603b      	str	r3, [r7, #0]
			  APP_LOG(TS_ON,VLEVEL_L,"RF channel is busy, next attempt after %ums...\r\n",backoffTime);
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	9300      	str	r3, [sp, #0]
 800b5b4:	4b1d      	ldr	r3, [pc, #116]	; (800b62c <BaseStation_Process+0x2f8>)
 800b5b6:	2201      	movs	r2, #1
 800b5b8:	2100      	movs	r1, #0
 800b5ba:	2001      	movs	r0, #1
 800b5bc:	f001 f8b4 	bl	800c728 <UTIL_ADV_TRACE_COND_FSend>
			  HAL_Delay(backoffTime);
 800b5c0:	6838      	ldr	r0, [r7, #0]
 800b5c2:	f7f5 fbfb 	bl	8000dbc <HAL_Delay>
		  for (i=0;i<RF_CHANNEL_FREE_TRIALS_MAX;i++)
 800b5c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b5ca:	b29b      	uxth	r3, r3
 800b5cc:	3301      	adds	r3, #1
 800b5ce:	b29b      	uxth	r3, r3
 800b5d0:	81fb      	strh	r3, [r7, #14]
 800b5d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b5d6:	2b04      	cmp	r3, #4
 800b5d8:	ddae      	ble.n	800b538 <BaseStation_Process+0x204>
 800b5da:	e02a      	b.n	800b632 <BaseStation_Process+0x2fe>
 800b5dc:	2000000c 	.word	0x2000000c
 800b5e0:	0800e104 	.word	0x0800e104
 800b5e4:	33bca100 	.word	0x33bca100
 800b5e8:	0800de70 	.word	0x0800de70
 800b5ec:	20000010 	.word	0x20000010
 800b5f0:	200004f0 	.word	0x200004f0
 800b5f4:	0800de7c 	.word	0x0800de7c
 800b5f8:	0800de90 	.word	0x0800de90
 800b5fc:	0800deac 	.word	0x0800deac
 800b600:	20000530 	.word	0x20000530
 800b604:	0800decc 	.word	0x0800decc
 800b608:	20000531 	.word	0x20000531
 800b60c:	0800dedc 	.word	0x0800dedc
 800b610:	0800de6c 	.word	0x0800de6c
 800b614:	0800deec 	.word	0x0800deec
 800b618:	0800def8 	.word	0x0800def8
 800b61c:	0800defc 	.word	0x0800defc
 800b620:	2000000a 	.word	0x2000000a
 800b624:	0800df00 	.word	0x0800df00
 800b628:	0800df08 	.word	0x0800df08
 800b62c:	0800df18 	.word	0x0800df18
		    break; //RF collisions avoidance loop
 800b630:	bf00      	nop
			}
		  }
		}
	    /* TX data over the air */
	   if (isChannelFree)
 800b632:	7b7b      	ldrb	r3, [r7, #13]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d014      	beq.n	800b662 <BaseStation_Process+0x32e>
	   {
	     Radio.SetChannel(RF_FREQUENCY);
 800b638:	4b1c      	ldr	r3, [pc, #112]	; (800b6ac <BaseStation_Process+0x378>)
 800b63a:	68db      	ldr	r3, [r3, #12]
 800b63c:	481c      	ldr	r0, [pc, #112]	; (800b6b0 <BaseStation_Process+0x37c>)
 800b63e:	4798      	blx	r3
		 HAL_Delay(Radio.GetWakeupTime() + TCXO_WORKAROUND_TIME_MARGIN);
 800b640:	4b1a      	ldr	r3, [pc, #104]	; (800b6ac <BaseStation_Process+0x378>)
 800b642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b644:	4798      	blx	r3
 800b646:	4603      	mov	r3, r0
 800b648:	3332      	adds	r3, #50	; 0x32
 800b64a:	4618      	mov	r0, r3
 800b64c:	f7f5 fbb6 	bl	8000dbc <HAL_Delay>
		 Radio.Send(Buffer,BufferSize);
 800b650:	4b16      	ldr	r3, [pc, #88]	; (800b6ac <BaseStation_Process+0x378>)
 800b652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b654:	4a17      	ldr	r2, [pc, #92]	; (800b6b4 <BaseStation_Process+0x380>)
 800b656:	8812      	ldrh	r2, [r2, #0]
 800b658:	b2d2      	uxtb	r2, r2
 800b65a:	4611      	mov	r1, r2
 800b65c:	4816      	ldr	r0, [pc, #88]	; (800b6b8 <BaseStation_Process+0x384>)
 800b65e:	4798      	blx	r3
	    {


		  APP_LOG(TS_ON, VLEVEL_L, "RF channel: %uHz is BUSY\r\n\r\n",RF_FREQUENCY);
		}
		break;
 800b660:	e01f      	b.n	800b6a2 <BaseStation_Process+0x36e>
		  APP_LOG(TS_ON, VLEVEL_L, "RF channel: %uHz is BUSY\r\n\r\n",RF_FREQUENCY);
 800b662:	4b13      	ldr	r3, [pc, #76]	; (800b6b0 <BaseStation_Process+0x37c>)
 800b664:	9300      	str	r3, [sp, #0]
 800b666:	4b15      	ldr	r3, [pc, #84]	; (800b6bc <BaseStation_Process+0x388>)
 800b668:	2201      	movs	r2, #1
 800b66a:	2100      	movs	r1, #0
 800b66c:	2001      	movs	r0, #1
 800b66e:	f001 f85b 	bl	800c728 <UTIL_ADV_TRACE_COND_FSend>
		break;
 800b672:	e016      	b.n	800b6a2 <BaseStation_Process+0x36e>

		case TX_DONE:

		  State = RX_START;
 800b674:	4b12      	ldr	r3, [pc, #72]	; (800b6c0 <BaseStation_Process+0x38c>)
 800b676:	2205      	movs	r2, #5
 800b678:	701a      	strb	r2, [r3, #0]
		  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800b67a:	2100      	movs	r1, #0
 800b67c:	2001      	movs	r0, #1
 800b67e:	f000 fd35 	bl	800c0ec <UTIL_SEQ_SetTask>
		  break;
 800b682:	e00e      	b.n	800b6a2 <BaseStation_Process+0x36e>

		case TX_TO:

		  APP_LOG(TS_ON, VLEVEL_L, "TX timeout\r\n");
 800b684:	4b0f      	ldr	r3, [pc, #60]	; (800b6c4 <BaseStation_Process+0x390>)
 800b686:	2201      	movs	r2, #1
 800b688:	2100      	movs	r1, #0
 800b68a:	2001      	movs	r0, #1
 800b68c:	f001 f84c 	bl	800c728 <UTIL_ADV_TRACE_COND_FSend>
		  State = RX_START;
 800b690:	4b0b      	ldr	r3, [pc, #44]	; (800b6c0 <BaseStation_Process+0x38c>)
 800b692:	2205      	movs	r2, #5
 800b694:	701a      	strb	r2, [r3, #0]
		  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800b696:	2100      	movs	r1, #0
 800b698:	2001      	movs	r0, #1
 800b69a:	f000 fd27 	bl	800c0ec <UTIL_SEQ_SetTask>
		  break;
 800b69e:	e000      	b.n	800b6a2 <BaseStation_Process+0x36e>

		default:
		  break;
 800b6a0:	bf00      	nop
	  }
}
 800b6a2:	bf00      	nop
 800b6a4:	3714      	adds	r7, #20
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd90      	pop	{r4, r7, pc}
 800b6aa:	bf00      	nop
 800b6ac:	0800e104 	.word	0x0800e104
 800b6b0:	33bca100 	.word	0x33bca100
 800b6b4:	2000000a 	.word	0x2000000a
 800b6b8:	200004f0 	.word	0x200004f0
 800b6bc:	0800df4c 	.word	0x0800df4c
 800b6c0:	2000000c 	.word	0x2000000c
 800b6c4:	0800df6c 	.word	0x0800df6c

0800b6c8 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800b6cc:	f7f6 fa19 	bl	8001b02 <BSP_RADIO_Init>
 800b6d0:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	bd80      	pop	{r7, pc}

0800b6d6 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800b6d6:	b580      	push	{r7, lr}
 800b6d8:	b082      	sub	sp, #8
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	4603      	mov	r3, r0
 800b6de:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800b6e0:	79fb      	ldrb	r3, [r7, #7]
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f7f6 fa3e 	bl	8001b64 <BSP_RADIO_ConfigRFSwitch>
 800b6e8:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3708      	adds	r7, #8
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}

0800b6f2 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800b6f2:	b580      	push	{r7, lr}
 800b6f4:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800b6f6:	f7f6 fa83 	bl	8001c00 <BSP_RADIO_GetTxConfig>
 800b6fa:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	bd80      	pop	{r7, pc}

0800b700 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800b704:	f7f6 fa83 	bl	8001c0e <BSP_RADIO_IsTCXO>
 800b708:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	bd80      	pop	{r7, pc}

0800b70e <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800b70e:	b580      	push	{r7, lr}
 800b710:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800b712:	f7f6 fa83 	bl	8001c1c <BSP_RADIO_IsDCDC>
 800b716:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800b718:	4618      	mov	r0, r3
 800b71a:	bd80      	pop	{r7, pc}

0800b71c <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b082      	sub	sp, #8
 800b720:	af00      	add	r7, sp, #0
 800b722:	4603      	mov	r3, r0
 800b724:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800b726:	79fb      	ldrb	r3, [r7, #7]
 800b728:	4618      	mov	r0, r3
 800b72a:	f7f6 fa7e 	bl	8001c2a <BSP_RADIO_GetRFOMaxPowerConfig>
 800b72e:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800b730:	4618      	mov	r0, r3
 800b732:	3708      	adds	r7, #8
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}

0800b738 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800b738:	b480      	push	{r7}
 800b73a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800b73c:	4b04      	ldr	r3, [pc, #16]	; (800b750 <UTIL_LPM_Init+0x18>)
 800b73e:	2200      	movs	r2, #0
 800b740:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800b742:	4b04      	ldr	r3, [pc, #16]	; (800b754 <UTIL_LPM_Init+0x1c>)
 800b744:	2200      	movs	r2, #0
 800b746:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800b748:	bf00      	nop
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bc80      	pop	{r7}
 800b74e:	4770      	bx	lr
 800b750:	2000054c 	.word	0x2000054c
 800b754:	20000550 	.word	0x20000550

0800b758 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800b758:	b480      	push	{r7}
 800b75a:	b087      	sub	sp, #28
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	460b      	mov	r3, r1
 800b762:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b764:	f3ef 8310 	mrs	r3, PRIMASK
 800b768:	613b      	str	r3, [r7, #16]
  return(result);
 800b76a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800b76c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b76e:	b672      	cpsid	i
}
 800b770:	bf00      	nop
  
  switch( state )
 800b772:	78fb      	ldrb	r3, [r7, #3]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d008      	beq.n	800b78a <UTIL_LPM_SetStopMode+0x32>
 800b778:	2b01      	cmp	r3, #1
 800b77a:	d10e      	bne.n	800b79a <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800b77c:	4b0d      	ldr	r3, [pc, #52]	; (800b7b4 <UTIL_LPM_SetStopMode+0x5c>)
 800b77e:	681a      	ldr	r2, [r3, #0]
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	4313      	orrs	r3, r2
 800b784:	4a0b      	ldr	r2, [pc, #44]	; (800b7b4 <UTIL_LPM_SetStopMode+0x5c>)
 800b786:	6013      	str	r3, [r2, #0]
      break;
 800b788:	e008      	b.n	800b79c <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	43da      	mvns	r2, r3
 800b78e:	4b09      	ldr	r3, [pc, #36]	; (800b7b4 <UTIL_LPM_SetStopMode+0x5c>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	4013      	ands	r3, r2
 800b794:	4a07      	ldr	r2, [pc, #28]	; (800b7b4 <UTIL_LPM_SetStopMode+0x5c>)
 800b796:	6013      	str	r3, [r2, #0]
      break;
 800b798:	e000      	b.n	800b79c <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 800b79a:	bf00      	nop
 800b79c:	697b      	ldr	r3, [r7, #20]
 800b79e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	f383 8810 	msr	PRIMASK, r3
}
 800b7a6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800b7a8:	bf00      	nop
 800b7aa:	371c      	adds	r7, #28
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bc80      	pop	{r7}
 800b7b0:	4770      	bx	lr
 800b7b2:	bf00      	nop
 800b7b4:	2000054c 	.word	0x2000054c

0800b7b8 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	b087      	sub	sp, #28
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
 800b7c0:	460b      	mov	r3, r1
 800b7c2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b7c4:	f3ef 8310 	mrs	r3, PRIMASK
 800b7c8:	613b      	str	r3, [r7, #16]
  return(result);
 800b7ca:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800b7cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b7ce:	b672      	cpsid	i
}
 800b7d0:	bf00      	nop
  
  switch(state)
 800b7d2:	78fb      	ldrb	r3, [r7, #3]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d008      	beq.n	800b7ea <UTIL_LPM_SetOffMode+0x32>
 800b7d8:	2b01      	cmp	r3, #1
 800b7da:	d10e      	bne.n	800b7fa <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800b7dc:	4b0d      	ldr	r3, [pc, #52]	; (800b814 <UTIL_LPM_SetOffMode+0x5c>)
 800b7de:	681a      	ldr	r2, [r3, #0]
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	4313      	orrs	r3, r2
 800b7e4:	4a0b      	ldr	r2, [pc, #44]	; (800b814 <UTIL_LPM_SetOffMode+0x5c>)
 800b7e6:	6013      	str	r3, [r2, #0]
      break;
 800b7e8:	e008      	b.n	800b7fc <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	43da      	mvns	r2, r3
 800b7ee:	4b09      	ldr	r3, [pc, #36]	; (800b814 <UTIL_LPM_SetOffMode+0x5c>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	4013      	ands	r3, r2
 800b7f4:	4a07      	ldr	r2, [pc, #28]	; (800b814 <UTIL_LPM_SetOffMode+0x5c>)
 800b7f6:	6013      	str	r3, [r2, #0]
      break;
 800b7f8:	e000      	b.n	800b7fc <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800b7fa:	bf00      	nop
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	f383 8810 	msr	PRIMASK, r3
}
 800b806:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800b808:	bf00      	nop
 800b80a:	371c      	adds	r7, #28
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bc80      	pop	{r7}
 800b810:	4770      	bx	lr
 800b812:	bf00      	nop
 800b814:	20000550 	.word	0x20000550

0800b818 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b084      	sub	sp, #16
 800b81c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b81e:	f3ef 8310 	mrs	r3, PRIMASK
 800b822:	60bb      	str	r3, [r7, #8]
  return(result);
 800b824:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 800b826:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800b828:	b672      	cpsid	i
}
 800b82a:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800b82c:	4b12      	ldr	r3, [pc, #72]	; (800b878 <UTIL_LPM_EnterLowPower+0x60>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d006      	beq.n	800b842 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800b834:	4b11      	ldr	r3, [pc, #68]	; (800b87c <UTIL_LPM_EnterLowPower+0x64>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800b83a:	4b10      	ldr	r3, [pc, #64]	; (800b87c <UTIL_LPM_EnterLowPower+0x64>)
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	4798      	blx	r3
 800b840:	e010      	b.n	800b864 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800b842:	4b0f      	ldr	r3, [pc, #60]	; (800b880 <UTIL_LPM_EnterLowPower+0x68>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d006      	beq.n	800b858 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 800b84a:	4b0c      	ldr	r3, [pc, #48]	; (800b87c <UTIL_LPM_EnterLowPower+0x64>)
 800b84c:	689b      	ldr	r3, [r3, #8]
 800b84e:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800b850:	4b0a      	ldr	r3, [pc, #40]	; (800b87c <UTIL_LPM_EnterLowPower+0x64>)
 800b852:	68db      	ldr	r3, [r3, #12]
 800b854:	4798      	blx	r3
 800b856:	e005      	b.n	800b864 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 800b858:	4b08      	ldr	r3, [pc, #32]	; (800b87c <UTIL_LPM_EnterLowPower+0x64>)
 800b85a:	691b      	ldr	r3, [r3, #16]
 800b85c:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800b85e:	4b07      	ldr	r3, [pc, #28]	; (800b87c <UTIL_LPM_EnterLowPower+0x64>)
 800b860:	695b      	ldr	r3, [r3, #20]
 800b862:	4798      	blx	r3
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f383 8810 	msr	PRIMASK, r3
}
 800b86e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800b870:	bf00      	nop
 800b872:	3710      	adds	r7, #16
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}
 800b878:	2000054c 	.word	0x2000054c
 800b87c:	0800dfd4 	.word	0x0800dfd4
 800b880:	20000550 	.word	0x20000550

0800b884 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 800b884:	b480      	push	{r7}
 800b886:	b087      	sub	sp, #28
 800b888:	af00      	add	r7, sp, #0
 800b88a:	60f8      	str	r0, [r7, #12]
 800b88c:	60b9      	str	r1, [r7, #8]
 800b88e:	4613      	mov	r3, r2
 800b890:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	613b      	str	r3, [r7, #16]

  while( size-- )
 800b89a:	e007      	b.n	800b8ac <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 800b89c:	693a      	ldr	r2, [r7, #16]
 800b89e:	1c53      	adds	r3, r2, #1
 800b8a0:	613b      	str	r3, [r7, #16]
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	1c59      	adds	r1, r3, #1
 800b8a6:	6179      	str	r1, [r7, #20]
 800b8a8:	7812      	ldrb	r2, [r2, #0]
 800b8aa:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800b8ac:	88fb      	ldrh	r3, [r7, #6]
 800b8ae:	1e5a      	subs	r2, r3, #1
 800b8b0:	80fa      	strh	r2, [r7, #6]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d1f2      	bne.n	800b89c <UTIL_MEM_cpy_8+0x18>
    }
}
 800b8b6:	bf00      	nop
 800b8b8:	bf00      	nop
 800b8ba:	371c      	adds	r7, #28
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bc80      	pop	{r7}
 800b8c0:	4770      	bx	lr

0800b8c2 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800b8c2:	b480      	push	{r7}
 800b8c4:	b085      	sub	sp, #20
 800b8c6:	af00      	add	r7, sp, #0
 800b8c8:	6078      	str	r0, [r7, #4]
 800b8ca:	460b      	mov	r3, r1
 800b8cc:	70fb      	strb	r3, [r7, #3]
 800b8ce:	4613      	mov	r3, r2
 800b8d0:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800b8d6:	e004      	b.n	800b8e2 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	1c5a      	adds	r2, r3, #1
 800b8dc:	60fa      	str	r2, [r7, #12]
 800b8de:	78fa      	ldrb	r2, [r7, #3]
 800b8e0:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800b8e2:	883b      	ldrh	r3, [r7, #0]
 800b8e4:	1e5a      	subs	r2, r3, #1
 800b8e6:	803a      	strh	r2, [r7, #0]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d1f5      	bne.n	800b8d8 <UTIL_MEM_set_8+0x16>
  }
}
 800b8ec:	bf00      	nop
 800b8ee:	bf00      	nop
 800b8f0:	3714      	adds	r7, #20
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bc80      	pop	{r7}
 800b8f6:	4770      	bx	lr

0800b8f8 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 800b8f8:	b082      	sub	sp, #8
 800b8fa:	b480      	push	{r7}
 800b8fc:	b087      	sub	sp, #28
 800b8fe:	af00      	add	r7, sp, #0
 800b900:	60f8      	str	r0, [r7, #12]
 800b902:	1d38      	adds	r0, r7, #4
 800b904:	e880 0006 	stmia.w	r0, {r1, r2}
 800b908:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 800b90a:	2300      	movs	r3, #0
 800b90c:	613b      	str	r3, [r7, #16]
 800b90e:	2300      	movs	r3, #0
 800b910:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 800b912:	687a      	ldr	r2, [r7, #4]
 800b914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b916:	4413      	add	r3, r2
 800b918:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800b91a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800b91e:	b29a      	uxth	r2, r3
 800b920:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800b924:	b29b      	uxth	r3, r3
 800b926:	4413      	add	r3, r2
 800b928:	b29b      	uxth	r3, r3
 800b92a:	b21b      	sxth	r3, r3
 800b92c:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 800b92e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b932:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b936:	db0a      	blt.n	800b94e <SysTimeAdd+0x56>
  {
    c.Seconds++;
 800b938:	693b      	ldr	r3, [r7, #16]
 800b93a:	3301      	adds	r3, #1
 800b93c:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 800b93e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b942:	b29b      	uxth	r3, r3
 800b944:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800b948:	b29b      	uxth	r3, r3
 800b94a:	b21b      	sxth	r3, r3
 800b94c:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	461a      	mov	r2, r3
 800b952:	f107 0310 	add.w	r3, r7, #16
 800b956:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b95a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800b95e:	68f8      	ldr	r0, [r7, #12]
 800b960:	371c      	adds	r7, #28
 800b962:	46bd      	mov	sp, r7
 800b964:	bc80      	pop	{r7}
 800b966:	b002      	add	sp, #8
 800b968:	4770      	bx	lr
	...

0800b96c <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b08a      	sub	sp, #40	; 0x28
 800b970:	af02      	add	r7, sp, #8
 800b972:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800b974:	2300      	movs	r3, #0
 800b976:	61bb      	str	r3, [r7, #24]
 800b978:	2300      	movs	r3, #0
 800b97a:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 800b97c:	2300      	movs	r3, #0
 800b97e:	613b      	str	r3, [r7, #16]
 800b980:	2300      	movs	r3, #0
 800b982:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800b984:	4b14      	ldr	r3, [pc, #80]	; (800b9d8 <SysTimeGet+0x6c>)
 800b986:	691b      	ldr	r3, [r3, #16]
 800b988:	f107 0218 	add.w	r2, r7, #24
 800b98c:	3204      	adds	r2, #4
 800b98e:	4610      	mov	r0, r2
 800b990:	4798      	blx	r3
 800b992:	4603      	mov	r3, r0
 800b994:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800b996:	4b10      	ldr	r3, [pc, #64]	; (800b9d8 <SysTimeGet+0x6c>)
 800b998:	68db      	ldr	r3, [r3, #12]
 800b99a:	4798      	blx	r3
 800b99c:	4603      	mov	r3, r0
 800b99e:	b21b      	sxth	r3, r3
 800b9a0:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800b9a2:	4b0d      	ldr	r3, [pc, #52]	; (800b9d8 <SysTimeGet+0x6c>)
 800b9a4:	685b      	ldr	r3, [r3, #4]
 800b9a6:	4798      	blx	r3
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 800b9ac:	f107 0010 	add.w	r0, r7, #16
 800b9b0:	69fb      	ldr	r3, [r7, #28]
 800b9b2:	9300      	str	r3, [sp, #0]
 800b9b4:	69bb      	ldr	r3, [r7, #24]
 800b9b6:	f107 0208 	add.w	r2, r7, #8
 800b9ba:	ca06      	ldmia	r2, {r1, r2}
 800b9bc:	f7ff ff9c 	bl	800b8f8 <SysTimeAdd>

  return sysTime;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	461a      	mov	r2, r3
 800b9c4:	f107 0310 	add.w	r3, r7, #16
 800b9c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b9cc:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	3720      	adds	r7, #32
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}
 800b9d8:	0800e0b8 	.word	0x0800e0b8

0800b9dc <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b085      	sub	sp, #20
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  int i = 0;
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800b9e8:	e00e      	b.n	800ba08 <ee_skip_atoi+0x2c>
 800b9ea:	68fa      	ldr	r2, [r7, #12]
 800b9ec:	4613      	mov	r3, r2
 800b9ee:	009b      	lsls	r3, r3, #2
 800b9f0:	4413      	add	r3, r2
 800b9f2:	005b      	lsls	r3, r3, #1
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	1c59      	adds	r1, r3, #1
 800b9fc:	687a      	ldr	r2, [r7, #4]
 800b9fe:	6011      	str	r1, [r2, #0]
 800ba00:	781b      	ldrb	r3, [r3, #0]
 800ba02:	4403      	add	r3, r0
 800ba04:	3b30      	subs	r3, #48	; 0x30
 800ba06:	60fb      	str	r3, [r7, #12]
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	781b      	ldrb	r3, [r3, #0]
 800ba0e:	2b2f      	cmp	r3, #47	; 0x2f
 800ba10:	d904      	bls.n	800ba1c <ee_skip_atoi+0x40>
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	781b      	ldrb	r3, [r3, #0]
 800ba18:	2b39      	cmp	r3, #57	; 0x39
 800ba1a:	d9e6      	bls.n	800b9ea <ee_skip_atoi+0xe>
  return i;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3714      	adds	r7, #20
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bc80      	pop	{r7}
 800ba26:	4770      	bx	lr

0800ba28 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b099      	sub	sp, #100	; 0x64
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	60f8      	str	r0, [r7, #12]
 800ba30:	60b9      	str	r1, [r7, #8]
 800ba32:	607a      	str	r2, [r7, #4]
 800ba34:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 800ba36:	4b71      	ldr	r3, [pc, #452]	; (800bbfc <ee_number+0x1d4>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 800ba3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d002      	beq.n	800ba4c <ee_number+0x24>
 800ba46:	4b6e      	ldr	r3, [pc, #440]	; (800bc00 <ee_number+0x1d8>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	2b01      	cmp	r3, #1
 800ba50:	dd02      	ble.n	800ba58 <ee_number+0x30>
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	2b24      	cmp	r3, #36	; 0x24
 800ba56:	dd01      	ble.n	800ba5c <ee_number+0x34>
 800ba58:	2300      	movs	r3, #0
 800ba5a:	e0ca      	b.n	800bbf2 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 800ba5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba5e:	f003 0301 	and.w	r3, r3, #1
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d001      	beq.n	800ba6a <ee_number+0x42>
 800ba66:	2330      	movs	r3, #48	; 0x30
 800ba68:	e000      	b.n	800ba6c <ee_number+0x44>
 800ba6a:	2320      	movs	r3, #32
 800ba6c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 800ba70:	2300      	movs	r3, #0
 800ba72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 800ba76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba78:	f003 0302 	and.w	r3, r3, #2
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d00b      	beq.n	800ba98 <ee_number+0x70>
  {
    if (num < 0)
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	da08      	bge.n	800ba98 <ee_number+0x70>
    {
      sign = '-';
 800ba86:	232d      	movs	r3, #45	; 0x2d
 800ba88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	425b      	negs	r3, r3
 800ba90:	607b      	str	r3, [r7, #4]
      size--;
 800ba92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ba94:	3b01      	subs	r3, #1
 800ba96:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d11e      	bne.n	800bae0 <ee_number+0xb8>
    tmp[i++] = '0';
 800baa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800baa4:	1c5a      	adds	r2, r3, #1
 800baa6:	657a      	str	r2, [r7, #84]	; 0x54
 800baa8:	3360      	adds	r3, #96	; 0x60
 800baaa:	443b      	add	r3, r7
 800baac:	2230      	movs	r2, #48	; 0x30
 800baae:	f803 2c50 	strb.w	r2, [r3, #-80]
 800bab2:	e018      	b.n	800bae6 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	683a      	ldr	r2, [r7, #0]
 800bab8:	fbb3 f1f2 	udiv	r1, r3, r2
 800babc:	fb01 f202 	mul.w	r2, r1, r2
 800bac0:	1a9b      	subs	r3, r3, r2
 800bac2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bac4:	441a      	add	r2, r3
 800bac6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bac8:	1c59      	adds	r1, r3, #1
 800baca:	6579      	str	r1, [r7, #84]	; 0x54
 800bacc:	7812      	ldrb	r2, [r2, #0]
 800bace:	3360      	adds	r3, #96	; 0x60
 800bad0:	443b      	add	r3, r7
 800bad2:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 800bad6:	687a      	ldr	r2, [r7, #4]
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	fbb2 f3f3 	udiv	r3, r2, r3
 800bade:	607b      	str	r3, [r7, #4]
    while (num != 0)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d1e6      	bne.n	800bab4 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 800bae6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800baea:	429a      	cmp	r2, r3
 800baec:	dd01      	ble.n	800baf2 <ee_number+0xca>
 800baee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800baf0:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 800baf2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800baf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800baf6:	1ad3      	subs	r3, r2, r3
 800baf8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800bafa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bafc:	f003 0301 	and.w	r3, r3, #1
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d112      	bne.n	800bb2a <ee_number+0x102>
 800bb04:	e00c      	b.n	800bb20 <ee_number+0xf8>
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	1c5a      	adds	r2, r3, #1
 800bb0a:	60fa      	str	r2, [r7, #12]
 800bb0c:	2220      	movs	r2, #32
 800bb0e:	701a      	strb	r2, [r3, #0]
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	3b01      	subs	r3, #1
 800bb14:	60bb      	str	r3, [r7, #8]
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d101      	bne.n	800bb20 <ee_number+0xf8>
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	e068      	b.n	800bbf2 <ee_number+0x1ca>
 800bb20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bb22:	1e5a      	subs	r2, r3, #1
 800bb24:	66ba      	str	r2, [r7, #104]	; 0x68
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	dced      	bgt.n	800bb06 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 800bb2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d01b      	beq.n	800bb6a <ee_number+0x142>
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	1c5a      	adds	r2, r3, #1
 800bb36:	60fa      	str	r2, [r7, #12]
 800bb38:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800bb3c:	701a      	strb	r2, [r3, #0]
 800bb3e:	68bb      	ldr	r3, [r7, #8]
 800bb40:	3b01      	subs	r3, #1
 800bb42:	60bb      	str	r3, [r7, #8]
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d10f      	bne.n	800bb6a <ee_number+0x142>
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	e051      	b.n	800bbf2 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	1c5a      	adds	r2, r3, #1
 800bb52:	60fa      	str	r2, [r7, #12]
 800bb54:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 800bb58:	701a      	strb	r2, [r3, #0]
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	3b01      	subs	r3, #1
 800bb5e:	60bb      	str	r3, [r7, #8]
 800bb60:	68bb      	ldr	r3, [r7, #8]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d101      	bne.n	800bb6a <ee_number+0x142>
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	e043      	b.n	800bbf2 <ee_number+0x1ca>
 800bb6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bb6c:	1e5a      	subs	r2, r3, #1
 800bb6e:	66ba      	str	r2, [r7, #104]	; 0x68
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	dcec      	bgt.n	800bb4e <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 800bb74:	e00c      	b.n	800bb90 <ee_number+0x168>
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	1c5a      	adds	r2, r3, #1
 800bb7a:	60fa      	str	r2, [r7, #12]
 800bb7c:	2230      	movs	r2, #48	; 0x30
 800bb7e:	701a      	strb	r2, [r3, #0]
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	3b01      	subs	r3, #1
 800bb84:	60bb      	str	r3, [r7, #8]
 800bb86:	68bb      	ldr	r3, [r7, #8]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d101      	bne.n	800bb90 <ee_number+0x168>
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	e030      	b.n	800bbf2 <ee_number+0x1ca>
 800bb90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb92:	1e5a      	subs	r2, r3, #1
 800bb94:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bb96:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	dbec      	blt.n	800bb76 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 800bb9c:	e010      	b.n	800bbc0 <ee_number+0x198>
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	1c5a      	adds	r2, r3, #1
 800bba2:	60fa      	str	r2, [r7, #12]
 800bba4:	f107 0110 	add.w	r1, r7, #16
 800bba8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bbaa:	440a      	add	r2, r1
 800bbac:	7812      	ldrb	r2, [r2, #0]
 800bbae:	701a      	strb	r2, [r3, #0]
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	3b01      	subs	r3, #1
 800bbb4:	60bb      	str	r3, [r7, #8]
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d101      	bne.n	800bbc0 <ee_number+0x198>
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	e018      	b.n	800bbf2 <ee_number+0x1ca>
 800bbc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bbc2:	1e5a      	subs	r2, r3, #1
 800bbc4:	657a      	str	r2, [r7, #84]	; 0x54
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	dce9      	bgt.n	800bb9e <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 800bbca:	e00c      	b.n	800bbe6 <ee_number+0x1be>
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	1c5a      	adds	r2, r3, #1
 800bbd0:	60fa      	str	r2, [r7, #12]
 800bbd2:	2220      	movs	r2, #32
 800bbd4:	701a      	strb	r2, [r3, #0]
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	3b01      	subs	r3, #1
 800bbda:	60bb      	str	r3, [r7, #8]
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d101      	bne.n	800bbe6 <ee_number+0x1be>
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	e005      	b.n	800bbf2 <ee_number+0x1ca>
 800bbe6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bbe8:	1e5a      	subs	r2, r3, #1
 800bbea:	66ba      	str	r2, [r7, #104]	; 0x68
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	dced      	bgt.n	800bbcc <ee_number+0x1a4>

  return str;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3764      	adds	r7, #100	; 0x64
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bc80      	pop	{r7}
 800bbfa:	4770      	bx	lr
 800bbfc:	20000014 	.word	0x20000014
 800bc00:	20000018 	.word	0x20000018

0800bc04 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b092      	sub	sp, #72	; 0x48
 800bc08:	af04      	add	r7, sp, #16
 800bc0a:	60f8      	str	r0, [r7, #12]
 800bc0c:	60b9      	str	r1, [r7, #8]
 800bc0e:	607a      	str	r2, [r7, #4]
 800bc10:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 800bc12:	68bb      	ldr	r3, [r7, #8]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	dc01      	bgt.n	800bc1c <tiny_vsnprintf_like+0x18>
  {
    return 0;
 800bc18:	2300      	movs	r3, #0
 800bc1a:	e142      	b.n	800bea2 <tiny_vsnprintf_like+0x29e>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc20:	e12a      	b.n	800be78 <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 800bc22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	1ad2      	subs	r2, r2, r3
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	3b01      	subs	r3, #1
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	f280 8131 	bge.w	800be94 <tiny_vsnprintf_like+0x290>

    if (*fmt != '%')
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	781b      	ldrb	r3, [r3, #0]
 800bc36:	2b25      	cmp	r3, #37	; 0x25
 800bc38:	d006      	beq.n	800bc48 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 800bc3a:	687a      	ldr	r2, [r7, #4]
 800bc3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc3e:	1c59      	adds	r1, r3, #1
 800bc40:	62f9      	str	r1, [r7, #44]	; 0x2c
 800bc42:	7812      	ldrb	r2, [r2, #0]
 800bc44:	701a      	strb	r2, [r3, #0]
      continue;
 800bc46:	e114      	b.n	800be72 <tiny_vsnprintf_like+0x26e>
    }

    // Process flags
    flags = 0;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	3301      	adds	r3, #1
 800bc50:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	781b      	ldrb	r3, [r3, #0]
 800bc56:	2b30      	cmp	r3, #48	; 0x30
 800bc58:	d103      	bne.n	800bc62 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 800bc5a:	6a3b      	ldr	r3, [r7, #32]
 800bc5c:	f043 0301 	orr.w	r3, r3, #1
 800bc60:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 800bc62:	f04f 33ff 	mov.w	r3, #4294967295
 800bc66:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	781b      	ldrb	r3, [r3, #0]
 800bc6c:	2b2f      	cmp	r3, #47	; 0x2f
 800bc6e:	d908      	bls.n	800bc82 <tiny_vsnprintf_like+0x7e>
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	781b      	ldrb	r3, [r3, #0]
 800bc74:	2b39      	cmp	r3, #57	; 0x39
 800bc76:	d804      	bhi.n	800bc82 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 800bc78:	1d3b      	adds	r3, r7, #4
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	f7ff feae 	bl	800b9dc <ee_skip_atoi>
 800bc80:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 800bc82:	f04f 33ff 	mov.w	r3, #4294967295
 800bc86:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 800bc88:	f04f 33ff 	mov.w	r3, #4294967295
 800bc8c:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 800bc8e:	230a      	movs	r3, #10
 800bc90:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	781b      	ldrb	r3, [r3, #0]
 800bc96:	3b58      	subs	r3, #88	; 0x58
 800bc98:	2b20      	cmp	r3, #32
 800bc9a:	f200 8094 	bhi.w	800bdc6 <tiny_vsnprintf_like+0x1c2>
 800bc9e:	a201      	add	r2, pc, #4	; (adr r2, 800bca4 <tiny_vsnprintf_like+0xa0>)
 800bca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bca4:	0800bdaf 	.word	0x0800bdaf
 800bca8:	0800bdc7 	.word	0x0800bdc7
 800bcac:	0800bdc7 	.word	0x0800bdc7
 800bcb0:	0800bdc7 	.word	0x0800bdc7
 800bcb4:	0800bdc7 	.word	0x0800bdc7
 800bcb8:	0800bdc7 	.word	0x0800bdc7
 800bcbc:	0800bdc7 	.word	0x0800bdc7
 800bcc0:	0800bdc7 	.word	0x0800bdc7
 800bcc4:	0800bdc7 	.word	0x0800bdc7
 800bcc8:	0800bdc7 	.word	0x0800bdc7
 800bccc:	0800bdc7 	.word	0x0800bdc7
 800bcd0:	0800bd33 	.word	0x0800bd33
 800bcd4:	0800bdbd 	.word	0x0800bdbd
 800bcd8:	0800bdc7 	.word	0x0800bdc7
 800bcdc:	0800bdc7 	.word	0x0800bdc7
 800bce0:	0800bdc7 	.word	0x0800bdc7
 800bce4:	0800bdc7 	.word	0x0800bdc7
 800bce8:	0800bdbd 	.word	0x0800bdbd
 800bcec:	0800bdc7 	.word	0x0800bdc7
 800bcf0:	0800bdc7 	.word	0x0800bdc7
 800bcf4:	0800bdc7 	.word	0x0800bdc7
 800bcf8:	0800bdc7 	.word	0x0800bdc7
 800bcfc:	0800bdc7 	.word	0x0800bdc7
 800bd00:	0800bdc7 	.word	0x0800bdc7
 800bd04:	0800bdc7 	.word	0x0800bdc7
 800bd08:	0800bdc7 	.word	0x0800bdc7
 800bd0c:	0800bdc7 	.word	0x0800bdc7
 800bd10:	0800bd53 	.word	0x0800bd53
 800bd14:	0800bdc7 	.word	0x0800bdc7
 800bd18:	0800be13 	.word	0x0800be13
 800bd1c:	0800bdc7 	.word	0x0800bdc7
 800bd20:	0800bdc7 	.word	0x0800bdc7
 800bd24:	0800bdb7 	.word	0x0800bdb7
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 800bd28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd2a:	1c5a      	adds	r2, r3, #1
 800bd2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bd2e:	2220      	movs	r2, #32
 800bd30:	701a      	strb	r2, [r3, #0]
 800bd32:	69fb      	ldr	r3, [r7, #28]
 800bd34:	3b01      	subs	r3, #1
 800bd36:	61fb      	str	r3, [r7, #28]
 800bd38:	69fb      	ldr	r3, [r7, #28]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	dcf4      	bgt.n	800bd28 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	1d1a      	adds	r2, r3, #4
 800bd42:	603a      	str	r2, [r7, #0]
 800bd44:	6819      	ldr	r1, [r3, #0]
 800bd46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd48:	1c5a      	adds	r2, r3, #1
 800bd4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bd4c:	b2ca      	uxtb	r2, r1
 800bd4e:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 800bd50:	e08f      	b.n	800be72 <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	1d1a      	adds	r2, r3, #4
 800bd56:	603a      	str	r2, [r7, #0]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 800bd5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d101      	bne.n	800bd66 <tiny_vsnprintf_like+0x162>
 800bd62:	4b52      	ldr	r3, [pc, #328]	; (800beac <tiny_vsnprintf_like+0x2a8>)
 800bd64:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 800bd66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bd68:	f7f4 fa0a 	bl	8000180 <strlen>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 800bd70:	e004      	b.n	800bd7c <tiny_vsnprintf_like+0x178>
 800bd72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd74:	1c5a      	adds	r2, r3, #1
 800bd76:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bd78:	2220      	movs	r2, #32
 800bd7a:	701a      	strb	r2, [r3, #0]
 800bd7c:	69fb      	ldr	r3, [r7, #28]
 800bd7e:	1e5a      	subs	r2, r3, #1
 800bd80:	61fa      	str	r2, [r7, #28]
 800bd82:	693a      	ldr	r2, [r7, #16]
 800bd84:	429a      	cmp	r2, r3
 800bd86:	dbf4      	blt.n	800bd72 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd8c:	e00a      	b.n	800bda4 <tiny_vsnprintf_like+0x1a0>
 800bd8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd90:	1c53      	adds	r3, r2, #1
 800bd92:	627b      	str	r3, [r7, #36]	; 0x24
 800bd94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd96:	1c59      	adds	r1, r3, #1
 800bd98:	62f9      	str	r1, [r7, #44]	; 0x2c
 800bd9a:	7812      	ldrb	r2, [r2, #0]
 800bd9c:	701a      	strb	r2, [r3, #0]
 800bd9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda0:	3301      	adds	r3, #1
 800bda2:	62bb      	str	r3, [r7, #40]	; 0x28
 800bda4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bda6:	693b      	ldr	r3, [r7, #16]
 800bda8:	429a      	cmp	r2, r3
 800bdaa:	dbf0      	blt.n	800bd8e <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 800bdac:	e061      	b.n	800be72 <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 800bdae:	6a3b      	ldr	r3, [r7, #32]
 800bdb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdb4:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 800bdb6:	2310      	movs	r3, #16
 800bdb8:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 800bdba:	e02d      	b.n	800be18 <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 800bdbc:	6a3b      	ldr	r3, [r7, #32]
 800bdbe:	f043 0302 	orr.w	r3, r3, #2
 800bdc2:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 800bdc4:	e025      	b.n	800be12 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	781b      	ldrb	r3, [r3, #0]
 800bdca:	2b25      	cmp	r3, #37	; 0x25
 800bdcc:	d004      	beq.n	800bdd8 <tiny_vsnprintf_like+0x1d4>
 800bdce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdd0:	1c5a      	adds	r2, r3, #1
 800bdd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bdd4:	2225      	movs	r2, #37	; 0x25
 800bdd6:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 800bdd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	1ad2      	subs	r2, r2, r3
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	3b01      	subs	r3, #1
 800bde2:	429a      	cmp	r2, r3
 800bde4:	da17      	bge.n	800be16 <tiny_vsnprintf_like+0x212>
        if (*fmt)
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	781b      	ldrb	r3, [r3, #0]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d006      	beq.n	800bdfc <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 800bdee:	687a      	ldr	r2, [r7, #4]
 800bdf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf2:	1c59      	adds	r1, r3, #1
 800bdf4:	62f9      	str	r1, [r7, #44]	; 0x2c
 800bdf6:	7812      	ldrb	r2, [r2, #0]
 800bdf8:	701a      	strb	r2, [r3, #0]
 800bdfa:	e002      	b.n	800be02 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	3b01      	subs	r3, #1
 800be00:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 800be02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	1ad2      	subs	r2, r2, r3
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	3b01      	subs	r3, #1
 800be0c:	429a      	cmp	r2, r3
 800be0e:	db2f      	blt.n	800be70 <tiny_vsnprintf_like+0x26c>
 800be10:	e002      	b.n	800be18 <tiny_vsnprintf_like+0x214>
        break;
 800be12:	bf00      	nop
 800be14:	e000      	b.n	800be18 <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 800be16:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 800be18:	697b      	ldr	r3, [r7, #20]
 800be1a:	2b6c      	cmp	r3, #108	; 0x6c
 800be1c:	d105      	bne.n	800be2a <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	1d1a      	adds	r2, r3, #4
 800be22:	603a      	str	r2, [r7, #0]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	637b      	str	r3, [r7, #52]	; 0x34
 800be28:	e00f      	b.n	800be4a <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 800be2a:	6a3b      	ldr	r3, [r7, #32]
 800be2c:	f003 0302 	and.w	r3, r3, #2
 800be30:	2b00      	cmp	r3, #0
 800be32:	d005      	beq.n	800be40 <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	1d1a      	adds	r2, r3, #4
 800be38:	603a      	str	r2, [r7, #0]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	637b      	str	r3, [r7, #52]	; 0x34
 800be3e:	e004      	b.n	800be4a <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	1d1a      	adds	r2, r3, #4
 800be44:	603a      	str	r2, [r7, #0]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	1e5a      	subs	r2, r3, #1
 800be4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	1acb      	subs	r3, r1, r3
 800be54:	1ad1      	subs	r1, r2, r3
 800be56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be58:	6a3b      	ldr	r3, [r7, #32]
 800be5a:	9302      	str	r3, [sp, #8]
 800be5c:	69bb      	ldr	r3, [r7, #24]
 800be5e:	9301      	str	r3, [sp, #4]
 800be60:	69fb      	ldr	r3, [r7, #28]
 800be62:	9300      	str	r3, [sp, #0]
 800be64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be68:	f7ff fdde 	bl	800ba28 <ee_number>
 800be6c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800be6e:	e000      	b.n	800be72 <tiny_vsnprintf_like+0x26e>
        continue;
 800be70:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	3301      	adds	r3, #1
 800be76:	607b      	str	r3, [r7, #4]
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	781b      	ldrb	r3, [r3, #0]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	f47f aed0 	bne.w	800bc22 <tiny_vsnprintf_like+0x1e>
 800be82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	1ad2      	subs	r2, r2, r3
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	3b01      	subs	r3, #1
 800be8c:	429a      	cmp	r2, r3
 800be8e:	f6bf aec8 	bge.w	800bc22 <tiny_vsnprintf_like+0x1e>
 800be92:	e000      	b.n	800be96 <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 800be94:	bf00      	nop
  }

  *str = '\0';
 800be96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be98:	2200      	movs	r2, #0
 800be9a:	701a      	strb	r2, [r3, #0]
  return str - buf;
 800be9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	1ad3      	subs	r3, r2, r3
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	3738      	adds	r7, #56	; 0x38
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd80      	pop	{r7, pc}
 800beaa:	bf00      	nop
 800beac:	0800dfcc 	.word	0x0800dfcc

0800beb0 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b090      	sub	sp, #64	; 0x40
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800beb8:	4b73      	ldr	r3, [pc, #460]	; (800c088 <UTIL_SEQ_Run+0x1d8>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800bebe:	4b72      	ldr	r3, [pc, #456]	; (800c088 <UTIL_SEQ_Run+0x1d8>)
 800bec0:	681a      	ldr	r2, [r3, #0]
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	4013      	ands	r3, r2
 800bec6:	4a70      	ldr	r2, [pc, #448]	; (800c088 <UTIL_SEQ_Run+0x1d8>)
 800bec8:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800beca:	4b70      	ldr	r3, [pc, #448]	; (800c08c <UTIL_SEQ_Run+0x1dc>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800bed0:	4b6f      	ldr	r3, [pc, #444]	; (800c090 <UTIL_SEQ_Run+0x1e0>)
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800bed6:	4b6f      	ldr	r3, [pc, #444]	; (800c094 <UTIL_SEQ_Run+0x1e4>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800bedc:	4b6e      	ldr	r3, [pc, #440]	; (800c098 <UTIL_SEQ_Run+0x1e8>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800bee2:	e08d      	b.n	800c000 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800bee4:	2300      	movs	r3, #0
 800bee6:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800bee8:	e002      	b.n	800bef0 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800beea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800beec:	3301      	adds	r3, #1
 800beee:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800bef0:	4a6a      	ldr	r2, [pc, #424]	; (800c09c <UTIL_SEQ_Run+0x1ec>)
 800bef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bef4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800bef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800befa:	401a      	ands	r2, r3
 800befc:	4b62      	ldr	r3, [pc, #392]	; (800c088 <UTIL_SEQ_Run+0x1d8>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	4013      	ands	r3, r2
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d0f1      	beq.n	800beea <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800bf06:	4a65      	ldr	r2, [pc, #404]	; (800c09c <UTIL_SEQ_Run+0x1ec>)
 800bf08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf0a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800bf0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf10:	401a      	ands	r2, r3
 800bf12:	4b5d      	ldr	r3, [pc, #372]	; (800c088 <UTIL_SEQ_Run+0x1d8>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	4013      	ands	r3, r2
 800bf18:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800bf1a:	4a60      	ldr	r2, [pc, #384]	; (800c09c <UTIL_SEQ_Run+0x1ec>)
 800bf1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf1e:	00db      	lsls	r3, r3, #3
 800bf20:	4413      	add	r3, r2
 800bf22:	685a      	ldr	r2, [r3, #4]
 800bf24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf26:	4013      	ands	r3, r2
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d106      	bne.n	800bf3a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800bf2c:	4a5b      	ldr	r2, [pc, #364]	; (800c09c <UTIL_SEQ_Run+0x1ec>)
 800bf2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf30:	00db      	lsls	r3, r3, #3
 800bf32:	4413      	add	r3, r2
 800bf34:	f04f 32ff 	mov.w	r2, #4294967295
 800bf38:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800bf3a:	4a58      	ldr	r2, [pc, #352]	; (800c09c <UTIL_SEQ_Run+0x1ec>)
 800bf3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf3e:	00db      	lsls	r3, r3, #3
 800bf40:	4413      	add	r3, r2
 800bf42:	685a      	ldr	r2, [r3, #4]
 800bf44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf46:	4013      	ands	r3, r2
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f000 f907 	bl	800c15c <SEQ_BitPosition>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	461a      	mov	r2, r3
 800bf52:	4b53      	ldr	r3, [pc, #332]	; (800c0a0 <UTIL_SEQ_Run+0x1f0>)
 800bf54:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800bf56:	4a51      	ldr	r2, [pc, #324]	; (800c09c <UTIL_SEQ_Run+0x1ec>)
 800bf58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf5a:	00db      	lsls	r3, r3, #3
 800bf5c:	4413      	add	r3, r2
 800bf5e:	685a      	ldr	r2, [r3, #4]
 800bf60:	4b4f      	ldr	r3, [pc, #316]	; (800c0a0 <UTIL_SEQ_Run+0x1f0>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	2101      	movs	r1, #1
 800bf66:	fa01 f303 	lsl.w	r3, r1, r3
 800bf6a:	43db      	mvns	r3, r3
 800bf6c:	401a      	ands	r2, r3
 800bf6e:	494b      	ldr	r1, [pc, #300]	; (800c09c <UTIL_SEQ_Run+0x1ec>)
 800bf70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf72:	00db      	lsls	r3, r3, #3
 800bf74:	440b      	add	r3, r1
 800bf76:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf78:	f3ef 8310 	mrs	r3, PRIMASK
 800bf7c:	61bb      	str	r3, [r7, #24]
  return(result);
 800bf7e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800bf80:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800bf82:	b672      	cpsid	i
}
 800bf84:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800bf86:	4b46      	ldr	r3, [pc, #280]	; (800c0a0 <UTIL_SEQ_Run+0x1f0>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	2201      	movs	r2, #1
 800bf8c:	fa02 f303 	lsl.w	r3, r2, r3
 800bf90:	43da      	mvns	r2, r3
 800bf92:	4b3e      	ldr	r3, [pc, #248]	; (800c08c <UTIL_SEQ_Run+0x1dc>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	4013      	ands	r3, r2
 800bf98:	4a3c      	ldr	r2, [pc, #240]	; (800c08c <UTIL_SEQ_Run+0x1dc>)
 800bf9a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfa0:	e013      	b.n	800bfca <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800bfa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfa4:	3b01      	subs	r3, #1
 800bfa6:	4a3d      	ldr	r2, [pc, #244]	; (800c09c <UTIL_SEQ_Run+0x1ec>)
 800bfa8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800bfac:	4b3c      	ldr	r3, [pc, #240]	; (800c0a0 <UTIL_SEQ_Run+0x1f0>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	2201      	movs	r2, #1
 800bfb2:	fa02 f303 	lsl.w	r3, r2, r3
 800bfb6:	43da      	mvns	r2, r3
 800bfb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfba:	3b01      	subs	r3, #1
 800bfbc:	400a      	ands	r2, r1
 800bfbe:	4937      	ldr	r1, [pc, #220]	; (800c09c <UTIL_SEQ_Run+0x1ec>)
 800bfc0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800bfc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfc6:	3b01      	subs	r3, #1
 800bfc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d1e8      	bne.n	800bfa2 <UTIL_SEQ_Run+0xf2>
 800bfd0:	6a3b      	ldr	r3, [r7, #32]
 800bfd2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	f383 8810 	msr	PRIMASK, r3
}
 800bfda:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800bfdc:	4b30      	ldr	r3, [pc, #192]	; (800c0a0 <UTIL_SEQ_Run+0x1f0>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	4a30      	ldr	r2, [pc, #192]	; (800c0a4 <UTIL_SEQ_Run+0x1f4>)
 800bfe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfe6:	4798      	blx	r3

    local_taskset = TaskSet;
 800bfe8:	4b28      	ldr	r3, [pc, #160]	; (800c08c <UTIL_SEQ_Run+0x1dc>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800bfee:	4b28      	ldr	r3, [pc, #160]	; (800c090 <UTIL_SEQ_Run+0x1e0>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800bff4:	4b27      	ldr	r3, [pc, #156]	; (800c094 <UTIL_SEQ_Run+0x1e4>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800bffa:	4b27      	ldr	r3, [pc, #156]	; (800c098 <UTIL_SEQ_Run+0x1e8>)
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800c000:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c004:	401a      	ands	r2, r3
 800c006:	4b20      	ldr	r3, [pc, #128]	; (800c088 <UTIL_SEQ_Run+0x1d8>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	4013      	ands	r3, r2
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d005      	beq.n	800c01c <UTIL_SEQ_Run+0x16c>
 800c010:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c014:	4013      	ands	r3, r2
 800c016:	2b00      	cmp	r3, #0
 800c018:	f43f af64 	beq.w	800bee4 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800c01c:	4b20      	ldr	r3, [pc, #128]	; (800c0a0 <UTIL_SEQ_Run+0x1f0>)
 800c01e:	f04f 32ff 	mov.w	r2, #4294967295
 800c022:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800c024:	f000 f88e 	bl	800c144 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c028:	f3ef 8310 	mrs	r3, PRIMASK
 800c02c:	613b      	str	r3, [r7, #16]
  return(result);
 800c02e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800c030:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c032:	b672      	cpsid	i
}
 800c034:	bf00      	nop
  local_taskset = TaskSet;
 800c036:	4b15      	ldr	r3, [pc, #84]	; (800c08c <UTIL_SEQ_Run+0x1dc>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800c03c:	4b14      	ldr	r3, [pc, #80]	; (800c090 <UTIL_SEQ_Run+0x1e0>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800c042:	4b14      	ldr	r3, [pc, #80]	; (800c094 <UTIL_SEQ_Run+0x1e4>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800c048:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c04c:	401a      	ands	r2, r3
 800c04e:	4b0e      	ldr	r3, [pc, #56]	; (800c088 <UTIL_SEQ_Run+0x1d8>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	4013      	ands	r3, r2
 800c054:	2b00      	cmp	r3, #0
 800c056:	d107      	bne.n	800c068 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800c058:	4b0f      	ldr	r3, [pc, #60]	; (800c098 <UTIL_SEQ_Run+0x1e8>)
 800c05a:	681a      	ldr	r2, [r3, #0]
 800c05c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c05e:	4013      	ands	r3, r2
 800c060:	2b00      	cmp	r3, #0
 800c062:	d101      	bne.n	800c068 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800c064:	f7f4 fe40 	bl	8000ce8 <UTIL_SEQ_Idle>
 800c068:	69fb      	ldr	r3, [r7, #28]
 800c06a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	f383 8810 	msr	PRIMASK, r3
}
 800c072:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800c074:	f000 f86c 	bl	800c150 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800c078:	4a03      	ldr	r2, [pc, #12]	; (800c088 <UTIL_SEQ_Run+0x1d8>)
 800c07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c07c:	6013      	str	r3, [r2, #0]

  return;
 800c07e:	bf00      	nop
}
 800c080:	3740      	adds	r7, #64	; 0x40
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}
 800c086:	bf00      	nop
 800c088:	20000020 	.word	0x20000020
 800c08c:	20000554 	.word	0x20000554
 800c090:	20000558 	.word	0x20000558
 800c094:	2000001c 	.word	0x2000001c
 800c098:	2000055c 	.word	0x2000055c
 800c09c:	20000568 	.word	0x20000568
 800c0a0:	20000560 	.word	0x20000560
 800c0a4:	20000564 	.word	0x20000564

0800c0a8 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b088      	sub	sp, #32
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	60f8      	str	r0, [r7, #12]
 800c0b0:	60b9      	str	r1, [r7, #8]
 800c0b2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c0b4:	f3ef 8310 	mrs	r3, PRIMASK
 800c0b8:	617b      	str	r3, [r7, #20]
  return(result);
 800c0ba:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800c0bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c0be:	b672      	cpsid	i
}
 800c0c0:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800c0c2:	68f8      	ldr	r0, [r7, #12]
 800c0c4:	f000 f84a 	bl	800c15c <SEQ_BitPosition>
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	4619      	mov	r1, r3
 800c0cc:	4a06      	ldr	r2, [pc, #24]	; (800c0e8 <UTIL_SEQ_RegTask+0x40>)
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c0d4:	69fb      	ldr	r3, [r7, #28]
 800c0d6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c0d8:	69bb      	ldr	r3, [r7, #24]
 800c0da:	f383 8810 	msr	PRIMASK, r3
}
 800c0de:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800c0e0:	bf00      	nop
}
 800c0e2:	3720      	adds	r7, #32
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}
 800c0e8:	20000564 	.word	0x20000564

0800c0ec <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800c0ec:	b480      	push	{r7}
 800c0ee:	b087      	sub	sp, #28
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
 800c0f4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c0f6:	f3ef 8310 	mrs	r3, PRIMASK
 800c0fa:	60fb      	str	r3, [r7, #12]
  return(result);
 800c0fc:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c0fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c100:	b672      	cpsid	i
}
 800c102:	bf00      	nop

  TaskSet |= TaskId_bm;
 800c104:	4b0d      	ldr	r3, [pc, #52]	; (800c13c <UTIL_SEQ_SetTask+0x50>)
 800c106:	681a      	ldr	r2, [r3, #0]
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	4313      	orrs	r3, r2
 800c10c:	4a0b      	ldr	r2, [pc, #44]	; (800c13c <UTIL_SEQ_SetTask+0x50>)
 800c10e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800c110:	4a0b      	ldr	r2, [pc, #44]	; (800c140 <UTIL_SEQ_SetTask+0x54>)
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	431a      	orrs	r2, r3
 800c11c:	4908      	ldr	r1, [pc, #32]	; (800c140 <UTIL_SEQ_SetTask+0x54>)
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800c124:	697b      	ldr	r3, [r7, #20]
 800c126:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c128:	693b      	ldr	r3, [r7, #16]
 800c12a:	f383 8810 	msr	PRIMASK, r3
}
 800c12e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c130:	bf00      	nop
}
 800c132:	371c      	adds	r7, #28
 800c134:	46bd      	mov	sp, r7
 800c136:	bc80      	pop	{r7}
 800c138:	4770      	bx	lr
 800c13a:	bf00      	nop
 800c13c:	20000554 	.word	0x20000554
 800c140:	20000568 	.word	0x20000568

0800c144 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800c144:	b480      	push	{r7}
 800c146:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800c148:	bf00      	nop
}
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bc80      	pop	{r7}
 800c14e:	4770      	bx	lr

0800c150 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800c150:	b480      	push	{r7}
 800c152:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800c154:	bf00      	nop
}
 800c156:	46bd      	mov	sp, r7
 800c158:	bc80      	pop	{r7}
 800c15a:	4770      	bx	lr

0800c15c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800c15c:	b480      	push	{r7}
 800c15e:	b085      	sub	sp, #20
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800c164:	2300      	movs	r3, #0
 800c166:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	0c1b      	lsrs	r3, r3, #16
 800c170:	041b      	lsls	r3, r3, #16
 800c172:	2b00      	cmp	r3, #0
 800c174:	d104      	bne.n	800c180 <SEQ_BitPosition+0x24>
 800c176:	2310      	movs	r3, #16
 800c178:	73fb      	strb	r3, [r7, #15]
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	041b      	lsls	r3, r3, #16
 800c17e:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c186:	2b00      	cmp	r3, #0
 800c188:	d105      	bne.n	800c196 <SEQ_BitPosition+0x3a>
 800c18a:	7bfb      	ldrb	r3, [r7, #15]
 800c18c:	3308      	adds	r3, #8
 800c18e:	73fb      	strb	r3, [r7, #15]
 800c190:	68bb      	ldr	r3, [r7, #8]
 800c192:	021b      	lsls	r3, r3, #8
 800c194:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d105      	bne.n	800c1ac <SEQ_BitPosition+0x50>
 800c1a0:	7bfb      	ldrb	r3, [r7, #15]
 800c1a2:	3304      	adds	r3, #4
 800c1a4:	73fb      	strb	r3, [r7, #15]
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	011b      	lsls	r3, r3, #4
 800c1aa:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	0f1b      	lsrs	r3, r3, #28
 800c1b0:	4a06      	ldr	r2, [pc, #24]	; (800c1cc <SEQ_BitPosition+0x70>)
 800c1b2:	5cd2      	ldrb	r2, [r2, r3]
 800c1b4:	7bfb      	ldrb	r3, [r7, #15]
 800c1b6:	4413      	add	r3, r2
 800c1b8:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800c1ba:	7bfb      	ldrb	r3, [r7, #15]
 800c1bc:	f1c3 031f 	rsb	r3, r3, #31
 800c1c0:	b2db      	uxtb	r3, r3
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	3714      	adds	r7, #20
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bc80      	pop	{r7}
 800c1ca:	4770      	bx	lr
 800c1cc:	0800e23c 	.word	0x0800e23c

0800c1d0 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 800c1d4:	4b04      	ldr	r3, [pc, #16]	; (800c1e8 <UTIL_TIMER_Init+0x18>)
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 800c1da:	4b04      	ldr	r3, [pc, #16]	; (800c1ec <UTIL_TIMER_Init+0x1c>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	4798      	blx	r3
 800c1e0:	4603      	mov	r3, r0
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	bd80      	pop	{r7, pc}
 800c1e6:	bf00      	nop
 800c1e8:	20000570 	.word	0x20000570
 800c1ec:	0800e08c 	.word	0x0800e08c

0800c1f0 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b084      	sub	sp, #16
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	60f8      	str	r0, [r7, #12]
 800c1f8:	60b9      	str	r1, [r7, #8]
 800c1fa:	603b      	str	r3, [r7, #0]
 800c1fc:	4613      	mov	r3, r2
 800c1fe:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d023      	beq.n	800c24e <UTIL_TIMER_Create+0x5e>
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d020      	beq.n	800c24e <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	2200      	movs	r2, #0
 800c210:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800c212:	4b11      	ldr	r3, [pc, #68]	; (800c258 <UTIL_TIMER_Create+0x68>)
 800c214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c216:	68b8      	ldr	r0, [r7, #8]
 800c218:	4798      	blx	r3
 800c21a:	4602      	mov	r2, r0
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	2200      	movs	r2, #0
 800c224:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	2200      	movs	r2, #0
 800c22a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	2200      	movs	r2, #0
 800c230:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	683a      	ldr	r2, [r7, #0]
 800c236:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	69ba      	ldr	r2, [r7, #24]
 800c23c:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	79fa      	ldrb	r2, [r7, #7]
 800c242:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	2200      	movs	r2, #0
 800c248:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800c24a:	2300      	movs	r3, #0
 800c24c:	e000      	b.n	800c250 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800c24e:	2301      	movs	r3, #1
  }
}
 800c250:	4618      	mov	r0, r3
 800c252:	3710      	adds	r7, #16
 800c254:	46bd      	mov	sp, r7
 800c256:	bd80      	pop	{r7, pc}
 800c258:	0800e08c 	.word	0x0800e08c

0800c25c <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b08a      	sub	sp, #40	; 0x28
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800c264:	2300      	movs	r3, #0
 800c266:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d056      	beq.n	800c31e <UTIL_TIMER_Start+0xc2>
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f000 f9a9 	bl	800c5c8 <TimerExists>
 800c276:	4603      	mov	r3, r0
 800c278:	f083 0301 	eor.w	r3, r3, #1
 800c27c:	b2db      	uxtb	r3, r3
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d04d      	beq.n	800c31e <UTIL_TIMER_Start+0xc2>
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	7a5b      	ldrb	r3, [r3, #9]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d149      	bne.n	800c31e <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c28a:	f3ef 8310 	mrs	r3, PRIMASK
 800c28e:	613b      	str	r3, [r7, #16]
  return(result);
 800c290:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800c292:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c294:	b672      	cpsid	i
}
 800c296:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	685b      	ldr	r3, [r3, #4]
 800c29c:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800c29e:	4b24      	ldr	r3, [pc, #144]	; (800c330 <UTIL_TIMER_Start+0xd4>)
 800c2a0:	6a1b      	ldr	r3, [r3, #32]
 800c2a2:	4798      	blx	r3
 800c2a4:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800c2a6:	6a3a      	ldr	r2, [r7, #32]
 800c2a8:	69bb      	ldr	r3, [r7, #24]
 800c2aa:	429a      	cmp	r2, r3
 800c2ac:	d201      	bcs.n	800c2b2 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800c2ae:	69bb      	ldr	r3, [r7, #24]
 800c2b0:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6a3a      	ldr	r2, [r7, #32]
 800c2b6:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2201      	movs	r2, #1
 800c2c2:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800c2ca:	4b1a      	ldr	r3, [pc, #104]	; (800c334 <UTIL_TIMER_Start+0xd8>)
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d106      	bne.n	800c2e0 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800c2d2:	4b17      	ldr	r3, [pc, #92]	; (800c330 <UTIL_TIMER_Start+0xd4>)
 800c2d4:	691b      	ldr	r3, [r3, #16]
 800c2d6:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f000 f9eb 	bl	800c6b4 <TimerInsertNewHeadTimer>
 800c2de:	e017      	b.n	800c310 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800c2e0:	4b13      	ldr	r3, [pc, #76]	; (800c330 <UTIL_TIMER_Start+0xd4>)
 800c2e2:	699b      	ldr	r3, [r3, #24]
 800c2e4:	4798      	blx	r3
 800c2e6:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681a      	ldr	r2, [r3, #0]
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	441a      	add	r2, r3
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681a      	ldr	r2, [r3, #0]
 800c2f8:	4b0e      	ldr	r3, [pc, #56]	; (800c334 <UTIL_TIMER_Start+0xd8>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	429a      	cmp	r2, r3
 800c300:	d203      	bcs.n	800c30a <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	f000 f9d6 	bl	800c6b4 <TimerInsertNewHeadTimer>
 800c308:	e002      	b.n	800c310 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f000 f9a2 	bl	800c654 <TimerInsertTimer>
 800c310:	69fb      	ldr	r3, [r7, #28]
 800c312:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	f383 8810 	msr	PRIMASK, r3
}
 800c31a:	bf00      	nop
  {
 800c31c:	e002      	b.n	800c324 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800c31e:	2301      	movs	r3, #1
 800c320:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800c324:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c328:	4618      	mov	r0, r3
 800c32a:	3728      	adds	r7, #40	; 0x28
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd80      	pop	{r7, pc}
 800c330:	0800e08c 	.word	0x0800e08c
 800c334:	20000570 	.word	0x20000570

0800c338 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b088      	sub	sp, #32
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800c340:	2300      	movs	r3, #0
 800c342:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d05b      	beq.n	800c402 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c34a:	f3ef 8310 	mrs	r3, PRIMASK
 800c34e:	60fb      	str	r3, [r7, #12]
  return(result);
 800c350:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800c352:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c354:	b672      	cpsid	i
}
 800c356:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800c358:	4b2d      	ldr	r3, [pc, #180]	; (800c410 <UTIL_TIMER_Stop+0xd8>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800c35e:	4b2c      	ldr	r3, [pc, #176]	; (800c410 <UTIL_TIMER_Stop+0xd8>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2201      	movs	r2, #1
 800c368:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800c36a:	4b29      	ldr	r3, [pc, #164]	; (800c410 <UTIL_TIMER_Stop+0xd8>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d041      	beq.n	800c3f6 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2200      	movs	r2, #0
 800c376:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800c378:	4b25      	ldr	r3, [pc, #148]	; (800c410 <UTIL_TIMER_Stop+0xd8>)
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	687a      	ldr	r2, [r7, #4]
 800c37e:	429a      	cmp	r2, r3
 800c380:	d134      	bne.n	800c3ec <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800c382:	4b23      	ldr	r3, [pc, #140]	; (800c410 <UTIL_TIMER_Stop+0xd8>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	2200      	movs	r2, #0
 800c388:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800c38a:	4b21      	ldr	r3, [pc, #132]	; (800c410 <UTIL_TIMER_Stop+0xd8>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	695b      	ldr	r3, [r3, #20]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d00a      	beq.n	800c3aa <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800c394:	4b1e      	ldr	r3, [pc, #120]	; (800c410 <UTIL_TIMER_Stop+0xd8>)
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	695b      	ldr	r3, [r3, #20]
 800c39a:	4a1d      	ldr	r2, [pc, #116]	; (800c410 <UTIL_TIMER_Stop+0xd8>)
 800c39c:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800c39e:	4b1c      	ldr	r3, [pc, #112]	; (800c410 <UTIL_TIMER_Stop+0xd8>)
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f000 f92c 	bl	800c600 <TimerSetTimeout>
 800c3a8:	e023      	b.n	800c3f2 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800c3aa:	4b1a      	ldr	r3, [pc, #104]	; (800c414 <UTIL_TIMER_Stop+0xdc>)
 800c3ac:	68db      	ldr	r3, [r3, #12]
 800c3ae:	4798      	blx	r3
            TimerListHead = NULL;
 800c3b0:	4b17      	ldr	r3, [pc, #92]	; (800c410 <UTIL_TIMER_Stop+0xd8>)
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	601a      	str	r2, [r3, #0]
 800c3b6:	e01c      	b.n	800c3f2 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800c3b8:	697a      	ldr	r2, [r7, #20]
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	429a      	cmp	r2, r3
 800c3be:	d110      	bne.n	800c3e2 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800c3c0:	697b      	ldr	r3, [r7, #20]
 800c3c2:	695b      	ldr	r3, [r3, #20]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d006      	beq.n	800c3d6 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800c3c8:	697b      	ldr	r3, [r7, #20]
 800c3ca:	695b      	ldr	r3, [r3, #20]
 800c3cc:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800c3ce:	69bb      	ldr	r3, [r7, #24]
 800c3d0:	697a      	ldr	r2, [r7, #20]
 800c3d2:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800c3d4:	e00d      	b.n	800c3f2 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800c3da:	69bb      	ldr	r3, [r7, #24]
 800c3dc:	697a      	ldr	r2, [r7, #20]
 800c3de:	615a      	str	r2, [r3, #20]
            break;
 800c3e0:	e007      	b.n	800c3f2 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800c3e2:	697b      	ldr	r3, [r7, #20]
 800c3e4:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800c3e6:	697b      	ldr	r3, [r7, #20]
 800c3e8:	695b      	ldr	r3, [r3, #20]
 800c3ea:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800c3ec:	697b      	ldr	r3, [r7, #20]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d1e2      	bne.n	800c3b8 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	77fb      	strb	r3, [r7, #31]
 800c3f6:	693b      	ldr	r3, [r7, #16]
 800c3f8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c3fa:	68bb      	ldr	r3, [r7, #8]
 800c3fc:	f383 8810 	msr	PRIMASK, r3
}
 800c400:	e001      	b.n	800c406 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800c402:	2301      	movs	r3, #1
 800c404:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800c406:	7ffb      	ldrb	r3, [r7, #31]
}
 800c408:	4618      	mov	r0, r3
 800c40a:	3720      	adds	r7, #32
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}
 800c410:	20000570 	.word	0x20000570
 800c414:	0800e08c 	.word	0x0800e08c

0800c418 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b084      	sub	sp, #16
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
 800c420:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800c422:	2300      	movs	r3, #0
 800c424:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d102      	bne.n	800c432 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800c42c:	2301      	movs	r3, #1
 800c42e:	73fb      	strb	r3, [r7, #15]
 800c430:	e014      	b.n	800c45c <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800c432:	4b0d      	ldr	r3, [pc, #52]	; (800c468 <UTIL_TIMER_SetPeriod+0x50>)
 800c434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c436:	6838      	ldr	r0, [r7, #0]
 800c438:	4798      	blx	r3
 800c43a:	4602      	mov	r2, r0
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	f000 f8c1 	bl	800c5c8 <TimerExists>
 800c446:	4603      	mov	r3, r0
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d007      	beq.n	800c45c <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800c44c:	6878      	ldr	r0, [r7, #4]
 800c44e:	f7ff ff73 	bl	800c338 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800c452:	6878      	ldr	r0, [r7, #4]
 800c454:	f7ff ff02 	bl	800c25c <UTIL_TIMER_Start>
 800c458:	4603      	mov	r3, r0
 800c45a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800c45c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c45e:	4618      	mov	r0, r3
 800c460:	3710      	adds	r7, #16
 800c462:	46bd      	mov	sp, r7
 800c464:	bd80      	pop	{r7, pc}
 800c466:	bf00      	nop
 800c468:	0800e08c 	.word	0x0800e08c

0800c46c <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 800c46c:	b590      	push	{r4, r7, lr}
 800c46e:	b089      	sub	sp, #36	; 0x24
 800c470:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c472:	f3ef 8310 	mrs	r3, PRIMASK
 800c476:	60bb      	str	r3, [r7, #8]
  return(result);
 800c478:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800c47a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800c47c:	b672      	cpsid	i
}
 800c47e:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 800c480:	4b38      	ldr	r3, [pc, #224]	; (800c564 <UTIL_TIMER_IRQ_Handler+0xf8>)
 800c482:	695b      	ldr	r3, [r3, #20]
 800c484:	4798      	blx	r3
 800c486:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800c488:	4b36      	ldr	r3, [pc, #216]	; (800c564 <UTIL_TIMER_IRQ_Handler+0xf8>)
 800c48a:	691b      	ldr	r3, [r3, #16]
 800c48c:	4798      	blx	r3
 800c48e:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 800c490:	693a      	ldr	r2, [r7, #16]
 800c492:	697b      	ldr	r3, [r7, #20]
 800c494:	1ad3      	subs	r3, r2, r3
 800c496:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 800c498:	4b33      	ldr	r3, [pc, #204]	; (800c568 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d037      	beq.n	800c510 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 800c4a0:	4b31      	ldr	r3, [pc, #196]	; (800c568 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 800c4a6:	69fb      	ldr	r3, [r7, #28]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	68fa      	ldr	r2, [r7, #12]
 800c4ac:	429a      	cmp	r2, r3
 800c4ae:	d206      	bcs.n	800c4be <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 800c4b0:	69fb      	ldr	r3, [r7, #28]
 800c4b2:	681a      	ldr	r2, [r3, #0]
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	1ad2      	subs	r2, r2, r3
 800c4b8:	69fb      	ldr	r3, [r7, #28]
 800c4ba:	601a      	str	r2, [r3, #0]
 800c4bc:	e002      	b.n	800c4c4 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 800c4be:	69fb      	ldr	r3, [r7, #28]
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 800c4c4:	69fb      	ldr	r3, [r7, #28]
 800c4c6:	695b      	ldr	r3, [r3, #20]
 800c4c8:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 800c4ca:	69fb      	ldr	r3, [r7, #28]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d1ea      	bne.n	800c4a6 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800c4d0:	e01e      	b.n	800c510 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 800c4d2:	4b25      	ldr	r3, [pc, #148]	; (800c568 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 800c4d8:	4b23      	ldr	r3, [pc, #140]	; (800c568 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	695b      	ldr	r3, [r3, #20]
 800c4de:	4a22      	ldr	r2, [pc, #136]	; (800c568 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800c4e0:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 800c4e2:	69fb      	ldr	r3, [r7, #28]
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 800c4e8:	69fb      	ldr	r3, [r7, #28]
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 800c4ee:	69fb      	ldr	r3, [r7, #28]
 800c4f0:	68db      	ldr	r3, [r3, #12]
 800c4f2:	69fa      	ldr	r2, [r7, #28]
 800c4f4:	6912      	ldr	r2, [r2, #16]
 800c4f6:	4610      	mov	r0, r2
 800c4f8:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 800c4fa:	69fb      	ldr	r3, [r7, #28]
 800c4fc:	7adb      	ldrb	r3, [r3, #11]
 800c4fe:	2b01      	cmp	r3, #1
 800c500:	d106      	bne.n	800c510 <UTIL_TIMER_IRQ_Handler+0xa4>
 800c502:	69fb      	ldr	r3, [r7, #28]
 800c504:	7a9b      	ldrb	r3, [r3, #10]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d102      	bne.n	800c510 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 800c50a:	69f8      	ldr	r0, [r7, #28]
 800c50c:	f7ff fea6 	bl	800c25c <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800c510:	4b15      	ldr	r3, [pc, #84]	; (800c568 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d00d      	beq.n	800c534 <UTIL_TIMER_IRQ_Handler+0xc8>
 800c518:	4b13      	ldr	r3, [pc, #76]	; (800c568 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d0d7      	beq.n	800c4d2 <UTIL_TIMER_IRQ_Handler+0x66>
 800c522:	4b11      	ldr	r3, [pc, #68]	; (800c568 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	681c      	ldr	r4, [r3, #0]
 800c528:	4b0e      	ldr	r3, [pc, #56]	; (800c564 <UTIL_TIMER_IRQ_Handler+0xf8>)
 800c52a:	699b      	ldr	r3, [r3, #24]
 800c52c:	4798      	blx	r3
 800c52e:	4603      	mov	r3, r0
 800c530:	429c      	cmp	r4, r3
 800c532:	d3ce      	bcc.n	800c4d2 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800c534:	4b0c      	ldr	r3, [pc, #48]	; (800c568 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d009      	beq.n	800c550 <UTIL_TIMER_IRQ_Handler+0xe4>
 800c53c:	4b0a      	ldr	r3, [pc, #40]	; (800c568 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	7a1b      	ldrb	r3, [r3, #8]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d104      	bne.n	800c550 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 800c546:	4b08      	ldr	r3, [pc, #32]	; (800c568 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	4618      	mov	r0, r3
 800c54c:	f000 f858 	bl	800c600 <TimerSetTimeout>
 800c550:	69bb      	ldr	r3, [r7, #24]
 800c552:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f383 8810 	msr	PRIMASK, r3
}
 800c55a:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 800c55c:	bf00      	nop
 800c55e:	3724      	adds	r7, #36	; 0x24
 800c560:	46bd      	mov	sp, r7
 800c562:	bd90      	pop	{r4, r7, pc}
 800c564:	0800e08c 	.word	0x0800e08c
 800c568:	20000570 	.word	0x20000570

0800c56c <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b082      	sub	sp, #8
 800c570:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800c572:	4b06      	ldr	r3, [pc, #24]	; (800c58c <UTIL_TIMER_GetCurrentTime+0x20>)
 800c574:	69db      	ldr	r3, [r3, #28]
 800c576:	4798      	blx	r3
 800c578:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800c57a:	4b04      	ldr	r3, [pc, #16]	; (800c58c <UTIL_TIMER_GetCurrentTime+0x20>)
 800c57c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	4798      	blx	r3
 800c582:	4603      	mov	r3, r0
}
 800c584:	4618      	mov	r0, r3
 800c586:	3708      	adds	r7, #8
 800c588:	46bd      	mov	sp, r7
 800c58a:	bd80      	pop	{r7, pc}
 800c58c:	0800e08c 	.word	0x0800e08c

0800c590 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b084      	sub	sp, #16
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800c598:	4b0a      	ldr	r3, [pc, #40]	; (800c5c4 <UTIL_TIMER_GetElapsedTime+0x34>)
 800c59a:	69db      	ldr	r3, [r3, #28]
 800c59c:	4798      	blx	r3
 800c59e:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800c5a0:	4b08      	ldr	r3, [pc, #32]	; (800c5c4 <UTIL_TIMER_GetElapsedTime+0x34>)
 800c5a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5a4:	6878      	ldr	r0, [r7, #4]
 800c5a6:	4798      	blx	r3
 800c5a8:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800c5aa:	4b06      	ldr	r3, [pc, #24]	; (800c5c4 <UTIL_TIMER_GetElapsedTime+0x34>)
 800c5ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5ae:	68f9      	ldr	r1, [r7, #12]
 800c5b0:	68ba      	ldr	r2, [r7, #8]
 800c5b2:	1a8a      	subs	r2, r1, r2
 800c5b4:	4610      	mov	r0, r2
 800c5b6:	4798      	blx	r3
 800c5b8:	4603      	mov	r3, r0
}
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	3710      	adds	r7, #16
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}
 800c5c2:	bf00      	nop
 800c5c4:	0800e08c 	.word	0x0800e08c

0800c5c8 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b085      	sub	sp, #20
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800c5d0:	4b0a      	ldr	r3, [pc, #40]	; (800c5fc <TimerExists+0x34>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800c5d6:	e008      	b.n	800c5ea <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800c5d8:	68fa      	ldr	r2, [r7, #12]
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	429a      	cmp	r2, r3
 800c5de:	d101      	bne.n	800c5e4 <TimerExists+0x1c>
    {
      return true;
 800c5e0:	2301      	movs	r3, #1
 800c5e2:	e006      	b.n	800c5f2 <TimerExists+0x2a>
    }
    cur = cur->Next;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	695b      	ldr	r3, [r3, #20]
 800c5e8:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d1f3      	bne.n	800c5d8 <TimerExists+0x10>
  }
  return false;
 800c5f0:	2300      	movs	r3, #0
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3714      	adds	r7, #20
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bc80      	pop	{r7}
 800c5fa:	4770      	bx	lr
 800c5fc:	20000570 	.word	0x20000570

0800c600 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800c600:	b590      	push	{r4, r7, lr}
 800c602:	b085      	sub	sp, #20
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800c608:	4b11      	ldr	r3, [pc, #68]	; (800c650 <TimerSetTimeout+0x50>)
 800c60a:	6a1b      	ldr	r3, [r3, #32]
 800c60c:	4798      	blx	r3
 800c60e:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2201      	movs	r2, #1
 800c614:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681c      	ldr	r4, [r3, #0]
 800c61a:	4b0d      	ldr	r3, [pc, #52]	; (800c650 <TimerSetTimeout+0x50>)
 800c61c:	699b      	ldr	r3, [r3, #24]
 800c61e:	4798      	blx	r3
 800c620:	4602      	mov	r2, r0
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	4413      	add	r3, r2
 800c626:	429c      	cmp	r4, r3
 800c628:	d207      	bcs.n	800c63a <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800c62a:	4b09      	ldr	r3, [pc, #36]	; (800c650 <TimerSetTimeout+0x50>)
 800c62c:	699b      	ldr	r3, [r3, #24]
 800c62e:	4798      	blx	r3
 800c630:	4602      	mov	r2, r0
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	441a      	add	r2, r3
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800c63a:	4b05      	ldr	r3, [pc, #20]	; (800c650 <TimerSetTimeout+0x50>)
 800c63c:	689b      	ldr	r3, [r3, #8]
 800c63e:	687a      	ldr	r2, [r7, #4]
 800c640:	6812      	ldr	r2, [r2, #0]
 800c642:	4610      	mov	r0, r2
 800c644:	4798      	blx	r3
}
 800c646:	bf00      	nop
 800c648:	3714      	adds	r7, #20
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd90      	pop	{r4, r7, pc}
 800c64e:	bf00      	nop
 800c650:	0800e08c 	.word	0x0800e08c

0800c654 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800c654:	b480      	push	{r7}
 800c656:	b085      	sub	sp, #20
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800c65c:	4b14      	ldr	r3, [pc, #80]	; (800c6b0 <TimerInsertTimer+0x5c>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800c662:	4b13      	ldr	r3, [pc, #76]	; (800c6b0 <TimerInsertTimer+0x5c>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	695b      	ldr	r3, [r3, #20]
 800c668:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800c66a:	e012      	b.n	800c692 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681a      	ldr	r2, [r3, #0]
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	429a      	cmp	r2, r3
 800c676:	d905      	bls.n	800c684 <TimerInsertTimer+0x30>
    {
        cur = next;
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	695b      	ldr	r3, [r3, #20]
 800c680:	60bb      	str	r3, [r7, #8]
 800c682:	e006      	b.n	800c692 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	687a      	ldr	r2, [r7, #4]
 800c688:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	68ba      	ldr	r2, [r7, #8]
 800c68e:	615a      	str	r2, [r3, #20]
        return;
 800c690:	e009      	b.n	800c6a6 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	695b      	ldr	r3, [r3, #20]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d1e8      	bne.n	800c66c <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	687a      	ldr	r2, [r7, #4]
 800c69e:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	615a      	str	r2, [r3, #20]
}
 800c6a6:	3714      	adds	r7, #20
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	bc80      	pop	{r7}
 800c6ac:	4770      	bx	lr
 800c6ae:	bf00      	nop
 800c6b0:	20000570 	.word	0x20000570

0800c6b4 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b084      	sub	sp, #16
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800c6bc:	4b0b      	ldr	r3, [pc, #44]	; (800c6ec <TimerInsertNewHeadTimer+0x38>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d002      	beq.n	800c6ce <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	68fa      	ldr	r2, [r7, #12]
 800c6d2:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800c6d4:	4a05      	ldr	r2, [pc, #20]	; (800c6ec <TimerInsertNewHeadTimer+0x38>)
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800c6da:	4b04      	ldr	r3, [pc, #16]	; (800c6ec <TimerInsertNewHeadTimer+0x38>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f7ff ff8e 	bl	800c600 <TimerSetTimeout>
}
 800c6e4:	bf00      	nop
 800c6e6:	3710      	adds	r7, #16
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}
 800c6ec:	20000570 	.word	0x20000570

0800c6f0 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 800c6f4:	2218      	movs	r2, #24
 800c6f6:	2100      	movs	r1, #0
 800c6f8:	4807      	ldr	r0, [pc, #28]	; (800c718 <UTIL_ADV_TRACE_Init+0x28>)
 800c6fa:	f7ff f8e2 	bl	800b8c2 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 800c6fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c702:	2100      	movs	r1, #0
 800c704:	4805      	ldr	r0, [pc, #20]	; (800c71c <UTIL_ADV_TRACE_Init+0x2c>)
 800c706:	f7ff f8dc 	bl	800b8c2 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 800c70a:	4b05      	ldr	r3, [pc, #20]	; (800c720 <UTIL_ADV_TRACE_Init+0x30>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	4805      	ldr	r0, [pc, #20]	; (800c724 <UTIL_ADV_TRACE_Init+0x34>)
 800c710:	4798      	blx	r3
 800c712:	4603      	mov	r3, r0
}
 800c714:	4618      	mov	r0, r3
 800c716:	bd80      	pop	{r7, pc}
 800c718:	20000574 	.word	0x20000574
 800c71c:	2000058c 	.word	0x2000058c
 800c720:	0800e0cc 	.word	0x0800e0cc
 800c724:	0800c96d 	.word	0x0800c96d

0800c728 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 800c728:	b408      	push	{r3}
 800c72a:	b580      	push	{r7, lr}
 800c72c:	b08d      	sub	sp, #52	; 0x34
 800c72e:	af00      	add	r7, sp, #0
 800c730:	60f8      	str	r0, [r7, #12]
 800c732:	60b9      	str	r1, [r7, #8]
 800c734:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 800c736:	2300      	movs	r3, #0
 800c738:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 800c73a:	2300      	movs	r3, #0
 800c73c:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800c73e:	4b37      	ldr	r3, [pc, #220]	; (800c81c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800c740:	7a1b      	ldrb	r3, [r3, #8]
 800c742:	461a      	mov	r2, r3
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	4293      	cmp	r3, r2
 800c748:	d902      	bls.n	800c750 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 800c74a:	f06f 0304 	mvn.w	r3, #4
 800c74e:	e05e      	b.n	800c80e <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 800c750:	4b32      	ldr	r3, [pc, #200]	; (800c81c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800c752:	68da      	ldr	r2, [r3, #12]
 800c754:	68bb      	ldr	r3, [r7, #8]
 800c756:	4013      	ands	r3, r2
 800c758:	68ba      	ldr	r2, [r7, #8]
 800c75a:	429a      	cmp	r2, r3
 800c75c:	d002      	beq.n	800c764 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 800c75e:	f06f 0305 	mvn.w	r3, #5
 800c762:	e054      	b.n	800c80e <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 800c764:	4b2d      	ldr	r3, [pc, #180]	; (800c81c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800c766:	685b      	ldr	r3, [r3, #4]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d00a      	beq.n	800c782 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d007      	beq.n	800c782 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 800c772:	4b2a      	ldr	r3, [pc, #168]	; (800c81c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800c774:	685b      	ldr	r3, [r3, #4]
 800c776:	f107 0116 	add.w	r1, r7, #22
 800c77a:	f107 0218 	add.w	r2, r7, #24
 800c77e:	4610      	mov	r0, r2
 800c780:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 800c782:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c786:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800c788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c78a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c78c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c790:	4823      	ldr	r0, [pc, #140]	; (800c820 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 800c792:	f7ff fa37 	bl	800bc04 <tiny_vsnprintf_like>
 800c796:	4603      	mov	r3, r0
 800c798:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 800c79a:	f000 f9f1 	bl	800cb80 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 800c79e:	8afa      	ldrh	r2, [r7, #22]
 800c7a0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c7a2:	4413      	add	r3, r2
 800c7a4:	b29b      	uxth	r3, r3
 800c7a6:	f107 0214 	add.w	r2, r7, #20
 800c7aa:	4611      	mov	r1, r2
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f000 f969 	bl	800ca84 <TRACE_AllocateBufer>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7b8:	d025      	beq.n	800c806 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c7be:	e00e      	b.n	800c7de <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800c7c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c7c2:	8aba      	ldrh	r2, [r7, #20]
 800c7c4:	3330      	adds	r3, #48	; 0x30
 800c7c6:	443b      	add	r3, r7
 800c7c8:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 800c7cc:	4b15      	ldr	r3, [pc, #84]	; (800c824 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 800c7ce:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 800c7d0:	8abb      	ldrh	r3, [r7, #20]
 800c7d2:	3301      	adds	r3, #1
 800c7d4:	b29b      	uxth	r3, r3
 800c7d6:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 800c7d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c7da:	3301      	adds	r3, #1
 800c7dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c7de:	8afb      	ldrh	r3, [r7, #22]
 800c7e0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c7e2:	429a      	cmp	r2, r3
 800c7e4:	d3ec      	bcc.n	800c7c0 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800c7e6:	8abb      	ldrh	r3, [r7, #20]
 800c7e8:	461a      	mov	r2, r3
 800c7ea:	4b0e      	ldr	r3, [pc, #56]	; (800c824 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 800c7ec:	18d0      	adds	r0, r2, r3
 800c7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c7f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c7f6:	f7ff fa05 	bl	800bc04 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 800c7fa:	f000 f9df 	bl	800cbbc <TRACE_UnLock>

    return TRACE_Send();
 800c7fe:	f000 f831 	bl	800c864 <TRACE_Send>
 800c802:	4603      	mov	r3, r0
 800c804:	e003      	b.n	800c80e <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 800c806:	f000 f9d9 	bl	800cbbc <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 800c80a:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 800c80e:	4618      	mov	r0, r3
 800c810:	3734      	adds	r7, #52	; 0x34
 800c812:	46bd      	mov	sp, r7
 800c814:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c818:	b001      	add	sp, #4
 800c81a:	4770      	bx	lr
 800c81c:	20000574 	.word	0x20000574
 800c820:	2000078c 	.word	0x2000078c
 800c824:	2000058c 	.word	0x2000058c

0800c828 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 800c828:	b480      	push	{r7}
 800c82a:	b083      	sub	sp, #12
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 800c830:	4a03      	ldr	r2, [pc, #12]	; (800c840 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6053      	str	r3, [r2, #4]
}
 800c836:	bf00      	nop
 800c838:	370c      	adds	r7, #12
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bc80      	pop	{r7}
 800c83e:	4770      	bx	lr
 800c840:	20000574 	.word	0x20000574

0800c844 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 800c844:	b480      	push	{r7}
 800c846:	b083      	sub	sp, #12
 800c848:	af00      	add	r7, sp, #0
 800c84a:	4603      	mov	r3, r0
 800c84c:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 800c84e:	4a04      	ldr	r2, [pc, #16]	; (800c860 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 800c850:	79fb      	ldrb	r3, [r7, #7]
 800c852:	7213      	strb	r3, [r2, #8]
}
 800c854:	bf00      	nop
 800c856:	370c      	adds	r7, #12
 800c858:	46bd      	mov	sp, r7
 800c85a:	bc80      	pop	{r7}
 800c85c:	4770      	bx	lr
 800c85e:	bf00      	nop
 800c860:	20000574 	.word	0x20000574

0800c864 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b088      	sub	sp, #32
 800c868:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 800c86a:	2300      	movs	r3, #0
 800c86c:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 800c86e:	2300      	movs	r3, #0
 800c870:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c872:	f3ef 8310 	mrs	r3, PRIMASK
 800c876:	613b      	str	r3, [r7, #16]
  return(result);
 800c878:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800c87a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c87c:	b672      	cpsid	i
}
 800c87e:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 800c880:	f000 f9ba 	bl	800cbf8 <TRACE_IsLocked>
 800c884:	4603      	mov	r3, r0
 800c886:	2b00      	cmp	r3, #0
 800c888:	d15d      	bne.n	800c946 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 800c88a:	f000 f979 	bl	800cb80 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 800c88e:	4b34      	ldr	r3, [pc, #208]	; (800c960 <TRACE_Send+0xfc>)
 800c890:	8a1a      	ldrh	r2, [r3, #16]
 800c892:	4b33      	ldr	r3, [pc, #204]	; (800c960 <TRACE_Send+0xfc>)
 800c894:	8a5b      	ldrh	r3, [r3, #18]
 800c896:	429a      	cmp	r2, r3
 800c898:	d04d      	beq.n	800c936 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800c89a:	4b31      	ldr	r3, [pc, #196]	; (800c960 <TRACE_Send+0xfc>)
 800c89c:	789b      	ldrb	r3, [r3, #2]
 800c89e:	2b01      	cmp	r3, #1
 800c8a0:	d117      	bne.n	800c8d2 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800c8a2:	4b2f      	ldr	r3, [pc, #188]	; (800c960 <TRACE_Send+0xfc>)
 800c8a4:	881a      	ldrh	r2, [r3, #0]
 800c8a6:	4b2e      	ldr	r3, [pc, #184]	; (800c960 <TRACE_Send+0xfc>)
 800c8a8:	8a1b      	ldrh	r3, [r3, #16]
 800c8aa:	1ad3      	subs	r3, r2, r3
 800c8ac:	b29a      	uxth	r2, r3
 800c8ae:	4b2c      	ldr	r3, [pc, #176]	; (800c960 <TRACE_Send+0xfc>)
 800c8b0:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800c8b2:	4b2b      	ldr	r3, [pc, #172]	; (800c960 <TRACE_Send+0xfc>)
 800c8b4:	2202      	movs	r2, #2
 800c8b6:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 800c8b8:	4b29      	ldr	r3, [pc, #164]	; (800c960 <TRACE_Send+0xfc>)
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800c8be:	4b28      	ldr	r3, [pc, #160]	; (800c960 <TRACE_Send+0xfc>)
 800c8c0:	8a9b      	ldrh	r3, [r3, #20]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d105      	bne.n	800c8d2 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800c8c6:	4b26      	ldr	r3, [pc, #152]	; (800c960 <TRACE_Send+0xfc>)
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 800c8cc:	4b24      	ldr	r3, [pc, #144]	; (800c960 <TRACE_Send+0xfc>)
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800c8d2:	4b23      	ldr	r3, [pc, #140]	; (800c960 <TRACE_Send+0xfc>)
 800c8d4:	789b      	ldrb	r3, [r3, #2]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d115      	bne.n	800c906 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800c8da:	4b21      	ldr	r3, [pc, #132]	; (800c960 <TRACE_Send+0xfc>)
 800c8dc:	8a5a      	ldrh	r2, [r3, #18]
 800c8de:	4b20      	ldr	r3, [pc, #128]	; (800c960 <TRACE_Send+0xfc>)
 800c8e0:	8a1b      	ldrh	r3, [r3, #16]
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	d908      	bls.n	800c8f8 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800c8e6:	4b1e      	ldr	r3, [pc, #120]	; (800c960 <TRACE_Send+0xfc>)
 800c8e8:	8a5a      	ldrh	r2, [r3, #18]
 800c8ea:	4b1d      	ldr	r3, [pc, #116]	; (800c960 <TRACE_Send+0xfc>)
 800c8ec:	8a1b      	ldrh	r3, [r3, #16]
 800c8ee:	1ad3      	subs	r3, r2, r3
 800c8f0:	b29a      	uxth	r2, r3
 800c8f2:	4b1b      	ldr	r3, [pc, #108]	; (800c960 <TRACE_Send+0xfc>)
 800c8f4:	829a      	strh	r2, [r3, #20]
 800c8f6:	e006      	b.n	800c906 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800c8f8:	4b19      	ldr	r3, [pc, #100]	; (800c960 <TRACE_Send+0xfc>)
 800c8fa:	8a1b      	ldrh	r3, [r3, #16]
 800c8fc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c900:	b29a      	uxth	r2, r3
 800c902:	4b17      	ldr	r3, [pc, #92]	; (800c960 <TRACE_Send+0xfc>)
 800c904:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800c906:	4b16      	ldr	r3, [pc, #88]	; (800c960 <TRACE_Send+0xfc>)
 800c908:	8a1b      	ldrh	r3, [r3, #16]
 800c90a:	461a      	mov	r2, r3
 800c90c:	4b15      	ldr	r3, [pc, #84]	; (800c964 <TRACE_Send+0x100>)
 800c90e:	4413      	add	r3, r2
 800c910:	61bb      	str	r3, [r7, #24]
 800c912:	697b      	ldr	r3, [r7, #20]
 800c914:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	f383 8810 	msr	PRIMASK, r3
}
 800c91c:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 800c91e:	f7f4 fa09 	bl	8000d34 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800c922:	4b11      	ldr	r3, [pc, #68]	; (800c968 <TRACE_Send+0x104>)
 800c924:	68db      	ldr	r3, [r3, #12]
 800c926:	4a0e      	ldr	r2, [pc, #56]	; (800c960 <TRACE_Send+0xfc>)
 800c928:	8a92      	ldrh	r2, [r2, #20]
 800c92a:	4611      	mov	r1, r2
 800c92c:	69b8      	ldr	r0, [r7, #24]
 800c92e:	4798      	blx	r3
 800c930:	4603      	mov	r3, r0
 800c932:	77fb      	strb	r3, [r7, #31]
 800c934:	e00d      	b.n	800c952 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 800c936:	f000 f941 	bl	800cbbc <TRACE_UnLock>
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	f383 8810 	msr	PRIMASK, r3
}
 800c944:	e005      	b.n	800c952 <TRACE_Send+0xee>
 800c946:	697b      	ldr	r3, [r7, #20]
 800c948:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	f383 8810 	msr	PRIMASK, r3
}
 800c950:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 800c952:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c956:	4618      	mov	r0, r3
 800c958:	3720      	adds	r7, #32
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}
 800c95e:	bf00      	nop
 800c960:	20000574 	.word	0x20000574
 800c964:	2000058c 	.word	0x2000058c
 800c968:	0800e0cc 	.word	0x0800e0cc

0800c96c <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b088      	sub	sp, #32
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 800c974:	2300      	movs	r3, #0
 800c976:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c978:	f3ef 8310 	mrs	r3, PRIMASK
 800c97c:	617b      	str	r3, [r7, #20]
  return(result);
 800c97e:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800c980:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800c982:	b672      	cpsid	i
}
 800c984:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 800c986:	4b3c      	ldr	r3, [pc, #240]	; (800ca78 <TRACE_TxCpltCallback+0x10c>)
 800c988:	789b      	ldrb	r3, [r3, #2]
 800c98a:	2b02      	cmp	r3, #2
 800c98c:	d106      	bne.n	800c99c <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800c98e:	4b3a      	ldr	r3, [pc, #232]	; (800ca78 <TRACE_TxCpltCallback+0x10c>)
 800c990:	2200      	movs	r2, #0
 800c992:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 800c994:	4b38      	ldr	r3, [pc, #224]	; (800ca78 <TRACE_TxCpltCallback+0x10c>)
 800c996:	2200      	movs	r2, #0
 800c998:	821a      	strh	r2, [r3, #16]
 800c99a:	e00a      	b.n	800c9b2 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800c99c:	4b36      	ldr	r3, [pc, #216]	; (800ca78 <TRACE_TxCpltCallback+0x10c>)
 800c99e:	8a1a      	ldrh	r2, [r3, #16]
 800c9a0:	4b35      	ldr	r3, [pc, #212]	; (800ca78 <TRACE_TxCpltCallback+0x10c>)
 800c9a2:	8a9b      	ldrh	r3, [r3, #20]
 800c9a4:	4413      	add	r3, r2
 800c9a6:	b29b      	uxth	r3, r3
 800c9a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9ac:	b29a      	uxth	r2, r3
 800c9ae:	4b32      	ldr	r3, [pc, #200]	; (800ca78 <TRACE_TxCpltCallback+0x10c>)
 800c9b0:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800c9b2:	4b31      	ldr	r3, [pc, #196]	; (800ca78 <TRACE_TxCpltCallback+0x10c>)
 800c9b4:	8a1a      	ldrh	r2, [r3, #16]
 800c9b6:	4b30      	ldr	r3, [pc, #192]	; (800ca78 <TRACE_TxCpltCallback+0x10c>)
 800c9b8:	8a5b      	ldrh	r3, [r3, #18]
 800c9ba:	429a      	cmp	r2, r3
 800c9bc:	d04d      	beq.n	800ca5a <TRACE_TxCpltCallback+0xee>
 800c9be:	4b2e      	ldr	r3, [pc, #184]	; (800ca78 <TRACE_TxCpltCallback+0x10c>)
 800c9c0:	8adb      	ldrh	r3, [r3, #22]
 800c9c2:	2b01      	cmp	r3, #1
 800c9c4:	d149      	bne.n	800ca5a <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800c9c6:	4b2c      	ldr	r3, [pc, #176]	; (800ca78 <TRACE_TxCpltCallback+0x10c>)
 800c9c8:	789b      	ldrb	r3, [r3, #2]
 800c9ca:	2b01      	cmp	r3, #1
 800c9cc:	d117      	bne.n	800c9fe <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800c9ce:	4b2a      	ldr	r3, [pc, #168]	; (800ca78 <TRACE_TxCpltCallback+0x10c>)
 800c9d0:	881a      	ldrh	r2, [r3, #0]
 800c9d2:	4b29      	ldr	r3, [pc, #164]	; (800ca78 <TRACE_TxCpltCallback+0x10c>)
 800c9d4:	8a1b      	ldrh	r3, [r3, #16]
 800c9d6:	1ad3      	subs	r3, r2, r3
 800c9d8:	b29a      	uxth	r2, r3
 800c9da:	4b27      	ldr	r3, [pc, #156]	; (800ca78 <TRACE_TxCpltCallback+0x10c>)
 800c9dc:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800c9de:	4b26      	ldr	r3, [pc, #152]	; (800ca78 <TRACE_TxCpltCallback+0x10c>)
 800c9e0:	2202      	movs	r2, #2
 800c9e2:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800c9e4:	4b24      	ldr	r3, [pc, #144]	; (800ca78 <TRACE_TxCpltCallback+0x10c>)
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800c9ea:	4b23      	ldr	r3, [pc, #140]	; (800ca78 <TRACE_TxCpltCallback+0x10c>)
 800c9ec:	8a9b      	ldrh	r3, [r3, #20]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d105      	bne.n	800c9fe <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800c9f2:	4b21      	ldr	r3, [pc, #132]	; (800ca78 <TRACE_TxCpltCallback+0x10c>)
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 800c9f8:	4b1f      	ldr	r3, [pc, #124]	; (800ca78 <TRACE_TxCpltCallback+0x10c>)
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800c9fe:	4b1e      	ldr	r3, [pc, #120]	; (800ca78 <TRACE_TxCpltCallback+0x10c>)
 800ca00:	789b      	ldrb	r3, [r3, #2]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d115      	bne.n	800ca32 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800ca06:	4b1c      	ldr	r3, [pc, #112]	; (800ca78 <TRACE_TxCpltCallback+0x10c>)
 800ca08:	8a5a      	ldrh	r2, [r3, #18]
 800ca0a:	4b1b      	ldr	r3, [pc, #108]	; (800ca78 <TRACE_TxCpltCallback+0x10c>)
 800ca0c:	8a1b      	ldrh	r3, [r3, #16]
 800ca0e:	429a      	cmp	r2, r3
 800ca10:	d908      	bls.n	800ca24 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800ca12:	4b19      	ldr	r3, [pc, #100]	; (800ca78 <TRACE_TxCpltCallback+0x10c>)
 800ca14:	8a5a      	ldrh	r2, [r3, #18]
 800ca16:	4b18      	ldr	r3, [pc, #96]	; (800ca78 <TRACE_TxCpltCallback+0x10c>)
 800ca18:	8a1b      	ldrh	r3, [r3, #16]
 800ca1a:	1ad3      	subs	r3, r2, r3
 800ca1c:	b29a      	uxth	r2, r3
 800ca1e:	4b16      	ldr	r3, [pc, #88]	; (800ca78 <TRACE_TxCpltCallback+0x10c>)
 800ca20:	829a      	strh	r2, [r3, #20]
 800ca22:	e006      	b.n	800ca32 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800ca24:	4b14      	ldr	r3, [pc, #80]	; (800ca78 <TRACE_TxCpltCallback+0x10c>)
 800ca26:	8a1b      	ldrh	r3, [r3, #16]
 800ca28:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ca2c:	b29a      	uxth	r2, r3
 800ca2e:	4b12      	ldr	r3, [pc, #72]	; (800ca78 <TRACE_TxCpltCallback+0x10c>)
 800ca30:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800ca32:	4b11      	ldr	r3, [pc, #68]	; (800ca78 <TRACE_TxCpltCallback+0x10c>)
 800ca34:	8a1b      	ldrh	r3, [r3, #16]
 800ca36:	461a      	mov	r2, r3
 800ca38:	4b10      	ldr	r3, [pc, #64]	; (800ca7c <TRACE_TxCpltCallback+0x110>)
 800ca3a:	4413      	add	r3, r2
 800ca3c:	61fb      	str	r3, [r7, #28]
 800ca3e:	69bb      	ldr	r3, [r7, #24]
 800ca40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	f383 8810 	msr	PRIMASK, r3
}
 800ca48:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800ca4a:	4b0d      	ldr	r3, [pc, #52]	; (800ca80 <TRACE_TxCpltCallback+0x114>)
 800ca4c:	68db      	ldr	r3, [r3, #12]
 800ca4e:	4a0a      	ldr	r2, [pc, #40]	; (800ca78 <TRACE_TxCpltCallback+0x10c>)
 800ca50:	8a92      	ldrh	r2, [r2, #20]
 800ca52:	4611      	mov	r1, r2
 800ca54:	69f8      	ldr	r0, [r7, #28]
 800ca56:	4798      	blx	r3
 800ca58:	e00a      	b.n	800ca70 <TRACE_TxCpltCallback+0x104>
 800ca5a:	69bb      	ldr	r3, [r7, #24]
 800ca5c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	f383 8810 	msr	PRIMASK, r3
}
 800ca64:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 800ca66:	f7f4 f96d 	bl	8000d44 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 800ca6a:	f000 f8a7 	bl	800cbbc <TRACE_UnLock>
  }
}
 800ca6e:	bf00      	nop
 800ca70:	bf00      	nop
 800ca72:	3720      	adds	r7, #32
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}
 800ca78:	20000574 	.word	0x20000574
 800ca7c:	2000058c 	.word	0x2000058c
 800ca80:	0800e0cc 	.word	0x0800e0cc

0800ca84 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 800ca84:	b480      	push	{r7}
 800ca86:	b087      	sub	sp, #28
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	6039      	str	r1, [r7, #0]
 800ca8e:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 800ca90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ca94:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca96:	f3ef 8310 	mrs	r3, PRIMASK
 800ca9a:	60fb      	str	r3, [r7, #12]
  return(result);
 800ca9c:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800ca9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800caa0:	b672      	cpsid	i
}
 800caa2:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 800caa4:	4b35      	ldr	r3, [pc, #212]	; (800cb7c <TRACE_AllocateBufer+0xf8>)
 800caa6:	8a5a      	ldrh	r2, [r3, #18]
 800caa8:	4b34      	ldr	r3, [pc, #208]	; (800cb7c <TRACE_AllocateBufer+0xf8>)
 800caaa:	8a1b      	ldrh	r3, [r3, #16]
 800caac:	429a      	cmp	r2, r3
 800caae:	d11b      	bne.n	800cae8 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800cab0:	4b32      	ldr	r3, [pc, #200]	; (800cb7c <TRACE_AllocateBufer+0xf8>)
 800cab2:	8a5b      	ldrh	r3, [r3, #18]
 800cab4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800cab8:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 800caba:	88fa      	ldrh	r2, [r7, #6]
 800cabc:	8afb      	ldrh	r3, [r7, #22]
 800cabe:	429a      	cmp	r2, r3
 800cac0:	d33a      	bcc.n	800cb38 <TRACE_AllocateBufer+0xb4>
 800cac2:	4b2e      	ldr	r3, [pc, #184]	; (800cb7c <TRACE_AllocateBufer+0xf8>)
 800cac4:	8a1b      	ldrh	r3, [r3, #16]
 800cac6:	88fa      	ldrh	r2, [r7, #6]
 800cac8:	429a      	cmp	r2, r3
 800caca:	d235      	bcs.n	800cb38 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800cacc:	4b2b      	ldr	r3, [pc, #172]	; (800cb7c <TRACE_AllocateBufer+0xf8>)
 800cace:	2201      	movs	r2, #1
 800cad0:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800cad2:	4b2a      	ldr	r3, [pc, #168]	; (800cb7c <TRACE_AllocateBufer+0xf8>)
 800cad4:	8a5a      	ldrh	r2, [r3, #18]
 800cad6:	4b29      	ldr	r3, [pc, #164]	; (800cb7c <TRACE_AllocateBufer+0xf8>)
 800cad8:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800cada:	4b28      	ldr	r3, [pc, #160]	; (800cb7c <TRACE_AllocateBufer+0xf8>)
 800cadc:	8a1b      	ldrh	r3, [r3, #16]
 800cade:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 800cae0:	4b26      	ldr	r3, [pc, #152]	; (800cb7c <TRACE_AllocateBufer+0xf8>)
 800cae2:	2200      	movs	r2, #0
 800cae4:	825a      	strh	r2, [r3, #18]
 800cae6:	e027      	b.n	800cb38 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800cae8:	4b24      	ldr	r3, [pc, #144]	; (800cb7c <TRACE_AllocateBufer+0xf8>)
 800caea:	8a5a      	ldrh	r2, [r3, #18]
 800caec:	4b23      	ldr	r3, [pc, #140]	; (800cb7c <TRACE_AllocateBufer+0xf8>)
 800caee:	8a1b      	ldrh	r3, [r3, #16]
 800caf0:	429a      	cmp	r2, r3
 800caf2:	d91b      	bls.n	800cb2c <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800caf4:	4b21      	ldr	r3, [pc, #132]	; (800cb7c <TRACE_AllocateBufer+0xf8>)
 800caf6:	8a5b      	ldrh	r3, [r3, #18]
 800caf8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800cafc:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 800cafe:	88fa      	ldrh	r2, [r7, #6]
 800cb00:	8afb      	ldrh	r3, [r7, #22]
 800cb02:	429a      	cmp	r2, r3
 800cb04:	d318      	bcc.n	800cb38 <TRACE_AllocateBufer+0xb4>
 800cb06:	4b1d      	ldr	r3, [pc, #116]	; (800cb7c <TRACE_AllocateBufer+0xf8>)
 800cb08:	8a1b      	ldrh	r3, [r3, #16]
 800cb0a:	88fa      	ldrh	r2, [r7, #6]
 800cb0c:	429a      	cmp	r2, r3
 800cb0e:	d213      	bcs.n	800cb38 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800cb10:	4b1a      	ldr	r3, [pc, #104]	; (800cb7c <TRACE_AllocateBufer+0xf8>)
 800cb12:	2201      	movs	r2, #1
 800cb14:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800cb16:	4b19      	ldr	r3, [pc, #100]	; (800cb7c <TRACE_AllocateBufer+0xf8>)
 800cb18:	8a5a      	ldrh	r2, [r3, #18]
 800cb1a:	4b18      	ldr	r3, [pc, #96]	; (800cb7c <TRACE_AllocateBufer+0xf8>)
 800cb1c:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800cb1e:	4b17      	ldr	r3, [pc, #92]	; (800cb7c <TRACE_AllocateBufer+0xf8>)
 800cb20:	8a1b      	ldrh	r3, [r3, #16]
 800cb22:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800cb24:	4b15      	ldr	r3, [pc, #84]	; (800cb7c <TRACE_AllocateBufer+0xf8>)
 800cb26:	2200      	movs	r2, #0
 800cb28:	825a      	strh	r2, [r3, #18]
 800cb2a:	e005      	b.n	800cb38 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 800cb2c:	4b13      	ldr	r3, [pc, #76]	; (800cb7c <TRACE_AllocateBufer+0xf8>)
 800cb2e:	8a1a      	ldrh	r2, [r3, #16]
 800cb30:	4b12      	ldr	r3, [pc, #72]	; (800cb7c <TRACE_AllocateBufer+0xf8>)
 800cb32:	8a5b      	ldrh	r3, [r3, #18]
 800cb34:	1ad3      	subs	r3, r2, r3
 800cb36:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 800cb38:	8afa      	ldrh	r2, [r7, #22]
 800cb3a:	88fb      	ldrh	r3, [r7, #6]
 800cb3c:	429a      	cmp	r2, r3
 800cb3e:	d90f      	bls.n	800cb60 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 800cb40:	4b0e      	ldr	r3, [pc, #56]	; (800cb7c <TRACE_AllocateBufer+0xf8>)
 800cb42:	8a5a      	ldrh	r2, [r3, #18]
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800cb48:	4b0c      	ldr	r3, [pc, #48]	; (800cb7c <TRACE_AllocateBufer+0xf8>)
 800cb4a:	8a5a      	ldrh	r2, [r3, #18]
 800cb4c:	88fb      	ldrh	r3, [r7, #6]
 800cb4e:	4413      	add	r3, r2
 800cb50:	b29b      	uxth	r3, r3
 800cb52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb56:	b29a      	uxth	r2, r3
 800cb58:	4b08      	ldr	r3, [pc, #32]	; (800cb7c <TRACE_AllocateBufer+0xf8>)
 800cb5a:	825a      	strh	r2, [r3, #18]
    ret = 0;
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	82bb      	strh	r3, [r7, #20]
 800cb60:	693b      	ldr	r3, [r7, #16]
 800cb62:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb64:	68bb      	ldr	r3, [r7, #8]
 800cb66:	f383 8810 	msr	PRIMASK, r3
}
 800cb6a:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 800cb6c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 800cb70:	4618      	mov	r0, r3
 800cb72:	371c      	adds	r7, #28
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bc80      	pop	{r7}
 800cb78:	4770      	bx	lr
 800cb7a:	bf00      	nop
 800cb7c:	20000574 	.word	0x20000574

0800cb80 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 800cb80:	b480      	push	{r7}
 800cb82:	b085      	sub	sp, #20
 800cb84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb86:	f3ef 8310 	mrs	r3, PRIMASK
 800cb8a:	607b      	str	r3, [r7, #4]
  return(result);
 800cb8c:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800cb8e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800cb90:	b672      	cpsid	i
}
 800cb92:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 800cb94:	4b08      	ldr	r3, [pc, #32]	; (800cbb8 <TRACE_Lock+0x38>)
 800cb96:	8adb      	ldrh	r3, [r3, #22]
 800cb98:	3301      	adds	r3, #1
 800cb9a:	b29a      	uxth	r2, r3
 800cb9c:	4b06      	ldr	r3, [pc, #24]	; (800cbb8 <TRACE_Lock+0x38>)
 800cb9e:	82da      	strh	r2, [r3, #22]
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	f383 8810 	msr	PRIMASK, r3
}
 800cbaa:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800cbac:	bf00      	nop
 800cbae:	3714      	adds	r7, #20
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bc80      	pop	{r7}
 800cbb4:	4770      	bx	lr
 800cbb6:	bf00      	nop
 800cbb8:	20000574 	.word	0x20000574

0800cbbc <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 800cbbc:	b480      	push	{r7}
 800cbbe:	b085      	sub	sp, #20
 800cbc0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cbc2:	f3ef 8310 	mrs	r3, PRIMASK
 800cbc6:	607b      	str	r3, [r7, #4]
  return(result);
 800cbc8:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800cbca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800cbcc:	b672      	cpsid	i
}
 800cbce:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 800cbd0:	4b08      	ldr	r3, [pc, #32]	; (800cbf4 <TRACE_UnLock+0x38>)
 800cbd2:	8adb      	ldrh	r3, [r3, #22]
 800cbd4:	3b01      	subs	r3, #1
 800cbd6:	b29a      	uxth	r2, r3
 800cbd8:	4b06      	ldr	r3, [pc, #24]	; (800cbf4 <TRACE_UnLock+0x38>)
 800cbda:	82da      	strh	r2, [r3, #22]
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cbe0:	68bb      	ldr	r3, [r7, #8]
 800cbe2:	f383 8810 	msr	PRIMASK, r3
}
 800cbe6:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800cbe8:	bf00      	nop
 800cbea:	3714      	adds	r7, #20
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bc80      	pop	{r7}
 800cbf0:	4770      	bx	lr
 800cbf2:	bf00      	nop
 800cbf4:	20000574 	.word	0x20000574

0800cbf8 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 800cbf8:	b480      	push	{r7}
 800cbfa:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 800cbfc:	4b05      	ldr	r3, [pc, #20]	; (800cc14 <TRACE_IsLocked+0x1c>)
 800cbfe:	8adb      	ldrh	r3, [r3, #22]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	bf14      	ite	ne
 800cc04:	2301      	movne	r3, #1
 800cc06:	2300      	moveq	r3, #0
 800cc08:	b2db      	uxtb	r3, r3
}
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bc80      	pop	{r7}
 800cc10:	4770      	bx	lr
 800cc12:	bf00      	nop
 800cc14:	20000574 	.word	0x20000574

0800cc18 <__errno>:
 800cc18:	4b01      	ldr	r3, [pc, #4]	; (800cc20 <__errno+0x8>)
 800cc1a:	6818      	ldr	r0, [r3, #0]
 800cc1c:	4770      	bx	lr
 800cc1e:	bf00      	nop
 800cc20:	20000024 	.word	0x20000024

0800cc24 <__libc_init_array>:
 800cc24:	b570      	push	{r4, r5, r6, lr}
 800cc26:	4d0d      	ldr	r5, [pc, #52]	; (800cc5c <__libc_init_array+0x38>)
 800cc28:	4c0d      	ldr	r4, [pc, #52]	; (800cc60 <__libc_init_array+0x3c>)
 800cc2a:	1b64      	subs	r4, r4, r5
 800cc2c:	10a4      	asrs	r4, r4, #2
 800cc2e:	2600      	movs	r6, #0
 800cc30:	42a6      	cmp	r6, r4
 800cc32:	d109      	bne.n	800cc48 <__libc_init_array+0x24>
 800cc34:	4d0b      	ldr	r5, [pc, #44]	; (800cc64 <__libc_init_array+0x40>)
 800cc36:	4c0c      	ldr	r4, [pc, #48]	; (800cc68 <__libc_init_array+0x44>)
 800cc38:	f001 f88c 	bl	800dd54 <_init>
 800cc3c:	1b64      	subs	r4, r4, r5
 800cc3e:	10a4      	asrs	r4, r4, #2
 800cc40:	2600      	movs	r6, #0
 800cc42:	42a6      	cmp	r6, r4
 800cc44:	d105      	bne.n	800cc52 <__libc_init_array+0x2e>
 800cc46:	bd70      	pop	{r4, r5, r6, pc}
 800cc48:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc4c:	4798      	blx	r3
 800cc4e:	3601      	adds	r6, #1
 800cc50:	e7ee      	b.n	800cc30 <__libc_init_array+0xc>
 800cc52:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc56:	4798      	blx	r3
 800cc58:	3601      	adds	r6, #1
 800cc5a:	e7f2      	b.n	800cc42 <__libc_init_array+0x1e>
 800cc5c:	0800e39c 	.word	0x0800e39c
 800cc60:	0800e39c 	.word	0x0800e39c
 800cc64:	0800e39c 	.word	0x0800e39c
 800cc68:	0800e3a0 	.word	0x0800e3a0

0800cc6c <memcpy>:
 800cc6c:	440a      	add	r2, r1
 800cc6e:	4291      	cmp	r1, r2
 800cc70:	f100 33ff 	add.w	r3, r0, #4294967295
 800cc74:	d100      	bne.n	800cc78 <memcpy+0xc>
 800cc76:	4770      	bx	lr
 800cc78:	b510      	push	{r4, lr}
 800cc7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc82:	4291      	cmp	r1, r2
 800cc84:	d1f9      	bne.n	800cc7a <memcpy+0xe>
 800cc86:	bd10      	pop	{r4, pc}

0800cc88 <memset>:
 800cc88:	4402      	add	r2, r0
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	4293      	cmp	r3, r2
 800cc8e:	d100      	bne.n	800cc92 <memset+0xa>
 800cc90:	4770      	bx	lr
 800cc92:	f803 1b01 	strb.w	r1, [r3], #1
 800cc96:	e7f9      	b.n	800cc8c <memset+0x4>

0800cc98 <srand>:
 800cc98:	b538      	push	{r3, r4, r5, lr}
 800cc9a:	4b10      	ldr	r3, [pc, #64]	; (800ccdc <srand+0x44>)
 800cc9c:	681d      	ldr	r5, [r3, #0]
 800cc9e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800cca0:	4604      	mov	r4, r0
 800cca2:	b9b3      	cbnz	r3, 800ccd2 <srand+0x3a>
 800cca4:	2018      	movs	r0, #24
 800cca6:	f000 f893 	bl	800cdd0 <malloc>
 800ccaa:	4602      	mov	r2, r0
 800ccac:	63a8      	str	r0, [r5, #56]	; 0x38
 800ccae:	b920      	cbnz	r0, 800ccba <srand+0x22>
 800ccb0:	4b0b      	ldr	r3, [pc, #44]	; (800cce0 <srand+0x48>)
 800ccb2:	480c      	ldr	r0, [pc, #48]	; (800cce4 <srand+0x4c>)
 800ccb4:	2142      	movs	r1, #66	; 0x42
 800ccb6:	f000 f85b 	bl	800cd70 <__assert_func>
 800ccba:	490b      	ldr	r1, [pc, #44]	; (800cce8 <srand+0x50>)
 800ccbc:	4b0b      	ldr	r3, [pc, #44]	; (800ccec <srand+0x54>)
 800ccbe:	e9c0 1300 	strd	r1, r3, [r0]
 800ccc2:	4b0b      	ldr	r3, [pc, #44]	; (800ccf0 <srand+0x58>)
 800ccc4:	6083      	str	r3, [r0, #8]
 800ccc6:	230b      	movs	r3, #11
 800ccc8:	8183      	strh	r3, [r0, #12]
 800ccca:	2100      	movs	r1, #0
 800cccc:	2001      	movs	r0, #1
 800ccce:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800ccd2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	611c      	str	r4, [r3, #16]
 800ccd8:	615a      	str	r2, [r3, #20]
 800ccda:	bd38      	pop	{r3, r4, r5, pc}
 800ccdc:	20000024 	.word	0x20000024
 800cce0:	0800e250 	.word	0x0800e250
 800cce4:	0800e267 	.word	0x0800e267
 800cce8:	abcd330e 	.word	0xabcd330e
 800ccec:	e66d1234 	.word	0xe66d1234
 800ccf0:	0005deec 	.word	0x0005deec

0800ccf4 <rand>:
 800ccf4:	4b16      	ldr	r3, [pc, #88]	; (800cd50 <rand+0x5c>)
 800ccf6:	b510      	push	{r4, lr}
 800ccf8:	681c      	ldr	r4, [r3, #0]
 800ccfa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ccfc:	b9b3      	cbnz	r3, 800cd2c <rand+0x38>
 800ccfe:	2018      	movs	r0, #24
 800cd00:	f000 f866 	bl	800cdd0 <malloc>
 800cd04:	4602      	mov	r2, r0
 800cd06:	63a0      	str	r0, [r4, #56]	; 0x38
 800cd08:	b920      	cbnz	r0, 800cd14 <rand+0x20>
 800cd0a:	4b12      	ldr	r3, [pc, #72]	; (800cd54 <rand+0x60>)
 800cd0c:	4812      	ldr	r0, [pc, #72]	; (800cd58 <rand+0x64>)
 800cd0e:	214e      	movs	r1, #78	; 0x4e
 800cd10:	f000 f82e 	bl	800cd70 <__assert_func>
 800cd14:	4911      	ldr	r1, [pc, #68]	; (800cd5c <rand+0x68>)
 800cd16:	4b12      	ldr	r3, [pc, #72]	; (800cd60 <rand+0x6c>)
 800cd18:	e9c0 1300 	strd	r1, r3, [r0]
 800cd1c:	4b11      	ldr	r3, [pc, #68]	; (800cd64 <rand+0x70>)
 800cd1e:	6083      	str	r3, [r0, #8]
 800cd20:	230b      	movs	r3, #11
 800cd22:	8183      	strh	r3, [r0, #12]
 800cd24:	2100      	movs	r1, #0
 800cd26:	2001      	movs	r0, #1
 800cd28:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800cd2c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800cd2e:	4a0e      	ldr	r2, [pc, #56]	; (800cd68 <rand+0x74>)
 800cd30:	6920      	ldr	r0, [r4, #16]
 800cd32:	6963      	ldr	r3, [r4, #20]
 800cd34:	490d      	ldr	r1, [pc, #52]	; (800cd6c <rand+0x78>)
 800cd36:	4342      	muls	r2, r0
 800cd38:	fb01 2203 	mla	r2, r1, r3, r2
 800cd3c:	fba0 0101 	umull	r0, r1, r0, r1
 800cd40:	1c43      	adds	r3, r0, #1
 800cd42:	eb42 0001 	adc.w	r0, r2, r1
 800cd46:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800cd4a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800cd4e:	bd10      	pop	{r4, pc}
 800cd50:	20000024 	.word	0x20000024
 800cd54:	0800e250 	.word	0x0800e250
 800cd58:	0800e267 	.word	0x0800e267
 800cd5c:	abcd330e 	.word	0xabcd330e
 800cd60:	e66d1234 	.word	0xe66d1234
 800cd64:	0005deec 	.word	0x0005deec
 800cd68:	5851f42d 	.word	0x5851f42d
 800cd6c:	4c957f2d 	.word	0x4c957f2d

0800cd70 <__assert_func>:
 800cd70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cd72:	4614      	mov	r4, r2
 800cd74:	461a      	mov	r2, r3
 800cd76:	4b09      	ldr	r3, [pc, #36]	; (800cd9c <__assert_func+0x2c>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	4605      	mov	r5, r0
 800cd7c:	68d8      	ldr	r0, [r3, #12]
 800cd7e:	b14c      	cbz	r4, 800cd94 <__assert_func+0x24>
 800cd80:	4b07      	ldr	r3, [pc, #28]	; (800cda0 <__assert_func+0x30>)
 800cd82:	9100      	str	r1, [sp, #0]
 800cd84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cd88:	4906      	ldr	r1, [pc, #24]	; (800cda4 <__assert_func+0x34>)
 800cd8a:	462b      	mov	r3, r5
 800cd8c:	f000 f80e 	bl	800cdac <fiprintf>
 800cd90:	f000 fcc0 	bl	800d714 <abort>
 800cd94:	4b04      	ldr	r3, [pc, #16]	; (800cda8 <__assert_func+0x38>)
 800cd96:	461c      	mov	r4, r3
 800cd98:	e7f3      	b.n	800cd82 <__assert_func+0x12>
 800cd9a:	bf00      	nop
 800cd9c:	20000024 	.word	0x20000024
 800cda0:	0800e2c2 	.word	0x0800e2c2
 800cda4:	0800e2cf 	.word	0x0800e2cf
 800cda8:	0800e2fd 	.word	0x0800e2fd

0800cdac <fiprintf>:
 800cdac:	b40e      	push	{r1, r2, r3}
 800cdae:	b503      	push	{r0, r1, lr}
 800cdb0:	4601      	mov	r1, r0
 800cdb2:	ab03      	add	r3, sp, #12
 800cdb4:	4805      	ldr	r0, [pc, #20]	; (800cdcc <fiprintf+0x20>)
 800cdb6:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdba:	6800      	ldr	r0, [r0, #0]
 800cdbc:	9301      	str	r3, [sp, #4]
 800cdbe:	f000 f915 	bl	800cfec <_vfiprintf_r>
 800cdc2:	b002      	add	sp, #8
 800cdc4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cdc8:	b003      	add	sp, #12
 800cdca:	4770      	bx	lr
 800cdcc:	20000024 	.word	0x20000024

0800cdd0 <malloc>:
 800cdd0:	4b02      	ldr	r3, [pc, #8]	; (800cddc <malloc+0xc>)
 800cdd2:	4601      	mov	r1, r0
 800cdd4:	6818      	ldr	r0, [r3, #0]
 800cdd6:	f000 b86d 	b.w	800ceb4 <_malloc_r>
 800cdda:	bf00      	nop
 800cddc:	20000024 	.word	0x20000024

0800cde0 <_free_r>:
 800cde0:	b538      	push	{r3, r4, r5, lr}
 800cde2:	4605      	mov	r5, r0
 800cde4:	2900      	cmp	r1, #0
 800cde6:	d041      	beq.n	800ce6c <_free_r+0x8c>
 800cde8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cdec:	1f0c      	subs	r4, r1, #4
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	bfb8      	it	lt
 800cdf2:	18e4      	addlt	r4, r4, r3
 800cdf4:	f000 feb2 	bl	800db5c <__malloc_lock>
 800cdf8:	4a1d      	ldr	r2, [pc, #116]	; (800ce70 <_free_r+0x90>)
 800cdfa:	6813      	ldr	r3, [r2, #0]
 800cdfc:	b933      	cbnz	r3, 800ce0c <_free_r+0x2c>
 800cdfe:	6063      	str	r3, [r4, #4]
 800ce00:	6014      	str	r4, [r2, #0]
 800ce02:	4628      	mov	r0, r5
 800ce04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce08:	f000 beae 	b.w	800db68 <__malloc_unlock>
 800ce0c:	42a3      	cmp	r3, r4
 800ce0e:	d908      	bls.n	800ce22 <_free_r+0x42>
 800ce10:	6820      	ldr	r0, [r4, #0]
 800ce12:	1821      	adds	r1, r4, r0
 800ce14:	428b      	cmp	r3, r1
 800ce16:	bf01      	itttt	eq
 800ce18:	6819      	ldreq	r1, [r3, #0]
 800ce1a:	685b      	ldreq	r3, [r3, #4]
 800ce1c:	1809      	addeq	r1, r1, r0
 800ce1e:	6021      	streq	r1, [r4, #0]
 800ce20:	e7ed      	b.n	800cdfe <_free_r+0x1e>
 800ce22:	461a      	mov	r2, r3
 800ce24:	685b      	ldr	r3, [r3, #4]
 800ce26:	b10b      	cbz	r3, 800ce2c <_free_r+0x4c>
 800ce28:	42a3      	cmp	r3, r4
 800ce2a:	d9fa      	bls.n	800ce22 <_free_r+0x42>
 800ce2c:	6811      	ldr	r1, [r2, #0]
 800ce2e:	1850      	adds	r0, r2, r1
 800ce30:	42a0      	cmp	r0, r4
 800ce32:	d10b      	bne.n	800ce4c <_free_r+0x6c>
 800ce34:	6820      	ldr	r0, [r4, #0]
 800ce36:	4401      	add	r1, r0
 800ce38:	1850      	adds	r0, r2, r1
 800ce3a:	4283      	cmp	r3, r0
 800ce3c:	6011      	str	r1, [r2, #0]
 800ce3e:	d1e0      	bne.n	800ce02 <_free_r+0x22>
 800ce40:	6818      	ldr	r0, [r3, #0]
 800ce42:	685b      	ldr	r3, [r3, #4]
 800ce44:	6053      	str	r3, [r2, #4]
 800ce46:	4401      	add	r1, r0
 800ce48:	6011      	str	r1, [r2, #0]
 800ce4a:	e7da      	b.n	800ce02 <_free_r+0x22>
 800ce4c:	d902      	bls.n	800ce54 <_free_r+0x74>
 800ce4e:	230c      	movs	r3, #12
 800ce50:	602b      	str	r3, [r5, #0]
 800ce52:	e7d6      	b.n	800ce02 <_free_r+0x22>
 800ce54:	6820      	ldr	r0, [r4, #0]
 800ce56:	1821      	adds	r1, r4, r0
 800ce58:	428b      	cmp	r3, r1
 800ce5a:	bf04      	itt	eq
 800ce5c:	6819      	ldreq	r1, [r3, #0]
 800ce5e:	685b      	ldreq	r3, [r3, #4]
 800ce60:	6063      	str	r3, [r4, #4]
 800ce62:	bf04      	itt	eq
 800ce64:	1809      	addeq	r1, r1, r0
 800ce66:	6021      	streq	r1, [r4, #0]
 800ce68:	6054      	str	r4, [r2, #4]
 800ce6a:	e7ca      	b.n	800ce02 <_free_r+0x22>
 800ce6c:	bd38      	pop	{r3, r4, r5, pc}
 800ce6e:	bf00      	nop
 800ce70:	2000088c 	.word	0x2000088c

0800ce74 <sbrk_aligned>:
 800ce74:	b570      	push	{r4, r5, r6, lr}
 800ce76:	4e0e      	ldr	r6, [pc, #56]	; (800ceb0 <sbrk_aligned+0x3c>)
 800ce78:	460c      	mov	r4, r1
 800ce7a:	6831      	ldr	r1, [r6, #0]
 800ce7c:	4605      	mov	r5, r0
 800ce7e:	b911      	cbnz	r1, 800ce86 <sbrk_aligned+0x12>
 800ce80:	f000 fb78 	bl	800d574 <_sbrk_r>
 800ce84:	6030      	str	r0, [r6, #0]
 800ce86:	4621      	mov	r1, r4
 800ce88:	4628      	mov	r0, r5
 800ce8a:	f000 fb73 	bl	800d574 <_sbrk_r>
 800ce8e:	1c43      	adds	r3, r0, #1
 800ce90:	d00a      	beq.n	800cea8 <sbrk_aligned+0x34>
 800ce92:	1cc4      	adds	r4, r0, #3
 800ce94:	f024 0403 	bic.w	r4, r4, #3
 800ce98:	42a0      	cmp	r0, r4
 800ce9a:	d007      	beq.n	800ceac <sbrk_aligned+0x38>
 800ce9c:	1a21      	subs	r1, r4, r0
 800ce9e:	4628      	mov	r0, r5
 800cea0:	f000 fb68 	bl	800d574 <_sbrk_r>
 800cea4:	3001      	adds	r0, #1
 800cea6:	d101      	bne.n	800ceac <sbrk_aligned+0x38>
 800cea8:	f04f 34ff 	mov.w	r4, #4294967295
 800ceac:	4620      	mov	r0, r4
 800ceae:	bd70      	pop	{r4, r5, r6, pc}
 800ceb0:	20000890 	.word	0x20000890

0800ceb4 <_malloc_r>:
 800ceb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ceb8:	1ccd      	adds	r5, r1, #3
 800ceba:	f025 0503 	bic.w	r5, r5, #3
 800cebe:	3508      	adds	r5, #8
 800cec0:	2d0c      	cmp	r5, #12
 800cec2:	bf38      	it	cc
 800cec4:	250c      	movcc	r5, #12
 800cec6:	2d00      	cmp	r5, #0
 800cec8:	4607      	mov	r7, r0
 800ceca:	db01      	blt.n	800ced0 <_malloc_r+0x1c>
 800cecc:	42a9      	cmp	r1, r5
 800cece:	d905      	bls.n	800cedc <_malloc_r+0x28>
 800ced0:	230c      	movs	r3, #12
 800ced2:	603b      	str	r3, [r7, #0]
 800ced4:	2600      	movs	r6, #0
 800ced6:	4630      	mov	r0, r6
 800ced8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cedc:	4e2e      	ldr	r6, [pc, #184]	; (800cf98 <_malloc_r+0xe4>)
 800cede:	f000 fe3d 	bl	800db5c <__malloc_lock>
 800cee2:	6833      	ldr	r3, [r6, #0]
 800cee4:	461c      	mov	r4, r3
 800cee6:	bb34      	cbnz	r4, 800cf36 <_malloc_r+0x82>
 800cee8:	4629      	mov	r1, r5
 800ceea:	4638      	mov	r0, r7
 800ceec:	f7ff ffc2 	bl	800ce74 <sbrk_aligned>
 800cef0:	1c43      	adds	r3, r0, #1
 800cef2:	4604      	mov	r4, r0
 800cef4:	d14d      	bne.n	800cf92 <_malloc_r+0xde>
 800cef6:	6834      	ldr	r4, [r6, #0]
 800cef8:	4626      	mov	r6, r4
 800cefa:	2e00      	cmp	r6, #0
 800cefc:	d140      	bne.n	800cf80 <_malloc_r+0xcc>
 800cefe:	6823      	ldr	r3, [r4, #0]
 800cf00:	4631      	mov	r1, r6
 800cf02:	4638      	mov	r0, r7
 800cf04:	eb04 0803 	add.w	r8, r4, r3
 800cf08:	f000 fb34 	bl	800d574 <_sbrk_r>
 800cf0c:	4580      	cmp	r8, r0
 800cf0e:	d13a      	bne.n	800cf86 <_malloc_r+0xd2>
 800cf10:	6821      	ldr	r1, [r4, #0]
 800cf12:	3503      	adds	r5, #3
 800cf14:	1a6d      	subs	r5, r5, r1
 800cf16:	f025 0503 	bic.w	r5, r5, #3
 800cf1a:	3508      	adds	r5, #8
 800cf1c:	2d0c      	cmp	r5, #12
 800cf1e:	bf38      	it	cc
 800cf20:	250c      	movcc	r5, #12
 800cf22:	4629      	mov	r1, r5
 800cf24:	4638      	mov	r0, r7
 800cf26:	f7ff ffa5 	bl	800ce74 <sbrk_aligned>
 800cf2a:	3001      	adds	r0, #1
 800cf2c:	d02b      	beq.n	800cf86 <_malloc_r+0xd2>
 800cf2e:	6823      	ldr	r3, [r4, #0]
 800cf30:	442b      	add	r3, r5
 800cf32:	6023      	str	r3, [r4, #0]
 800cf34:	e00e      	b.n	800cf54 <_malloc_r+0xa0>
 800cf36:	6822      	ldr	r2, [r4, #0]
 800cf38:	1b52      	subs	r2, r2, r5
 800cf3a:	d41e      	bmi.n	800cf7a <_malloc_r+0xc6>
 800cf3c:	2a0b      	cmp	r2, #11
 800cf3e:	d916      	bls.n	800cf6e <_malloc_r+0xba>
 800cf40:	1961      	adds	r1, r4, r5
 800cf42:	42a3      	cmp	r3, r4
 800cf44:	6025      	str	r5, [r4, #0]
 800cf46:	bf18      	it	ne
 800cf48:	6059      	strne	r1, [r3, #4]
 800cf4a:	6863      	ldr	r3, [r4, #4]
 800cf4c:	bf08      	it	eq
 800cf4e:	6031      	streq	r1, [r6, #0]
 800cf50:	5162      	str	r2, [r4, r5]
 800cf52:	604b      	str	r3, [r1, #4]
 800cf54:	4638      	mov	r0, r7
 800cf56:	f104 060b 	add.w	r6, r4, #11
 800cf5a:	f000 fe05 	bl	800db68 <__malloc_unlock>
 800cf5e:	f026 0607 	bic.w	r6, r6, #7
 800cf62:	1d23      	adds	r3, r4, #4
 800cf64:	1af2      	subs	r2, r6, r3
 800cf66:	d0b6      	beq.n	800ced6 <_malloc_r+0x22>
 800cf68:	1b9b      	subs	r3, r3, r6
 800cf6a:	50a3      	str	r3, [r4, r2]
 800cf6c:	e7b3      	b.n	800ced6 <_malloc_r+0x22>
 800cf6e:	6862      	ldr	r2, [r4, #4]
 800cf70:	42a3      	cmp	r3, r4
 800cf72:	bf0c      	ite	eq
 800cf74:	6032      	streq	r2, [r6, #0]
 800cf76:	605a      	strne	r2, [r3, #4]
 800cf78:	e7ec      	b.n	800cf54 <_malloc_r+0xa0>
 800cf7a:	4623      	mov	r3, r4
 800cf7c:	6864      	ldr	r4, [r4, #4]
 800cf7e:	e7b2      	b.n	800cee6 <_malloc_r+0x32>
 800cf80:	4634      	mov	r4, r6
 800cf82:	6876      	ldr	r6, [r6, #4]
 800cf84:	e7b9      	b.n	800cefa <_malloc_r+0x46>
 800cf86:	230c      	movs	r3, #12
 800cf88:	603b      	str	r3, [r7, #0]
 800cf8a:	4638      	mov	r0, r7
 800cf8c:	f000 fdec 	bl	800db68 <__malloc_unlock>
 800cf90:	e7a1      	b.n	800ced6 <_malloc_r+0x22>
 800cf92:	6025      	str	r5, [r4, #0]
 800cf94:	e7de      	b.n	800cf54 <_malloc_r+0xa0>
 800cf96:	bf00      	nop
 800cf98:	2000088c 	.word	0x2000088c

0800cf9c <__sfputc_r>:
 800cf9c:	6893      	ldr	r3, [r2, #8]
 800cf9e:	3b01      	subs	r3, #1
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	b410      	push	{r4}
 800cfa4:	6093      	str	r3, [r2, #8]
 800cfa6:	da07      	bge.n	800cfb8 <__sfputc_r+0x1c>
 800cfa8:	6994      	ldr	r4, [r2, #24]
 800cfaa:	42a3      	cmp	r3, r4
 800cfac:	db01      	blt.n	800cfb2 <__sfputc_r+0x16>
 800cfae:	290a      	cmp	r1, #10
 800cfb0:	d102      	bne.n	800cfb8 <__sfputc_r+0x1c>
 800cfb2:	bc10      	pop	{r4}
 800cfb4:	f000 baee 	b.w	800d594 <__swbuf_r>
 800cfb8:	6813      	ldr	r3, [r2, #0]
 800cfba:	1c58      	adds	r0, r3, #1
 800cfbc:	6010      	str	r0, [r2, #0]
 800cfbe:	7019      	strb	r1, [r3, #0]
 800cfc0:	4608      	mov	r0, r1
 800cfc2:	bc10      	pop	{r4}
 800cfc4:	4770      	bx	lr

0800cfc6 <__sfputs_r>:
 800cfc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfc8:	4606      	mov	r6, r0
 800cfca:	460f      	mov	r7, r1
 800cfcc:	4614      	mov	r4, r2
 800cfce:	18d5      	adds	r5, r2, r3
 800cfd0:	42ac      	cmp	r4, r5
 800cfd2:	d101      	bne.n	800cfd8 <__sfputs_r+0x12>
 800cfd4:	2000      	movs	r0, #0
 800cfd6:	e007      	b.n	800cfe8 <__sfputs_r+0x22>
 800cfd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfdc:	463a      	mov	r2, r7
 800cfde:	4630      	mov	r0, r6
 800cfe0:	f7ff ffdc 	bl	800cf9c <__sfputc_r>
 800cfe4:	1c43      	adds	r3, r0, #1
 800cfe6:	d1f3      	bne.n	800cfd0 <__sfputs_r+0xa>
 800cfe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cfec <_vfiprintf_r>:
 800cfec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cff0:	460d      	mov	r5, r1
 800cff2:	b09d      	sub	sp, #116	; 0x74
 800cff4:	4614      	mov	r4, r2
 800cff6:	4698      	mov	r8, r3
 800cff8:	4606      	mov	r6, r0
 800cffa:	b118      	cbz	r0, 800d004 <_vfiprintf_r+0x18>
 800cffc:	6983      	ldr	r3, [r0, #24]
 800cffe:	b90b      	cbnz	r3, 800d004 <_vfiprintf_r+0x18>
 800d000:	f000 fca6 	bl	800d950 <__sinit>
 800d004:	4b89      	ldr	r3, [pc, #548]	; (800d22c <_vfiprintf_r+0x240>)
 800d006:	429d      	cmp	r5, r3
 800d008:	d11b      	bne.n	800d042 <_vfiprintf_r+0x56>
 800d00a:	6875      	ldr	r5, [r6, #4]
 800d00c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d00e:	07d9      	lsls	r1, r3, #31
 800d010:	d405      	bmi.n	800d01e <_vfiprintf_r+0x32>
 800d012:	89ab      	ldrh	r3, [r5, #12]
 800d014:	059a      	lsls	r2, r3, #22
 800d016:	d402      	bmi.n	800d01e <_vfiprintf_r+0x32>
 800d018:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d01a:	f000 fd37 	bl	800da8c <__retarget_lock_acquire_recursive>
 800d01e:	89ab      	ldrh	r3, [r5, #12]
 800d020:	071b      	lsls	r3, r3, #28
 800d022:	d501      	bpl.n	800d028 <_vfiprintf_r+0x3c>
 800d024:	692b      	ldr	r3, [r5, #16]
 800d026:	b9eb      	cbnz	r3, 800d064 <_vfiprintf_r+0x78>
 800d028:	4629      	mov	r1, r5
 800d02a:	4630      	mov	r0, r6
 800d02c:	f000 fb04 	bl	800d638 <__swsetup_r>
 800d030:	b1c0      	cbz	r0, 800d064 <_vfiprintf_r+0x78>
 800d032:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d034:	07dc      	lsls	r4, r3, #31
 800d036:	d50e      	bpl.n	800d056 <_vfiprintf_r+0x6a>
 800d038:	f04f 30ff 	mov.w	r0, #4294967295
 800d03c:	b01d      	add	sp, #116	; 0x74
 800d03e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d042:	4b7b      	ldr	r3, [pc, #492]	; (800d230 <_vfiprintf_r+0x244>)
 800d044:	429d      	cmp	r5, r3
 800d046:	d101      	bne.n	800d04c <_vfiprintf_r+0x60>
 800d048:	68b5      	ldr	r5, [r6, #8]
 800d04a:	e7df      	b.n	800d00c <_vfiprintf_r+0x20>
 800d04c:	4b79      	ldr	r3, [pc, #484]	; (800d234 <_vfiprintf_r+0x248>)
 800d04e:	429d      	cmp	r5, r3
 800d050:	bf08      	it	eq
 800d052:	68f5      	ldreq	r5, [r6, #12]
 800d054:	e7da      	b.n	800d00c <_vfiprintf_r+0x20>
 800d056:	89ab      	ldrh	r3, [r5, #12]
 800d058:	0598      	lsls	r0, r3, #22
 800d05a:	d4ed      	bmi.n	800d038 <_vfiprintf_r+0x4c>
 800d05c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d05e:	f000 fd16 	bl	800da8e <__retarget_lock_release_recursive>
 800d062:	e7e9      	b.n	800d038 <_vfiprintf_r+0x4c>
 800d064:	2300      	movs	r3, #0
 800d066:	9309      	str	r3, [sp, #36]	; 0x24
 800d068:	2320      	movs	r3, #32
 800d06a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d06e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d072:	2330      	movs	r3, #48	; 0x30
 800d074:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d238 <_vfiprintf_r+0x24c>
 800d078:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d07c:	f04f 0901 	mov.w	r9, #1
 800d080:	4623      	mov	r3, r4
 800d082:	469a      	mov	sl, r3
 800d084:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d088:	b10a      	cbz	r2, 800d08e <_vfiprintf_r+0xa2>
 800d08a:	2a25      	cmp	r2, #37	; 0x25
 800d08c:	d1f9      	bne.n	800d082 <_vfiprintf_r+0x96>
 800d08e:	ebba 0b04 	subs.w	fp, sl, r4
 800d092:	d00b      	beq.n	800d0ac <_vfiprintf_r+0xc0>
 800d094:	465b      	mov	r3, fp
 800d096:	4622      	mov	r2, r4
 800d098:	4629      	mov	r1, r5
 800d09a:	4630      	mov	r0, r6
 800d09c:	f7ff ff93 	bl	800cfc6 <__sfputs_r>
 800d0a0:	3001      	adds	r0, #1
 800d0a2:	f000 80aa 	beq.w	800d1fa <_vfiprintf_r+0x20e>
 800d0a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d0a8:	445a      	add	r2, fp
 800d0aa:	9209      	str	r2, [sp, #36]	; 0x24
 800d0ac:	f89a 3000 	ldrb.w	r3, [sl]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	f000 80a2 	beq.w	800d1fa <_vfiprintf_r+0x20e>
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	f04f 32ff 	mov.w	r2, #4294967295
 800d0bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d0c0:	f10a 0a01 	add.w	sl, sl, #1
 800d0c4:	9304      	str	r3, [sp, #16]
 800d0c6:	9307      	str	r3, [sp, #28]
 800d0c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d0cc:	931a      	str	r3, [sp, #104]	; 0x68
 800d0ce:	4654      	mov	r4, sl
 800d0d0:	2205      	movs	r2, #5
 800d0d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0d6:	4858      	ldr	r0, [pc, #352]	; (800d238 <_vfiprintf_r+0x24c>)
 800d0d8:	f7f3 f85a 	bl	8000190 <memchr>
 800d0dc:	9a04      	ldr	r2, [sp, #16]
 800d0de:	b9d8      	cbnz	r0, 800d118 <_vfiprintf_r+0x12c>
 800d0e0:	06d1      	lsls	r1, r2, #27
 800d0e2:	bf44      	itt	mi
 800d0e4:	2320      	movmi	r3, #32
 800d0e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0ea:	0713      	lsls	r3, r2, #28
 800d0ec:	bf44      	itt	mi
 800d0ee:	232b      	movmi	r3, #43	; 0x2b
 800d0f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0f4:	f89a 3000 	ldrb.w	r3, [sl]
 800d0f8:	2b2a      	cmp	r3, #42	; 0x2a
 800d0fa:	d015      	beq.n	800d128 <_vfiprintf_r+0x13c>
 800d0fc:	9a07      	ldr	r2, [sp, #28]
 800d0fe:	4654      	mov	r4, sl
 800d100:	2000      	movs	r0, #0
 800d102:	f04f 0c0a 	mov.w	ip, #10
 800d106:	4621      	mov	r1, r4
 800d108:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d10c:	3b30      	subs	r3, #48	; 0x30
 800d10e:	2b09      	cmp	r3, #9
 800d110:	d94e      	bls.n	800d1b0 <_vfiprintf_r+0x1c4>
 800d112:	b1b0      	cbz	r0, 800d142 <_vfiprintf_r+0x156>
 800d114:	9207      	str	r2, [sp, #28]
 800d116:	e014      	b.n	800d142 <_vfiprintf_r+0x156>
 800d118:	eba0 0308 	sub.w	r3, r0, r8
 800d11c:	fa09 f303 	lsl.w	r3, r9, r3
 800d120:	4313      	orrs	r3, r2
 800d122:	9304      	str	r3, [sp, #16]
 800d124:	46a2      	mov	sl, r4
 800d126:	e7d2      	b.n	800d0ce <_vfiprintf_r+0xe2>
 800d128:	9b03      	ldr	r3, [sp, #12]
 800d12a:	1d19      	adds	r1, r3, #4
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	9103      	str	r1, [sp, #12]
 800d130:	2b00      	cmp	r3, #0
 800d132:	bfbb      	ittet	lt
 800d134:	425b      	neglt	r3, r3
 800d136:	f042 0202 	orrlt.w	r2, r2, #2
 800d13a:	9307      	strge	r3, [sp, #28]
 800d13c:	9307      	strlt	r3, [sp, #28]
 800d13e:	bfb8      	it	lt
 800d140:	9204      	strlt	r2, [sp, #16]
 800d142:	7823      	ldrb	r3, [r4, #0]
 800d144:	2b2e      	cmp	r3, #46	; 0x2e
 800d146:	d10c      	bne.n	800d162 <_vfiprintf_r+0x176>
 800d148:	7863      	ldrb	r3, [r4, #1]
 800d14a:	2b2a      	cmp	r3, #42	; 0x2a
 800d14c:	d135      	bne.n	800d1ba <_vfiprintf_r+0x1ce>
 800d14e:	9b03      	ldr	r3, [sp, #12]
 800d150:	1d1a      	adds	r2, r3, #4
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	9203      	str	r2, [sp, #12]
 800d156:	2b00      	cmp	r3, #0
 800d158:	bfb8      	it	lt
 800d15a:	f04f 33ff 	movlt.w	r3, #4294967295
 800d15e:	3402      	adds	r4, #2
 800d160:	9305      	str	r3, [sp, #20]
 800d162:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800d23c <_vfiprintf_r+0x250>
 800d166:	7821      	ldrb	r1, [r4, #0]
 800d168:	2203      	movs	r2, #3
 800d16a:	4650      	mov	r0, sl
 800d16c:	f7f3 f810 	bl	8000190 <memchr>
 800d170:	b140      	cbz	r0, 800d184 <_vfiprintf_r+0x198>
 800d172:	2340      	movs	r3, #64	; 0x40
 800d174:	eba0 000a 	sub.w	r0, r0, sl
 800d178:	fa03 f000 	lsl.w	r0, r3, r0
 800d17c:	9b04      	ldr	r3, [sp, #16]
 800d17e:	4303      	orrs	r3, r0
 800d180:	3401      	adds	r4, #1
 800d182:	9304      	str	r3, [sp, #16]
 800d184:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d188:	482d      	ldr	r0, [pc, #180]	; (800d240 <_vfiprintf_r+0x254>)
 800d18a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d18e:	2206      	movs	r2, #6
 800d190:	f7f2 fffe 	bl	8000190 <memchr>
 800d194:	2800      	cmp	r0, #0
 800d196:	d03f      	beq.n	800d218 <_vfiprintf_r+0x22c>
 800d198:	4b2a      	ldr	r3, [pc, #168]	; (800d244 <_vfiprintf_r+0x258>)
 800d19a:	bb1b      	cbnz	r3, 800d1e4 <_vfiprintf_r+0x1f8>
 800d19c:	9b03      	ldr	r3, [sp, #12]
 800d19e:	3307      	adds	r3, #7
 800d1a0:	f023 0307 	bic.w	r3, r3, #7
 800d1a4:	3308      	adds	r3, #8
 800d1a6:	9303      	str	r3, [sp, #12]
 800d1a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1aa:	443b      	add	r3, r7
 800d1ac:	9309      	str	r3, [sp, #36]	; 0x24
 800d1ae:	e767      	b.n	800d080 <_vfiprintf_r+0x94>
 800d1b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d1b4:	460c      	mov	r4, r1
 800d1b6:	2001      	movs	r0, #1
 800d1b8:	e7a5      	b.n	800d106 <_vfiprintf_r+0x11a>
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	3401      	adds	r4, #1
 800d1be:	9305      	str	r3, [sp, #20]
 800d1c0:	4619      	mov	r1, r3
 800d1c2:	f04f 0c0a 	mov.w	ip, #10
 800d1c6:	4620      	mov	r0, r4
 800d1c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1cc:	3a30      	subs	r2, #48	; 0x30
 800d1ce:	2a09      	cmp	r2, #9
 800d1d0:	d903      	bls.n	800d1da <_vfiprintf_r+0x1ee>
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d0c5      	beq.n	800d162 <_vfiprintf_r+0x176>
 800d1d6:	9105      	str	r1, [sp, #20]
 800d1d8:	e7c3      	b.n	800d162 <_vfiprintf_r+0x176>
 800d1da:	fb0c 2101 	mla	r1, ip, r1, r2
 800d1de:	4604      	mov	r4, r0
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	e7f0      	b.n	800d1c6 <_vfiprintf_r+0x1da>
 800d1e4:	ab03      	add	r3, sp, #12
 800d1e6:	9300      	str	r3, [sp, #0]
 800d1e8:	462a      	mov	r2, r5
 800d1ea:	4b17      	ldr	r3, [pc, #92]	; (800d248 <_vfiprintf_r+0x25c>)
 800d1ec:	a904      	add	r1, sp, #16
 800d1ee:	4630      	mov	r0, r6
 800d1f0:	f3af 8000 	nop.w
 800d1f4:	4607      	mov	r7, r0
 800d1f6:	1c78      	adds	r0, r7, #1
 800d1f8:	d1d6      	bne.n	800d1a8 <_vfiprintf_r+0x1bc>
 800d1fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1fc:	07d9      	lsls	r1, r3, #31
 800d1fe:	d405      	bmi.n	800d20c <_vfiprintf_r+0x220>
 800d200:	89ab      	ldrh	r3, [r5, #12]
 800d202:	059a      	lsls	r2, r3, #22
 800d204:	d402      	bmi.n	800d20c <_vfiprintf_r+0x220>
 800d206:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d208:	f000 fc41 	bl	800da8e <__retarget_lock_release_recursive>
 800d20c:	89ab      	ldrh	r3, [r5, #12]
 800d20e:	065b      	lsls	r3, r3, #25
 800d210:	f53f af12 	bmi.w	800d038 <_vfiprintf_r+0x4c>
 800d214:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d216:	e711      	b.n	800d03c <_vfiprintf_r+0x50>
 800d218:	ab03      	add	r3, sp, #12
 800d21a:	9300      	str	r3, [sp, #0]
 800d21c:	462a      	mov	r2, r5
 800d21e:	4b0a      	ldr	r3, [pc, #40]	; (800d248 <_vfiprintf_r+0x25c>)
 800d220:	a904      	add	r1, sp, #16
 800d222:	4630      	mov	r0, r6
 800d224:	f000 f880 	bl	800d328 <_printf_i>
 800d228:	e7e4      	b.n	800d1f4 <_vfiprintf_r+0x208>
 800d22a:	bf00      	nop
 800d22c:	0800e354 	.word	0x0800e354
 800d230:	0800e374 	.word	0x0800e374
 800d234:	0800e334 	.word	0x0800e334
 800d238:	0800e2fe 	.word	0x0800e2fe
 800d23c:	0800e304 	.word	0x0800e304
 800d240:	0800e308 	.word	0x0800e308
 800d244:	00000000 	.word	0x00000000
 800d248:	0800cfc7 	.word	0x0800cfc7

0800d24c <_printf_common>:
 800d24c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d250:	4616      	mov	r6, r2
 800d252:	4699      	mov	r9, r3
 800d254:	688a      	ldr	r2, [r1, #8]
 800d256:	690b      	ldr	r3, [r1, #16]
 800d258:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d25c:	4293      	cmp	r3, r2
 800d25e:	bfb8      	it	lt
 800d260:	4613      	movlt	r3, r2
 800d262:	6033      	str	r3, [r6, #0]
 800d264:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d268:	4607      	mov	r7, r0
 800d26a:	460c      	mov	r4, r1
 800d26c:	b10a      	cbz	r2, 800d272 <_printf_common+0x26>
 800d26e:	3301      	adds	r3, #1
 800d270:	6033      	str	r3, [r6, #0]
 800d272:	6823      	ldr	r3, [r4, #0]
 800d274:	0699      	lsls	r1, r3, #26
 800d276:	bf42      	ittt	mi
 800d278:	6833      	ldrmi	r3, [r6, #0]
 800d27a:	3302      	addmi	r3, #2
 800d27c:	6033      	strmi	r3, [r6, #0]
 800d27e:	6825      	ldr	r5, [r4, #0]
 800d280:	f015 0506 	ands.w	r5, r5, #6
 800d284:	d106      	bne.n	800d294 <_printf_common+0x48>
 800d286:	f104 0a19 	add.w	sl, r4, #25
 800d28a:	68e3      	ldr	r3, [r4, #12]
 800d28c:	6832      	ldr	r2, [r6, #0]
 800d28e:	1a9b      	subs	r3, r3, r2
 800d290:	42ab      	cmp	r3, r5
 800d292:	dc26      	bgt.n	800d2e2 <_printf_common+0x96>
 800d294:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d298:	1e13      	subs	r3, r2, #0
 800d29a:	6822      	ldr	r2, [r4, #0]
 800d29c:	bf18      	it	ne
 800d29e:	2301      	movne	r3, #1
 800d2a0:	0692      	lsls	r2, r2, #26
 800d2a2:	d42b      	bmi.n	800d2fc <_printf_common+0xb0>
 800d2a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d2a8:	4649      	mov	r1, r9
 800d2aa:	4638      	mov	r0, r7
 800d2ac:	47c0      	blx	r8
 800d2ae:	3001      	adds	r0, #1
 800d2b0:	d01e      	beq.n	800d2f0 <_printf_common+0xa4>
 800d2b2:	6823      	ldr	r3, [r4, #0]
 800d2b4:	68e5      	ldr	r5, [r4, #12]
 800d2b6:	6832      	ldr	r2, [r6, #0]
 800d2b8:	f003 0306 	and.w	r3, r3, #6
 800d2bc:	2b04      	cmp	r3, #4
 800d2be:	bf08      	it	eq
 800d2c0:	1aad      	subeq	r5, r5, r2
 800d2c2:	68a3      	ldr	r3, [r4, #8]
 800d2c4:	6922      	ldr	r2, [r4, #16]
 800d2c6:	bf0c      	ite	eq
 800d2c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d2cc:	2500      	movne	r5, #0
 800d2ce:	4293      	cmp	r3, r2
 800d2d0:	bfc4      	itt	gt
 800d2d2:	1a9b      	subgt	r3, r3, r2
 800d2d4:	18ed      	addgt	r5, r5, r3
 800d2d6:	2600      	movs	r6, #0
 800d2d8:	341a      	adds	r4, #26
 800d2da:	42b5      	cmp	r5, r6
 800d2dc:	d11a      	bne.n	800d314 <_printf_common+0xc8>
 800d2de:	2000      	movs	r0, #0
 800d2e0:	e008      	b.n	800d2f4 <_printf_common+0xa8>
 800d2e2:	2301      	movs	r3, #1
 800d2e4:	4652      	mov	r2, sl
 800d2e6:	4649      	mov	r1, r9
 800d2e8:	4638      	mov	r0, r7
 800d2ea:	47c0      	blx	r8
 800d2ec:	3001      	adds	r0, #1
 800d2ee:	d103      	bne.n	800d2f8 <_printf_common+0xac>
 800d2f0:	f04f 30ff 	mov.w	r0, #4294967295
 800d2f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2f8:	3501      	adds	r5, #1
 800d2fa:	e7c6      	b.n	800d28a <_printf_common+0x3e>
 800d2fc:	18e1      	adds	r1, r4, r3
 800d2fe:	1c5a      	adds	r2, r3, #1
 800d300:	2030      	movs	r0, #48	; 0x30
 800d302:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d306:	4422      	add	r2, r4
 800d308:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d30c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d310:	3302      	adds	r3, #2
 800d312:	e7c7      	b.n	800d2a4 <_printf_common+0x58>
 800d314:	2301      	movs	r3, #1
 800d316:	4622      	mov	r2, r4
 800d318:	4649      	mov	r1, r9
 800d31a:	4638      	mov	r0, r7
 800d31c:	47c0      	blx	r8
 800d31e:	3001      	adds	r0, #1
 800d320:	d0e6      	beq.n	800d2f0 <_printf_common+0xa4>
 800d322:	3601      	adds	r6, #1
 800d324:	e7d9      	b.n	800d2da <_printf_common+0x8e>
	...

0800d328 <_printf_i>:
 800d328:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d32c:	7e0f      	ldrb	r7, [r1, #24]
 800d32e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d330:	2f78      	cmp	r7, #120	; 0x78
 800d332:	4691      	mov	r9, r2
 800d334:	4680      	mov	r8, r0
 800d336:	460c      	mov	r4, r1
 800d338:	469a      	mov	sl, r3
 800d33a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d33e:	d807      	bhi.n	800d350 <_printf_i+0x28>
 800d340:	2f62      	cmp	r7, #98	; 0x62
 800d342:	d80a      	bhi.n	800d35a <_printf_i+0x32>
 800d344:	2f00      	cmp	r7, #0
 800d346:	f000 80d8 	beq.w	800d4fa <_printf_i+0x1d2>
 800d34a:	2f58      	cmp	r7, #88	; 0x58
 800d34c:	f000 80a3 	beq.w	800d496 <_printf_i+0x16e>
 800d350:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d354:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d358:	e03a      	b.n	800d3d0 <_printf_i+0xa8>
 800d35a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d35e:	2b15      	cmp	r3, #21
 800d360:	d8f6      	bhi.n	800d350 <_printf_i+0x28>
 800d362:	a101      	add	r1, pc, #4	; (adr r1, 800d368 <_printf_i+0x40>)
 800d364:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d368:	0800d3c1 	.word	0x0800d3c1
 800d36c:	0800d3d5 	.word	0x0800d3d5
 800d370:	0800d351 	.word	0x0800d351
 800d374:	0800d351 	.word	0x0800d351
 800d378:	0800d351 	.word	0x0800d351
 800d37c:	0800d351 	.word	0x0800d351
 800d380:	0800d3d5 	.word	0x0800d3d5
 800d384:	0800d351 	.word	0x0800d351
 800d388:	0800d351 	.word	0x0800d351
 800d38c:	0800d351 	.word	0x0800d351
 800d390:	0800d351 	.word	0x0800d351
 800d394:	0800d4e1 	.word	0x0800d4e1
 800d398:	0800d405 	.word	0x0800d405
 800d39c:	0800d4c3 	.word	0x0800d4c3
 800d3a0:	0800d351 	.word	0x0800d351
 800d3a4:	0800d351 	.word	0x0800d351
 800d3a8:	0800d503 	.word	0x0800d503
 800d3ac:	0800d351 	.word	0x0800d351
 800d3b0:	0800d405 	.word	0x0800d405
 800d3b4:	0800d351 	.word	0x0800d351
 800d3b8:	0800d351 	.word	0x0800d351
 800d3bc:	0800d4cb 	.word	0x0800d4cb
 800d3c0:	682b      	ldr	r3, [r5, #0]
 800d3c2:	1d1a      	adds	r2, r3, #4
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	602a      	str	r2, [r5, #0]
 800d3c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d3cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d3d0:	2301      	movs	r3, #1
 800d3d2:	e0a3      	b.n	800d51c <_printf_i+0x1f4>
 800d3d4:	6820      	ldr	r0, [r4, #0]
 800d3d6:	6829      	ldr	r1, [r5, #0]
 800d3d8:	0606      	lsls	r6, r0, #24
 800d3da:	f101 0304 	add.w	r3, r1, #4
 800d3de:	d50a      	bpl.n	800d3f6 <_printf_i+0xce>
 800d3e0:	680e      	ldr	r6, [r1, #0]
 800d3e2:	602b      	str	r3, [r5, #0]
 800d3e4:	2e00      	cmp	r6, #0
 800d3e6:	da03      	bge.n	800d3f0 <_printf_i+0xc8>
 800d3e8:	232d      	movs	r3, #45	; 0x2d
 800d3ea:	4276      	negs	r6, r6
 800d3ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d3f0:	485e      	ldr	r0, [pc, #376]	; (800d56c <_printf_i+0x244>)
 800d3f2:	230a      	movs	r3, #10
 800d3f4:	e019      	b.n	800d42a <_printf_i+0x102>
 800d3f6:	680e      	ldr	r6, [r1, #0]
 800d3f8:	602b      	str	r3, [r5, #0]
 800d3fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d3fe:	bf18      	it	ne
 800d400:	b236      	sxthne	r6, r6
 800d402:	e7ef      	b.n	800d3e4 <_printf_i+0xbc>
 800d404:	682b      	ldr	r3, [r5, #0]
 800d406:	6820      	ldr	r0, [r4, #0]
 800d408:	1d19      	adds	r1, r3, #4
 800d40a:	6029      	str	r1, [r5, #0]
 800d40c:	0601      	lsls	r1, r0, #24
 800d40e:	d501      	bpl.n	800d414 <_printf_i+0xec>
 800d410:	681e      	ldr	r6, [r3, #0]
 800d412:	e002      	b.n	800d41a <_printf_i+0xf2>
 800d414:	0646      	lsls	r6, r0, #25
 800d416:	d5fb      	bpl.n	800d410 <_printf_i+0xe8>
 800d418:	881e      	ldrh	r6, [r3, #0]
 800d41a:	4854      	ldr	r0, [pc, #336]	; (800d56c <_printf_i+0x244>)
 800d41c:	2f6f      	cmp	r7, #111	; 0x6f
 800d41e:	bf0c      	ite	eq
 800d420:	2308      	moveq	r3, #8
 800d422:	230a      	movne	r3, #10
 800d424:	2100      	movs	r1, #0
 800d426:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d42a:	6865      	ldr	r5, [r4, #4]
 800d42c:	60a5      	str	r5, [r4, #8]
 800d42e:	2d00      	cmp	r5, #0
 800d430:	bfa2      	ittt	ge
 800d432:	6821      	ldrge	r1, [r4, #0]
 800d434:	f021 0104 	bicge.w	r1, r1, #4
 800d438:	6021      	strge	r1, [r4, #0]
 800d43a:	b90e      	cbnz	r6, 800d440 <_printf_i+0x118>
 800d43c:	2d00      	cmp	r5, #0
 800d43e:	d04d      	beq.n	800d4dc <_printf_i+0x1b4>
 800d440:	4615      	mov	r5, r2
 800d442:	fbb6 f1f3 	udiv	r1, r6, r3
 800d446:	fb03 6711 	mls	r7, r3, r1, r6
 800d44a:	5dc7      	ldrb	r7, [r0, r7]
 800d44c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d450:	4637      	mov	r7, r6
 800d452:	42bb      	cmp	r3, r7
 800d454:	460e      	mov	r6, r1
 800d456:	d9f4      	bls.n	800d442 <_printf_i+0x11a>
 800d458:	2b08      	cmp	r3, #8
 800d45a:	d10b      	bne.n	800d474 <_printf_i+0x14c>
 800d45c:	6823      	ldr	r3, [r4, #0]
 800d45e:	07de      	lsls	r6, r3, #31
 800d460:	d508      	bpl.n	800d474 <_printf_i+0x14c>
 800d462:	6923      	ldr	r3, [r4, #16]
 800d464:	6861      	ldr	r1, [r4, #4]
 800d466:	4299      	cmp	r1, r3
 800d468:	bfde      	ittt	le
 800d46a:	2330      	movle	r3, #48	; 0x30
 800d46c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d470:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d474:	1b52      	subs	r2, r2, r5
 800d476:	6122      	str	r2, [r4, #16]
 800d478:	f8cd a000 	str.w	sl, [sp]
 800d47c:	464b      	mov	r3, r9
 800d47e:	aa03      	add	r2, sp, #12
 800d480:	4621      	mov	r1, r4
 800d482:	4640      	mov	r0, r8
 800d484:	f7ff fee2 	bl	800d24c <_printf_common>
 800d488:	3001      	adds	r0, #1
 800d48a:	d14c      	bne.n	800d526 <_printf_i+0x1fe>
 800d48c:	f04f 30ff 	mov.w	r0, #4294967295
 800d490:	b004      	add	sp, #16
 800d492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d496:	4835      	ldr	r0, [pc, #212]	; (800d56c <_printf_i+0x244>)
 800d498:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d49c:	6829      	ldr	r1, [r5, #0]
 800d49e:	6823      	ldr	r3, [r4, #0]
 800d4a0:	f851 6b04 	ldr.w	r6, [r1], #4
 800d4a4:	6029      	str	r1, [r5, #0]
 800d4a6:	061d      	lsls	r5, r3, #24
 800d4a8:	d514      	bpl.n	800d4d4 <_printf_i+0x1ac>
 800d4aa:	07df      	lsls	r7, r3, #31
 800d4ac:	bf44      	itt	mi
 800d4ae:	f043 0320 	orrmi.w	r3, r3, #32
 800d4b2:	6023      	strmi	r3, [r4, #0]
 800d4b4:	b91e      	cbnz	r6, 800d4be <_printf_i+0x196>
 800d4b6:	6823      	ldr	r3, [r4, #0]
 800d4b8:	f023 0320 	bic.w	r3, r3, #32
 800d4bc:	6023      	str	r3, [r4, #0]
 800d4be:	2310      	movs	r3, #16
 800d4c0:	e7b0      	b.n	800d424 <_printf_i+0xfc>
 800d4c2:	6823      	ldr	r3, [r4, #0]
 800d4c4:	f043 0320 	orr.w	r3, r3, #32
 800d4c8:	6023      	str	r3, [r4, #0]
 800d4ca:	2378      	movs	r3, #120	; 0x78
 800d4cc:	4828      	ldr	r0, [pc, #160]	; (800d570 <_printf_i+0x248>)
 800d4ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d4d2:	e7e3      	b.n	800d49c <_printf_i+0x174>
 800d4d4:	0659      	lsls	r1, r3, #25
 800d4d6:	bf48      	it	mi
 800d4d8:	b2b6      	uxthmi	r6, r6
 800d4da:	e7e6      	b.n	800d4aa <_printf_i+0x182>
 800d4dc:	4615      	mov	r5, r2
 800d4de:	e7bb      	b.n	800d458 <_printf_i+0x130>
 800d4e0:	682b      	ldr	r3, [r5, #0]
 800d4e2:	6826      	ldr	r6, [r4, #0]
 800d4e4:	6961      	ldr	r1, [r4, #20]
 800d4e6:	1d18      	adds	r0, r3, #4
 800d4e8:	6028      	str	r0, [r5, #0]
 800d4ea:	0635      	lsls	r5, r6, #24
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	d501      	bpl.n	800d4f4 <_printf_i+0x1cc>
 800d4f0:	6019      	str	r1, [r3, #0]
 800d4f2:	e002      	b.n	800d4fa <_printf_i+0x1d2>
 800d4f4:	0670      	lsls	r0, r6, #25
 800d4f6:	d5fb      	bpl.n	800d4f0 <_printf_i+0x1c8>
 800d4f8:	8019      	strh	r1, [r3, #0]
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	6123      	str	r3, [r4, #16]
 800d4fe:	4615      	mov	r5, r2
 800d500:	e7ba      	b.n	800d478 <_printf_i+0x150>
 800d502:	682b      	ldr	r3, [r5, #0]
 800d504:	1d1a      	adds	r2, r3, #4
 800d506:	602a      	str	r2, [r5, #0]
 800d508:	681d      	ldr	r5, [r3, #0]
 800d50a:	6862      	ldr	r2, [r4, #4]
 800d50c:	2100      	movs	r1, #0
 800d50e:	4628      	mov	r0, r5
 800d510:	f7f2 fe3e 	bl	8000190 <memchr>
 800d514:	b108      	cbz	r0, 800d51a <_printf_i+0x1f2>
 800d516:	1b40      	subs	r0, r0, r5
 800d518:	6060      	str	r0, [r4, #4]
 800d51a:	6863      	ldr	r3, [r4, #4]
 800d51c:	6123      	str	r3, [r4, #16]
 800d51e:	2300      	movs	r3, #0
 800d520:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d524:	e7a8      	b.n	800d478 <_printf_i+0x150>
 800d526:	6923      	ldr	r3, [r4, #16]
 800d528:	462a      	mov	r2, r5
 800d52a:	4649      	mov	r1, r9
 800d52c:	4640      	mov	r0, r8
 800d52e:	47d0      	blx	sl
 800d530:	3001      	adds	r0, #1
 800d532:	d0ab      	beq.n	800d48c <_printf_i+0x164>
 800d534:	6823      	ldr	r3, [r4, #0]
 800d536:	079b      	lsls	r3, r3, #30
 800d538:	d413      	bmi.n	800d562 <_printf_i+0x23a>
 800d53a:	68e0      	ldr	r0, [r4, #12]
 800d53c:	9b03      	ldr	r3, [sp, #12]
 800d53e:	4298      	cmp	r0, r3
 800d540:	bfb8      	it	lt
 800d542:	4618      	movlt	r0, r3
 800d544:	e7a4      	b.n	800d490 <_printf_i+0x168>
 800d546:	2301      	movs	r3, #1
 800d548:	4632      	mov	r2, r6
 800d54a:	4649      	mov	r1, r9
 800d54c:	4640      	mov	r0, r8
 800d54e:	47d0      	blx	sl
 800d550:	3001      	adds	r0, #1
 800d552:	d09b      	beq.n	800d48c <_printf_i+0x164>
 800d554:	3501      	adds	r5, #1
 800d556:	68e3      	ldr	r3, [r4, #12]
 800d558:	9903      	ldr	r1, [sp, #12]
 800d55a:	1a5b      	subs	r3, r3, r1
 800d55c:	42ab      	cmp	r3, r5
 800d55e:	dcf2      	bgt.n	800d546 <_printf_i+0x21e>
 800d560:	e7eb      	b.n	800d53a <_printf_i+0x212>
 800d562:	2500      	movs	r5, #0
 800d564:	f104 0619 	add.w	r6, r4, #25
 800d568:	e7f5      	b.n	800d556 <_printf_i+0x22e>
 800d56a:	bf00      	nop
 800d56c:	0800e30f 	.word	0x0800e30f
 800d570:	0800e320 	.word	0x0800e320

0800d574 <_sbrk_r>:
 800d574:	b538      	push	{r3, r4, r5, lr}
 800d576:	4d06      	ldr	r5, [pc, #24]	; (800d590 <_sbrk_r+0x1c>)
 800d578:	2300      	movs	r3, #0
 800d57a:	4604      	mov	r4, r0
 800d57c:	4608      	mov	r0, r1
 800d57e:	602b      	str	r3, [r5, #0]
 800d580:	f7f3 fd26 	bl	8000fd0 <_sbrk>
 800d584:	1c43      	adds	r3, r0, #1
 800d586:	d102      	bne.n	800d58e <_sbrk_r+0x1a>
 800d588:	682b      	ldr	r3, [r5, #0]
 800d58a:	b103      	cbz	r3, 800d58e <_sbrk_r+0x1a>
 800d58c:	6023      	str	r3, [r4, #0]
 800d58e:	bd38      	pop	{r3, r4, r5, pc}
 800d590:	20000898 	.word	0x20000898

0800d594 <__swbuf_r>:
 800d594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d596:	460e      	mov	r6, r1
 800d598:	4614      	mov	r4, r2
 800d59a:	4605      	mov	r5, r0
 800d59c:	b118      	cbz	r0, 800d5a6 <__swbuf_r+0x12>
 800d59e:	6983      	ldr	r3, [r0, #24]
 800d5a0:	b90b      	cbnz	r3, 800d5a6 <__swbuf_r+0x12>
 800d5a2:	f000 f9d5 	bl	800d950 <__sinit>
 800d5a6:	4b21      	ldr	r3, [pc, #132]	; (800d62c <__swbuf_r+0x98>)
 800d5a8:	429c      	cmp	r4, r3
 800d5aa:	d12b      	bne.n	800d604 <__swbuf_r+0x70>
 800d5ac:	686c      	ldr	r4, [r5, #4]
 800d5ae:	69a3      	ldr	r3, [r4, #24]
 800d5b0:	60a3      	str	r3, [r4, #8]
 800d5b2:	89a3      	ldrh	r3, [r4, #12]
 800d5b4:	071a      	lsls	r2, r3, #28
 800d5b6:	d52f      	bpl.n	800d618 <__swbuf_r+0x84>
 800d5b8:	6923      	ldr	r3, [r4, #16]
 800d5ba:	b36b      	cbz	r3, 800d618 <__swbuf_r+0x84>
 800d5bc:	6923      	ldr	r3, [r4, #16]
 800d5be:	6820      	ldr	r0, [r4, #0]
 800d5c0:	1ac0      	subs	r0, r0, r3
 800d5c2:	6963      	ldr	r3, [r4, #20]
 800d5c4:	b2f6      	uxtb	r6, r6
 800d5c6:	4283      	cmp	r3, r0
 800d5c8:	4637      	mov	r7, r6
 800d5ca:	dc04      	bgt.n	800d5d6 <__swbuf_r+0x42>
 800d5cc:	4621      	mov	r1, r4
 800d5ce:	4628      	mov	r0, r5
 800d5d0:	f000 f92a 	bl	800d828 <_fflush_r>
 800d5d4:	bb30      	cbnz	r0, 800d624 <__swbuf_r+0x90>
 800d5d6:	68a3      	ldr	r3, [r4, #8]
 800d5d8:	3b01      	subs	r3, #1
 800d5da:	60a3      	str	r3, [r4, #8]
 800d5dc:	6823      	ldr	r3, [r4, #0]
 800d5de:	1c5a      	adds	r2, r3, #1
 800d5e0:	6022      	str	r2, [r4, #0]
 800d5e2:	701e      	strb	r6, [r3, #0]
 800d5e4:	6963      	ldr	r3, [r4, #20]
 800d5e6:	3001      	adds	r0, #1
 800d5e8:	4283      	cmp	r3, r0
 800d5ea:	d004      	beq.n	800d5f6 <__swbuf_r+0x62>
 800d5ec:	89a3      	ldrh	r3, [r4, #12]
 800d5ee:	07db      	lsls	r3, r3, #31
 800d5f0:	d506      	bpl.n	800d600 <__swbuf_r+0x6c>
 800d5f2:	2e0a      	cmp	r6, #10
 800d5f4:	d104      	bne.n	800d600 <__swbuf_r+0x6c>
 800d5f6:	4621      	mov	r1, r4
 800d5f8:	4628      	mov	r0, r5
 800d5fa:	f000 f915 	bl	800d828 <_fflush_r>
 800d5fe:	b988      	cbnz	r0, 800d624 <__swbuf_r+0x90>
 800d600:	4638      	mov	r0, r7
 800d602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d604:	4b0a      	ldr	r3, [pc, #40]	; (800d630 <__swbuf_r+0x9c>)
 800d606:	429c      	cmp	r4, r3
 800d608:	d101      	bne.n	800d60e <__swbuf_r+0x7a>
 800d60a:	68ac      	ldr	r4, [r5, #8]
 800d60c:	e7cf      	b.n	800d5ae <__swbuf_r+0x1a>
 800d60e:	4b09      	ldr	r3, [pc, #36]	; (800d634 <__swbuf_r+0xa0>)
 800d610:	429c      	cmp	r4, r3
 800d612:	bf08      	it	eq
 800d614:	68ec      	ldreq	r4, [r5, #12]
 800d616:	e7ca      	b.n	800d5ae <__swbuf_r+0x1a>
 800d618:	4621      	mov	r1, r4
 800d61a:	4628      	mov	r0, r5
 800d61c:	f000 f80c 	bl	800d638 <__swsetup_r>
 800d620:	2800      	cmp	r0, #0
 800d622:	d0cb      	beq.n	800d5bc <__swbuf_r+0x28>
 800d624:	f04f 37ff 	mov.w	r7, #4294967295
 800d628:	e7ea      	b.n	800d600 <__swbuf_r+0x6c>
 800d62a:	bf00      	nop
 800d62c:	0800e354 	.word	0x0800e354
 800d630:	0800e374 	.word	0x0800e374
 800d634:	0800e334 	.word	0x0800e334

0800d638 <__swsetup_r>:
 800d638:	4b32      	ldr	r3, [pc, #200]	; (800d704 <__swsetup_r+0xcc>)
 800d63a:	b570      	push	{r4, r5, r6, lr}
 800d63c:	681d      	ldr	r5, [r3, #0]
 800d63e:	4606      	mov	r6, r0
 800d640:	460c      	mov	r4, r1
 800d642:	b125      	cbz	r5, 800d64e <__swsetup_r+0x16>
 800d644:	69ab      	ldr	r3, [r5, #24]
 800d646:	b913      	cbnz	r3, 800d64e <__swsetup_r+0x16>
 800d648:	4628      	mov	r0, r5
 800d64a:	f000 f981 	bl	800d950 <__sinit>
 800d64e:	4b2e      	ldr	r3, [pc, #184]	; (800d708 <__swsetup_r+0xd0>)
 800d650:	429c      	cmp	r4, r3
 800d652:	d10f      	bne.n	800d674 <__swsetup_r+0x3c>
 800d654:	686c      	ldr	r4, [r5, #4]
 800d656:	89a3      	ldrh	r3, [r4, #12]
 800d658:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d65c:	0719      	lsls	r1, r3, #28
 800d65e:	d42c      	bmi.n	800d6ba <__swsetup_r+0x82>
 800d660:	06dd      	lsls	r5, r3, #27
 800d662:	d411      	bmi.n	800d688 <__swsetup_r+0x50>
 800d664:	2309      	movs	r3, #9
 800d666:	6033      	str	r3, [r6, #0]
 800d668:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d66c:	81a3      	strh	r3, [r4, #12]
 800d66e:	f04f 30ff 	mov.w	r0, #4294967295
 800d672:	e03e      	b.n	800d6f2 <__swsetup_r+0xba>
 800d674:	4b25      	ldr	r3, [pc, #148]	; (800d70c <__swsetup_r+0xd4>)
 800d676:	429c      	cmp	r4, r3
 800d678:	d101      	bne.n	800d67e <__swsetup_r+0x46>
 800d67a:	68ac      	ldr	r4, [r5, #8]
 800d67c:	e7eb      	b.n	800d656 <__swsetup_r+0x1e>
 800d67e:	4b24      	ldr	r3, [pc, #144]	; (800d710 <__swsetup_r+0xd8>)
 800d680:	429c      	cmp	r4, r3
 800d682:	bf08      	it	eq
 800d684:	68ec      	ldreq	r4, [r5, #12]
 800d686:	e7e6      	b.n	800d656 <__swsetup_r+0x1e>
 800d688:	0758      	lsls	r0, r3, #29
 800d68a:	d512      	bpl.n	800d6b2 <__swsetup_r+0x7a>
 800d68c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d68e:	b141      	cbz	r1, 800d6a2 <__swsetup_r+0x6a>
 800d690:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d694:	4299      	cmp	r1, r3
 800d696:	d002      	beq.n	800d69e <__swsetup_r+0x66>
 800d698:	4630      	mov	r0, r6
 800d69a:	f7ff fba1 	bl	800cde0 <_free_r>
 800d69e:	2300      	movs	r3, #0
 800d6a0:	6363      	str	r3, [r4, #52]	; 0x34
 800d6a2:	89a3      	ldrh	r3, [r4, #12]
 800d6a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d6a8:	81a3      	strh	r3, [r4, #12]
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	6063      	str	r3, [r4, #4]
 800d6ae:	6923      	ldr	r3, [r4, #16]
 800d6b0:	6023      	str	r3, [r4, #0]
 800d6b2:	89a3      	ldrh	r3, [r4, #12]
 800d6b4:	f043 0308 	orr.w	r3, r3, #8
 800d6b8:	81a3      	strh	r3, [r4, #12]
 800d6ba:	6923      	ldr	r3, [r4, #16]
 800d6bc:	b94b      	cbnz	r3, 800d6d2 <__swsetup_r+0x9a>
 800d6be:	89a3      	ldrh	r3, [r4, #12]
 800d6c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d6c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d6c8:	d003      	beq.n	800d6d2 <__swsetup_r+0x9a>
 800d6ca:	4621      	mov	r1, r4
 800d6cc:	4630      	mov	r0, r6
 800d6ce:	f000 fa05 	bl	800dadc <__smakebuf_r>
 800d6d2:	89a0      	ldrh	r0, [r4, #12]
 800d6d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d6d8:	f010 0301 	ands.w	r3, r0, #1
 800d6dc:	d00a      	beq.n	800d6f4 <__swsetup_r+0xbc>
 800d6de:	2300      	movs	r3, #0
 800d6e0:	60a3      	str	r3, [r4, #8]
 800d6e2:	6963      	ldr	r3, [r4, #20]
 800d6e4:	425b      	negs	r3, r3
 800d6e6:	61a3      	str	r3, [r4, #24]
 800d6e8:	6923      	ldr	r3, [r4, #16]
 800d6ea:	b943      	cbnz	r3, 800d6fe <__swsetup_r+0xc6>
 800d6ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d6f0:	d1ba      	bne.n	800d668 <__swsetup_r+0x30>
 800d6f2:	bd70      	pop	{r4, r5, r6, pc}
 800d6f4:	0781      	lsls	r1, r0, #30
 800d6f6:	bf58      	it	pl
 800d6f8:	6963      	ldrpl	r3, [r4, #20]
 800d6fa:	60a3      	str	r3, [r4, #8]
 800d6fc:	e7f4      	b.n	800d6e8 <__swsetup_r+0xb0>
 800d6fe:	2000      	movs	r0, #0
 800d700:	e7f7      	b.n	800d6f2 <__swsetup_r+0xba>
 800d702:	bf00      	nop
 800d704:	20000024 	.word	0x20000024
 800d708:	0800e354 	.word	0x0800e354
 800d70c:	0800e374 	.word	0x0800e374
 800d710:	0800e334 	.word	0x0800e334

0800d714 <abort>:
 800d714:	b508      	push	{r3, lr}
 800d716:	2006      	movs	r0, #6
 800d718:	f000 fa54 	bl	800dbc4 <raise>
 800d71c:	2001      	movs	r0, #1
 800d71e:	f7f3 fbe4 	bl	8000eea <_exit>
	...

0800d724 <__sflush_r>:
 800d724:	898a      	ldrh	r2, [r1, #12]
 800d726:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d728:	4605      	mov	r5, r0
 800d72a:	0710      	lsls	r0, r2, #28
 800d72c:	460c      	mov	r4, r1
 800d72e:	d457      	bmi.n	800d7e0 <__sflush_r+0xbc>
 800d730:	684b      	ldr	r3, [r1, #4]
 800d732:	2b00      	cmp	r3, #0
 800d734:	dc04      	bgt.n	800d740 <__sflush_r+0x1c>
 800d736:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d738:	2b00      	cmp	r3, #0
 800d73a:	dc01      	bgt.n	800d740 <__sflush_r+0x1c>
 800d73c:	2000      	movs	r0, #0
 800d73e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d740:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d742:	2e00      	cmp	r6, #0
 800d744:	d0fa      	beq.n	800d73c <__sflush_r+0x18>
 800d746:	2300      	movs	r3, #0
 800d748:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d74c:	682f      	ldr	r7, [r5, #0]
 800d74e:	602b      	str	r3, [r5, #0]
 800d750:	d032      	beq.n	800d7b8 <__sflush_r+0x94>
 800d752:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d754:	89a3      	ldrh	r3, [r4, #12]
 800d756:	075a      	lsls	r2, r3, #29
 800d758:	d505      	bpl.n	800d766 <__sflush_r+0x42>
 800d75a:	6863      	ldr	r3, [r4, #4]
 800d75c:	1ac0      	subs	r0, r0, r3
 800d75e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d760:	b10b      	cbz	r3, 800d766 <__sflush_r+0x42>
 800d762:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d764:	1ac0      	subs	r0, r0, r3
 800d766:	2300      	movs	r3, #0
 800d768:	4602      	mov	r2, r0
 800d76a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d76c:	6a21      	ldr	r1, [r4, #32]
 800d76e:	4628      	mov	r0, r5
 800d770:	47b0      	blx	r6
 800d772:	1c43      	adds	r3, r0, #1
 800d774:	89a3      	ldrh	r3, [r4, #12]
 800d776:	d106      	bne.n	800d786 <__sflush_r+0x62>
 800d778:	6829      	ldr	r1, [r5, #0]
 800d77a:	291d      	cmp	r1, #29
 800d77c:	d82c      	bhi.n	800d7d8 <__sflush_r+0xb4>
 800d77e:	4a29      	ldr	r2, [pc, #164]	; (800d824 <__sflush_r+0x100>)
 800d780:	40ca      	lsrs	r2, r1
 800d782:	07d6      	lsls	r6, r2, #31
 800d784:	d528      	bpl.n	800d7d8 <__sflush_r+0xb4>
 800d786:	2200      	movs	r2, #0
 800d788:	6062      	str	r2, [r4, #4]
 800d78a:	04d9      	lsls	r1, r3, #19
 800d78c:	6922      	ldr	r2, [r4, #16]
 800d78e:	6022      	str	r2, [r4, #0]
 800d790:	d504      	bpl.n	800d79c <__sflush_r+0x78>
 800d792:	1c42      	adds	r2, r0, #1
 800d794:	d101      	bne.n	800d79a <__sflush_r+0x76>
 800d796:	682b      	ldr	r3, [r5, #0]
 800d798:	b903      	cbnz	r3, 800d79c <__sflush_r+0x78>
 800d79a:	6560      	str	r0, [r4, #84]	; 0x54
 800d79c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d79e:	602f      	str	r7, [r5, #0]
 800d7a0:	2900      	cmp	r1, #0
 800d7a2:	d0cb      	beq.n	800d73c <__sflush_r+0x18>
 800d7a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d7a8:	4299      	cmp	r1, r3
 800d7aa:	d002      	beq.n	800d7b2 <__sflush_r+0x8e>
 800d7ac:	4628      	mov	r0, r5
 800d7ae:	f7ff fb17 	bl	800cde0 <_free_r>
 800d7b2:	2000      	movs	r0, #0
 800d7b4:	6360      	str	r0, [r4, #52]	; 0x34
 800d7b6:	e7c2      	b.n	800d73e <__sflush_r+0x1a>
 800d7b8:	6a21      	ldr	r1, [r4, #32]
 800d7ba:	2301      	movs	r3, #1
 800d7bc:	4628      	mov	r0, r5
 800d7be:	47b0      	blx	r6
 800d7c0:	1c41      	adds	r1, r0, #1
 800d7c2:	d1c7      	bne.n	800d754 <__sflush_r+0x30>
 800d7c4:	682b      	ldr	r3, [r5, #0]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d0c4      	beq.n	800d754 <__sflush_r+0x30>
 800d7ca:	2b1d      	cmp	r3, #29
 800d7cc:	d001      	beq.n	800d7d2 <__sflush_r+0xae>
 800d7ce:	2b16      	cmp	r3, #22
 800d7d0:	d101      	bne.n	800d7d6 <__sflush_r+0xb2>
 800d7d2:	602f      	str	r7, [r5, #0]
 800d7d4:	e7b2      	b.n	800d73c <__sflush_r+0x18>
 800d7d6:	89a3      	ldrh	r3, [r4, #12]
 800d7d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7dc:	81a3      	strh	r3, [r4, #12]
 800d7de:	e7ae      	b.n	800d73e <__sflush_r+0x1a>
 800d7e0:	690f      	ldr	r7, [r1, #16]
 800d7e2:	2f00      	cmp	r7, #0
 800d7e4:	d0aa      	beq.n	800d73c <__sflush_r+0x18>
 800d7e6:	0793      	lsls	r3, r2, #30
 800d7e8:	680e      	ldr	r6, [r1, #0]
 800d7ea:	bf08      	it	eq
 800d7ec:	694b      	ldreq	r3, [r1, #20]
 800d7ee:	600f      	str	r7, [r1, #0]
 800d7f0:	bf18      	it	ne
 800d7f2:	2300      	movne	r3, #0
 800d7f4:	1bf6      	subs	r6, r6, r7
 800d7f6:	608b      	str	r3, [r1, #8]
 800d7f8:	2e00      	cmp	r6, #0
 800d7fa:	dd9f      	ble.n	800d73c <__sflush_r+0x18>
 800d7fc:	6a21      	ldr	r1, [r4, #32]
 800d7fe:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800d802:	4633      	mov	r3, r6
 800d804:	463a      	mov	r2, r7
 800d806:	4628      	mov	r0, r5
 800d808:	47e0      	blx	ip
 800d80a:	2800      	cmp	r0, #0
 800d80c:	dc06      	bgt.n	800d81c <__sflush_r+0xf8>
 800d80e:	89a3      	ldrh	r3, [r4, #12]
 800d810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d814:	81a3      	strh	r3, [r4, #12]
 800d816:	f04f 30ff 	mov.w	r0, #4294967295
 800d81a:	e790      	b.n	800d73e <__sflush_r+0x1a>
 800d81c:	4407      	add	r7, r0
 800d81e:	1a36      	subs	r6, r6, r0
 800d820:	e7ea      	b.n	800d7f8 <__sflush_r+0xd4>
 800d822:	bf00      	nop
 800d824:	20400001 	.word	0x20400001

0800d828 <_fflush_r>:
 800d828:	b538      	push	{r3, r4, r5, lr}
 800d82a:	690b      	ldr	r3, [r1, #16]
 800d82c:	4605      	mov	r5, r0
 800d82e:	460c      	mov	r4, r1
 800d830:	b913      	cbnz	r3, 800d838 <_fflush_r+0x10>
 800d832:	2500      	movs	r5, #0
 800d834:	4628      	mov	r0, r5
 800d836:	bd38      	pop	{r3, r4, r5, pc}
 800d838:	b118      	cbz	r0, 800d842 <_fflush_r+0x1a>
 800d83a:	6983      	ldr	r3, [r0, #24]
 800d83c:	b90b      	cbnz	r3, 800d842 <_fflush_r+0x1a>
 800d83e:	f000 f887 	bl	800d950 <__sinit>
 800d842:	4b14      	ldr	r3, [pc, #80]	; (800d894 <_fflush_r+0x6c>)
 800d844:	429c      	cmp	r4, r3
 800d846:	d11b      	bne.n	800d880 <_fflush_r+0x58>
 800d848:	686c      	ldr	r4, [r5, #4]
 800d84a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d0ef      	beq.n	800d832 <_fflush_r+0xa>
 800d852:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d854:	07d0      	lsls	r0, r2, #31
 800d856:	d404      	bmi.n	800d862 <_fflush_r+0x3a>
 800d858:	0599      	lsls	r1, r3, #22
 800d85a:	d402      	bmi.n	800d862 <_fflush_r+0x3a>
 800d85c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d85e:	f000 f915 	bl	800da8c <__retarget_lock_acquire_recursive>
 800d862:	4628      	mov	r0, r5
 800d864:	4621      	mov	r1, r4
 800d866:	f7ff ff5d 	bl	800d724 <__sflush_r>
 800d86a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d86c:	07da      	lsls	r2, r3, #31
 800d86e:	4605      	mov	r5, r0
 800d870:	d4e0      	bmi.n	800d834 <_fflush_r+0xc>
 800d872:	89a3      	ldrh	r3, [r4, #12]
 800d874:	059b      	lsls	r3, r3, #22
 800d876:	d4dd      	bmi.n	800d834 <_fflush_r+0xc>
 800d878:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d87a:	f000 f908 	bl	800da8e <__retarget_lock_release_recursive>
 800d87e:	e7d9      	b.n	800d834 <_fflush_r+0xc>
 800d880:	4b05      	ldr	r3, [pc, #20]	; (800d898 <_fflush_r+0x70>)
 800d882:	429c      	cmp	r4, r3
 800d884:	d101      	bne.n	800d88a <_fflush_r+0x62>
 800d886:	68ac      	ldr	r4, [r5, #8]
 800d888:	e7df      	b.n	800d84a <_fflush_r+0x22>
 800d88a:	4b04      	ldr	r3, [pc, #16]	; (800d89c <_fflush_r+0x74>)
 800d88c:	429c      	cmp	r4, r3
 800d88e:	bf08      	it	eq
 800d890:	68ec      	ldreq	r4, [r5, #12]
 800d892:	e7da      	b.n	800d84a <_fflush_r+0x22>
 800d894:	0800e354 	.word	0x0800e354
 800d898:	0800e374 	.word	0x0800e374
 800d89c:	0800e334 	.word	0x0800e334

0800d8a0 <std>:
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	b510      	push	{r4, lr}
 800d8a4:	4604      	mov	r4, r0
 800d8a6:	e9c0 3300 	strd	r3, r3, [r0]
 800d8aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d8ae:	6083      	str	r3, [r0, #8]
 800d8b0:	8181      	strh	r1, [r0, #12]
 800d8b2:	6643      	str	r3, [r0, #100]	; 0x64
 800d8b4:	81c2      	strh	r2, [r0, #14]
 800d8b6:	6183      	str	r3, [r0, #24]
 800d8b8:	4619      	mov	r1, r3
 800d8ba:	2208      	movs	r2, #8
 800d8bc:	305c      	adds	r0, #92	; 0x5c
 800d8be:	f7ff f9e3 	bl	800cc88 <memset>
 800d8c2:	4b05      	ldr	r3, [pc, #20]	; (800d8d8 <std+0x38>)
 800d8c4:	6263      	str	r3, [r4, #36]	; 0x24
 800d8c6:	4b05      	ldr	r3, [pc, #20]	; (800d8dc <std+0x3c>)
 800d8c8:	62a3      	str	r3, [r4, #40]	; 0x28
 800d8ca:	4b05      	ldr	r3, [pc, #20]	; (800d8e0 <std+0x40>)
 800d8cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d8ce:	4b05      	ldr	r3, [pc, #20]	; (800d8e4 <std+0x44>)
 800d8d0:	6224      	str	r4, [r4, #32]
 800d8d2:	6323      	str	r3, [r4, #48]	; 0x30
 800d8d4:	bd10      	pop	{r4, pc}
 800d8d6:	bf00      	nop
 800d8d8:	0800dbfd 	.word	0x0800dbfd
 800d8dc:	0800dc1f 	.word	0x0800dc1f
 800d8e0:	0800dc57 	.word	0x0800dc57
 800d8e4:	0800dc7b 	.word	0x0800dc7b

0800d8e8 <_cleanup_r>:
 800d8e8:	4901      	ldr	r1, [pc, #4]	; (800d8f0 <_cleanup_r+0x8>)
 800d8ea:	f000 b8af 	b.w	800da4c <_fwalk_reent>
 800d8ee:	bf00      	nop
 800d8f0:	0800d829 	.word	0x0800d829

0800d8f4 <__sfmoreglue>:
 800d8f4:	b570      	push	{r4, r5, r6, lr}
 800d8f6:	2268      	movs	r2, #104	; 0x68
 800d8f8:	1e4d      	subs	r5, r1, #1
 800d8fa:	4355      	muls	r5, r2
 800d8fc:	460e      	mov	r6, r1
 800d8fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d902:	f7ff fad7 	bl	800ceb4 <_malloc_r>
 800d906:	4604      	mov	r4, r0
 800d908:	b140      	cbz	r0, 800d91c <__sfmoreglue+0x28>
 800d90a:	2100      	movs	r1, #0
 800d90c:	e9c0 1600 	strd	r1, r6, [r0]
 800d910:	300c      	adds	r0, #12
 800d912:	60a0      	str	r0, [r4, #8]
 800d914:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d918:	f7ff f9b6 	bl	800cc88 <memset>
 800d91c:	4620      	mov	r0, r4
 800d91e:	bd70      	pop	{r4, r5, r6, pc}

0800d920 <__sfp_lock_acquire>:
 800d920:	4801      	ldr	r0, [pc, #4]	; (800d928 <__sfp_lock_acquire+0x8>)
 800d922:	f000 b8b3 	b.w	800da8c <__retarget_lock_acquire_recursive>
 800d926:	bf00      	nop
 800d928:	20000895 	.word	0x20000895

0800d92c <__sfp_lock_release>:
 800d92c:	4801      	ldr	r0, [pc, #4]	; (800d934 <__sfp_lock_release+0x8>)
 800d92e:	f000 b8ae 	b.w	800da8e <__retarget_lock_release_recursive>
 800d932:	bf00      	nop
 800d934:	20000895 	.word	0x20000895

0800d938 <__sinit_lock_acquire>:
 800d938:	4801      	ldr	r0, [pc, #4]	; (800d940 <__sinit_lock_acquire+0x8>)
 800d93a:	f000 b8a7 	b.w	800da8c <__retarget_lock_acquire_recursive>
 800d93e:	bf00      	nop
 800d940:	20000896 	.word	0x20000896

0800d944 <__sinit_lock_release>:
 800d944:	4801      	ldr	r0, [pc, #4]	; (800d94c <__sinit_lock_release+0x8>)
 800d946:	f000 b8a2 	b.w	800da8e <__retarget_lock_release_recursive>
 800d94a:	bf00      	nop
 800d94c:	20000896 	.word	0x20000896

0800d950 <__sinit>:
 800d950:	b510      	push	{r4, lr}
 800d952:	4604      	mov	r4, r0
 800d954:	f7ff fff0 	bl	800d938 <__sinit_lock_acquire>
 800d958:	69a3      	ldr	r3, [r4, #24]
 800d95a:	b11b      	cbz	r3, 800d964 <__sinit+0x14>
 800d95c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d960:	f7ff bff0 	b.w	800d944 <__sinit_lock_release>
 800d964:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d968:	6523      	str	r3, [r4, #80]	; 0x50
 800d96a:	4b13      	ldr	r3, [pc, #76]	; (800d9b8 <__sinit+0x68>)
 800d96c:	4a13      	ldr	r2, [pc, #76]	; (800d9bc <__sinit+0x6c>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	62a2      	str	r2, [r4, #40]	; 0x28
 800d972:	42a3      	cmp	r3, r4
 800d974:	bf04      	itt	eq
 800d976:	2301      	moveq	r3, #1
 800d978:	61a3      	streq	r3, [r4, #24]
 800d97a:	4620      	mov	r0, r4
 800d97c:	f000 f820 	bl	800d9c0 <__sfp>
 800d980:	6060      	str	r0, [r4, #4]
 800d982:	4620      	mov	r0, r4
 800d984:	f000 f81c 	bl	800d9c0 <__sfp>
 800d988:	60a0      	str	r0, [r4, #8]
 800d98a:	4620      	mov	r0, r4
 800d98c:	f000 f818 	bl	800d9c0 <__sfp>
 800d990:	2200      	movs	r2, #0
 800d992:	60e0      	str	r0, [r4, #12]
 800d994:	2104      	movs	r1, #4
 800d996:	6860      	ldr	r0, [r4, #4]
 800d998:	f7ff ff82 	bl	800d8a0 <std>
 800d99c:	68a0      	ldr	r0, [r4, #8]
 800d99e:	2201      	movs	r2, #1
 800d9a0:	2109      	movs	r1, #9
 800d9a2:	f7ff ff7d 	bl	800d8a0 <std>
 800d9a6:	68e0      	ldr	r0, [r4, #12]
 800d9a8:	2202      	movs	r2, #2
 800d9aa:	2112      	movs	r1, #18
 800d9ac:	f7ff ff78 	bl	800d8a0 <std>
 800d9b0:	2301      	movs	r3, #1
 800d9b2:	61a3      	str	r3, [r4, #24]
 800d9b4:	e7d2      	b.n	800d95c <__sinit+0xc>
 800d9b6:	bf00      	nop
 800d9b8:	0800e24c 	.word	0x0800e24c
 800d9bc:	0800d8e9 	.word	0x0800d8e9

0800d9c0 <__sfp>:
 800d9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9c2:	4607      	mov	r7, r0
 800d9c4:	f7ff ffac 	bl	800d920 <__sfp_lock_acquire>
 800d9c8:	4b1e      	ldr	r3, [pc, #120]	; (800da44 <__sfp+0x84>)
 800d9ca:	681e      	ldr	r6, [r3, #0]
 800d9cc:	69b3      	ldr	r3, [r6, #24]
 800d9ce:	b913      	cbnz	r3, 800d9d6 <__sfp+0x16>
 800d9d0:	4630      	mov	r0, r6
 800d9d2:	f7ff ffbd 	bl	800d950 <__sinit>
 800d9d6:	3648      	adds	r6, #72	; 0x48
 800d9d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d9dc:	3b01      	subs	r3, #1
 800d9de:	d503      	bpl.n	800d9e8 <__sfp+0x28>
 800d9e0:	6833      	ldr	r3, [r6, #0]
 800d9e2:	b30b      	cbz	r3, 800da28 <__sfp+0x68>
 800d9e4:	6836      	ldr	r6, [r6, #0]
 800d9e6:	e7f7      	b.n	800d9d8 <__sfp+0x18>
 800d9e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d9ec:	b9d5      	cbnz	r5, 800da24 <__sfp+0x64>
 800d9ee:	4b16      	ldr	r3, [pc, #88]	; (800da48 <__sfp+0x88>)
 800d9f0:	60e3      	str	r3, [r4, #12]
 800d9f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d9f6:	6665      	str	r5, [r4, #100]	; 0x64
 800d9f8:	f000 f847 	bl	800da8a <__retarget_lock_init_recursive>
 800d9fc:	f7ff ff96 	bl	800d92c <__sfp_lock_release>
 800da00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800da04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800da08:	6025      	str	r5, [r4, #0]
 800da0a:	61a5      	str	r5, [r4, #24]
 800da0c:	2208      	movs	r2, #8
 800da0e:	4629      	mov	r1, r5
 800da10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800da14:	f7ff f938 	bl	800cc88 <memset>
 800da18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800da1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800da20:	4620      	mov	r0, r4
 800da22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da24:	3468      	adds	r4, #104	; 0x68
 800da26:	e7d9      	b.n	800d9dc <__sfp+0x1c>
 800da28:	2104      	movs	r1, #4
 800da2a:	4638      	mov	r0, r7
 800da2c:	f7ff ff62 	bl	800d8f4 <__sfmoreglue>
 800da30:	4604      	mov	r4, r0
 800da32:	6030      	str	r0, [r6, #0]
 800da34:	2800      	cmp	r0, #0
 800da36:	d1d5      	bne.n	800d9e4 <__sfp+0x24>
 800da38:	f7ff ff78 	bl	800d92c <__sfp_lock_release>
 800da3c:	230c      	movs	r3, #12
 800da3e:	603b      	str	r3, [r7, #0]
 800da40:	e7ee      	b.n	800da20 <__sfp+0x60>
 800da42:	bf00      	nop
 800da44:	0800e24c 	.word	0x0800e24c
 800da48:	ffff0001 	.word	0xffff0001

0800da4c <_fwalk_reent>:
 800da4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da50:	4606      	mov	r6, r0
 800da52:	4688      	mov	r8, r1
 800da54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800da58:	2700      	movs	r7, #0
 800da5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800da5e:	f1b9 0901 	subs.w	r9, r9, #1
 800da62:	d505      	bpl.n	800da70 <_fwalk_reent+0x24>
 800da64:	6824      	ldr	r4, [r4, #0]
 800da66:	2c00      	cmp	r4, #0
 800da68:	d1f7      	bne.n	800da5a <_fwalk_reent+0xe>
 800da6a:	4638      	mov	r0, r7
 800da6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da70:	89ab      	ldrh	r3, [r5, #12]
 800da72:	2b01      	cmp	r3, #1
 800da74:	d907      	bls.n	800da86 <_fwalk_reent+0x3a>
 800da76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800da7a:	3301      	adds	r3, #1
 800da7c:	d003      	beq.n	800da86 <_fwalk_reent+0x3a>
 800da7e:	4629      	mov	r1, r5
 800da80:	4630      	mov	r0, r6
 800da82:	47c0      	blx	r8
 800da84:	4307      	orrs	r7, r0
 800da86:	3568      	adds	r5, #104	; 0x68
 800da88:	e7e9      	b.n	800da5e <_fwalk_reent+0x12>

0800da8a <__retarget_lock_init_recursive>:
 800da8a:	4770      	bx	lr

0800da8c <__retarget_lock_acquire_recursive>:
 800da8c:	4770      	bx	lr

0800da8e <__retarget_lock_release_recursive>:
 800da8e:	4770      	bx	lr

0800da90 <__swhatbuf_r>:
 800da90:	b570      	push	{r4, r5, r6, lr}
 800da92:	460e      	mov	r6, r1
 800da94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da98:	2900      	cmp	r1, #0
 800da9a:	b096      	sub	sp, #88	; 0x58
 800da9c:	4614      	mov	r4, r2
 800da9e:	461d      	mov	r5, r3
 800daa0:	da08      	bge.n	800dab4 <__swhatbuf_r+0x24>
 800daa2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800daa6:	2200      	movs	r2, #0
 800daa8:	602a      	str	r2, [r5, #0]
 800daaa:	061a      	lsls	r2, r3, #24
 800daac:	d410      	bmi.n	800dad0 <__swhatbuf_r+0x40>
 800daae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dab2:	e00e      	b.n	800dad2 <__swhatbuf_r+0x42>
 800dab4:	466a      	mov	r2, sp
 800dab6:	f000 f907 	bl	800dcc8 <_fstat_r>
 800daba:	2800      	cmp	r0, #0
 800dabc:	dbf1      	blt.n	800daa2 <__swhatbuf_r+0x12>
 800dabe:	9a01      	ldr	r2, [sp, #4]
 800dac0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dac4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dac8:	425a      	negs	r2, r3
 800daca:	415a      	adcs	r2, r3
 800dacc:	602a      	str	r2, [r5, #0]
 800dace:	e7ee      	b.n	800daae <__swhatbuf_r+0x1e>
 800dad0:	2340      	movs	r3, #64	; 0x40
 800dad2:	2000      	movs	r0, #0
 800dad4:	6023      	str	r3, [r4, #0]
 800dad6:	b016      	add	sp, #88	; 0x58
 800dad8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800dadc <__smakebuf_r>:
 800dadc:	898b      	ldrh	r3, [r1, #12]
 800dade:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dae0:	079d      	lsls	r5, r3, #30
 800dae2:	4606      	mov	r6, r0
 800dae4:	460c      	mov	r4, r1
 800dae6:	d507      	bpl.n	800daf8 <__smakebuf_r+0x1c>
 800dae8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800daec:	6023      	str	r3, [r4, #0]
 800daee:	6123      	str	r3, [r4, #16]
 800daf0:	2301      	movs	r3, #1
 800daf2:	6163      	str	r3, [r4, #20]
 800daf4:	b002      	add	sp, #8
 800daf6:	bd70      	pop	{r4, r5, r6, pc}
 800daf8:	ab01      	add	r3, sp, #4
 800dafa:	466a      	mov	r2, sp
 800dafc:	f7ff ffc8 	bl	800da90 <__swhatbuf_r>
 800db00:	9900      	ldr	r1, [sp, #0]
 800db02:	4605      	mov	r5, r0
 800db04:	4630      	mov	r0, r6
 800db06:	f7ff f9d5 	bl	800ceb4 <_malloc_r>
 800db0a:	b948      	cbnz	r0, 800db20 <__smakebuf_r+0x44>
 800db0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db10:	059a      	lsls	r2, r3, #22
 800db12:	d4ef      	bmi.n	800daf4 <__smakebuf_r+0x18>
 800db14:	f023 0303 	bic.w	r3, r3, #3
 800db18:	f043 0302 	orr.w	r3, r3, #2
 800db1c:	81a3      	strh	r3, [r4, #12]
 800db1e:	e7e3      	b.n	800dae8 <__smakebuf_r+0xc>
 800db20:	4b0d      	ldr	r3, [pc, #52]	; (800db58 <__smakebuf_r+0x7c>)
 800db22:	62b3      	str	r3, [r6, #40]	; 0x28
 800db24:	89a3      	ldrh	r3, [r4, #12]
 800db26:	6020      	str	r0, [r4, #0]
 800db28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db2c:	81a3      	strh	r3, [r4, #12]
 800db2e:	9b00      	ldr	r3, [sp, #0]
 800db30:	6163      	str	r3, [r4, #20]
 800db32:	9b01      	ldr	r3, [sp, #4]
 800db34:	6120      	str	r0, [r4, #16]
 800db36:	b15b      	cbz	r3, 800db50 <__smakebuf_r+0x74>
 800db38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db3c:	4630      	mov	r0, r6
 800db3e:	f000 f8d5 	bl	800dcec <_isatty_r>
 800db42:	b128      	cbz	r0, 800db50 <__smakebuf_r+0x74>
 800db44:	89a3      	ldrh	r3, [r4, #12]
 800db46:	f023 0303 	bic.w	r3, r3, #3
 800db4a:	f043 0301 	orr.w	r3, r3, #1
 800db4e:	81a3      	strh	r3, [r4, #12]
 800db50:	89a0      	ldrh	r0, [r4, #12]
 800db52:	4305      	orrs	r5, r0
 800db54:	81a5      	strh	r5, [r4, #12]
 800db56:	e7cd      	b.n	800daf4 <__smakebuf_r+0x18>
 800db58:	0800d8e9 	.word	0x0800d8e9

0800db5c <__malloc_lock>:
 800db5c:	4801      	ldr	r0, [pc, #4]	; (800db64 <__malloc_lock+0x8>)
 800db5e:	f7ff bf95 	b.w	800da8c <__retarget_lock_acquire_recursive>
 800db62:	bf00      	nop
 800db64:	20000894 	.word	0x20000894

0800db68 <__malloc_unlock>:
 800db68:	4801      	ldr	r0, [pc, #4]	; (800db70 <__malloc_unlock+0x8>)
 800db6a:	f7ff bf90 	b.w	800da8e <__retarget_lock_release_recursive>
 800db6e:	bf00      	nop
 800db70:	20000894 	.word	0x20000894

0800db74 <_raise_r>:
 800db74:	291f      	cmp	r1, #31
 800db76:	b538      	push	{r3, r4, r5, lr}
 800db78:	4604      	mov	r4, r0
 800db7a:	460d      	mov	r5, r1
 800db7c:	d904      	bls.n	800db88 <_raise_r+0x14>
 800db7e:	2316      	movs	r3, #22
 800db80:	6003      	str	r3, [r0, #0]
 800db82:	f04f 30ff 	mov.w	r0, #4294967295
 800db86:	bd38      	pop	{r3, r4, r5, pc}
 800db88:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800db8a:	b112      	cbz	r2, 800db92 <_raise_r+0x1e>
 800db8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800db90:	b94b      	cbnz	r3, 800dba6 <_raise_r+0x32>
 800db92:	4620      	mov	r0, r4
 800db94:	f000 f830 	bl	800dbf8 <_getpid_r>
 800db98:	462a      	mov	r2, r5
 800db9a:	4601      	mov	r1, r0
 800db9c:	4620      	mov	r0, r4
 800db9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dba2:	f000 b817 	b.w	800dbd4 <_kill_r>
 800dba6:	2b01      	cmp	r3, #1
 800dba8:	d00a      	beq.n	800dbc0 <_raise_r+0x4c>
 800dbaa:	1c59      	adds	r1, r3, #1
 800dbac:	d103      	bne.n	800dbb6 <_raise_r+0x42>
 800dbae:	2316      	movs	r3, #22
 800dbb0:	6003      	str	r3, [r0, #0]
 800dbb2:	2001      	movs	r0, #1
 800dbb4:	e7e7      	b.n	800db86 <_raise_r+0x12>
 800dbb6:	2400      	movs	r4, #0
 800dbb8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dbbc:	4628      	mov	r0, r5
 800dbbe:	4798      	blx	r3
 800dbc0:	2000      	movs	r0, #0
 800dbc2:	e7e0      	b.n	800db86 <_raise_r+0x12>

0800dbc4 <raise>:
 800dbc4:	4b02      	ldr	r3, [pc, #8]	; (800dbd0 <raise+0xc>)
 800dbc6:	4601      	mov	r1, r0
 800dbc8:	6818      	ldr	r0, [r3, #0]
 800dbca:	f7ff bfd3 	b.w	800db74 <_raise_r>
 800dbce:	bf00      	nop
 800dbd0:	20000024 	.word	0x20000024

0800dbd4 <_kill_r>:
 800dbd4:	b538      	push	{r3, r4, r5, lr}
 800dbd6:	4d07      	ldr	r5, [pc, #28]	; (800dbf4 <_kill_r+0x20>)
 800dbd8:	2300      	movs	r3, #0
 800dbda:	4604      	mov	r4, r0
 800dbdc:	4608      	mov	r0, r1
 800dbde:	4611      	mov	r1, r2
 800dbe0:	602b      	str	r3, [r5, #0]
 800dbe2:	f7f3 f972 	bl	8000eca <_kill>
 800dbe6:	1c43      	adds	r3, r0, #1
 800dbe8:	d102      	bne.n	800dbf0 <_kill_r+0x1c>
 800dbea:	682b      	ldr	r3, [r5, #0]
 800dbec:	b103      	cbz	r3, 800dbf0 <_kill_r+0x1c>
 800dbee:	6023      	str	r3, [r4, #0]
 800dbf0:	bd38      	pop	{r3, r4, r5, pc}
 800dbf2:	bf00      	nop
 800dbf4:	20000898 	.word	0x20000898

0800dbf8 <_getpid_r>:
 800dbf8:	f7f3 b960 	b.w	8000ebc <_getpid>

0800dbfc <__sread>:
 800dbfc:	b510      	push	{r4, lr}
 800dbfe:	460c      	mov	r4, r1
 800dc00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc04:	f000 f894 	bl	800dd30 <_read_r>
 800dc08:	2800      	cmp	r0, #0
 800dc0a:	bfab      	itete	ge
 800dc0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dc0e:	89a3      	ldrhlt	r3, [r4, #12]
 800dc10:	181b      	addge	r3, r3, r0
 800dc12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dc16:	bfac      	ite	ge
 800dc18:	6563      	strge	r3, [r4, #84]	; 0x54
 800dc1a:	81a3      	strhlt	r3, [r4, #12]
 800dc1c:	bd10      	pop	{r4, pc}

0800dc1e <__swrite>:
 800dc1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc22:	461f      	mov	r7, r3
 800dc24:	898b      	ldrh	r3, [r1, #12]
 800dc26:	05db      	lsls	r3, r3, #23
 800dc28:	4605      	mov	r5, r0
 800dc2a:	460c      	mov	r4, r1
 800dc2c:	4616      	mov	r6, r2
 800dc2e:	d505      	bpl.n	800dc3c <__swrite+0x1e>
 800dc30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc34:	2302      	movs	r3, #2
 800dc36:	2200      	movs	r2, #0
 800dc38:	f000 f868 	bl	800dd0c <_lseek_r>
 800dc3c:	89a3      	ldrh	r3, [r4, #12]
 800dc3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dc46:	81a3      	strh	r3, [r4, #12]
 800dc48:	4632      	mov	r2, r6
 800dc4a:	463b      	mov	r3, r7
 800dc4c:	4628      	mov	r0, r5
 800dc4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc52:	f000 b817 	b.w	800dc84 <_write_r>

0800dc56 <__sseek>:
 800dc56:	b510      	push	{r4, lr}
 800dc58:	460c      	mov	r4, r1
 800dc5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc5e:	f000 f855 	bl	800dd0c <_lseek_r>
 800dc62:	1c43      	adds	r3, r0, #1
 800dc64:	89a3      	ldrh	r3, [r4, #12]
 800dc66:	bf15      	itete	ne
 800dc68:	6560      	strne	r0, [r4, #84]	; 0x54
 800dc6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dc6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dc72:	81a3      	strheq	r3, [r4, #12]
 800dc74:	bf18      	it	ne
 800dc76:	81a3      	strhne	r3, [r4, #12]
 800dc78:	bd10      	pop	{r4, pc}

0800dc7a <__sclose>:
 800dc7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc7e:	f000 b813 	b.w	800dca8 <_close_r>
	...

0800dc84 <_write_r>:
 800dc84:	b538      	push	{r3, r4, r5, lr}
 800dc86:	4d07      	ldr	r5, [pc, #28]	; (800dca4 <_write_r+0x20>)
 800dc88:	4604      	mov	r4, r0
 800dc8a:	4608      	mov	r0, r1
 800dc8c:	4611      	mov	r1, r2
 800dc8e:	2200      	movs	r2, #0
 800dc90:	602a      	str	r2, [r5, #0]
 800dc92:	461a      	mov	r2, r3
 800dc94:	f7f3 f950 	bl	8000f38 <_write>
 800dc98:	1c43      	adds	r3, r0, #1
 800dc9a:	d102      	bne.n	800dca2 <_write_r+0x1e>
 800dc9c:	682b      	ldr	r3, [r5, #0]
 800dc9e:	b103      	cbz	r3, 800dca2 <_write_r+0x1e>
 800dca0:	6023      	str	r3, [r4, #0]
 800dca2:	bd38      	pop	{r3, r4, r5, pc}
 800dca4:	20000898 	.word	0x20000898

0800dca8 <_close_r>:
 800dca8:	b538      	push	{r3, r4, r5, lr}
 800dcaa:	4d06      	ldr	r5, [pc, #24]	; (800dcc4 <_close_r+0x1c>)
 800dcac:	2300      	movs	r3, #0
 800dcae:	4604      	mov	r4, r0
 800dcb0:	4608      	mov	r0, r1
 800dcb2:	602b      	str	r3, [r5, #0]
 800dcb4:	f7f3 f95c 	bl	8000f70 <_close>
 800dcb8:	1c43      	adds	r3, r0, #1
 800dcba:	d102      	bne.n	800dcc2 <_close_r+0x1a>
 800dcbc:	682b      	ldr	r3, [r5, #0]
 800dcbe:	b103      	cbz	r3, 800dcc2 <_close_r+0x1a>
 800dcc0:	6023      	str	r3, [r4, #0]
 800dcc2:	bd38      	pop	{r3, r4, r5, pc}
 800dcc4:	20000898 	.word	0x20000898

0800dcc8 <_fstat_r>:
 800dcc8:	b538      	push	{r3, r4, r5, lr}
 800dcca:	4d07      	ldr	r5, [pc, #28]	; (800dce8 <_fstat_r+0x20>)
 800dccc:	2300      	movs	r3, #0
 800dcce:	4604      	mov	r4, r0
 800dcd0:	4608      	mov	r0, r1
 800dcd2:	4611      	mov	r1, r2
 800dcd4:	602b      	str	r3, [r5, #0]
 800dcd6:	f7f3 f956 	bl	8000f86 <_fstat>
 800dcda:	1c43      	adds	r3, r0, #1
 800dcdc:	d102      	bne.n	800dce4 <_fstat_r+0x1c>
 800dcde:	682b      	ldr	r3, [r5, #0]
 800dce0:	b103      	cbz	r3, 800dce4 <_fstat_r+0x1c>
 800dce2:	6023      	str	r3, [r4, #0]
 800dce4:	bd38      	pop	{r3, r4, r5, pc}
 800dce6:	bf00      	nop
 800dce8:	20000898 	.word	0x20000898

0800dcec <_isatty_r>:
 800dcec:	b538      	push	{r3, r4, r5, lr}
 800dcee:	4d06      	ldr	r5, [pc, #24]	; (800dd08 <_isatty_r+0x1c>)
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	4604      	mov	r4, r0
 800dcf4:	4608      	mov	r0, r1
 800dcf6:	602b      	str	r3, [r5, #0]
 800dcf8:	f7f3 f954 	bl	8000fa4 <_isatty>
 800dcfc:	1c43      	adds	r3, r0, #1
 800dcfe:	d102      	bne.n	800dd06 <_isatty_r+0x1a>
 800dd00:	682b      	ldr	r3, [r5, #0]
 800dd02:	b103      	cbz	r3, 800dd06 <_isatty_r+0x1a>
 800dd04:	6023      	str	r3, [r4, #0]
 800dd06:	bd38      	pop	{r3, r4, r5, pc}
 800dd08:	20000898 	.word	0x20000898

0800dd0c <_lseek_r>:
 800dd0c:	b538      	push	{r3, r4, r5, lr}
 800dd0e:	4d07      	ldr	r5, [pc, #28]	; (800dd2c <_lseek_r+0x20>)
 800dd10:	4604      	mov	r4, r0
 800dd12:	4608      	mov	r0, r1
 800dd14:	4611      	mov	r1, r2
 800dd16:	2200      	movs	r2, #0
 800dd18:	602a      	str	r2, [r5, #0]
 800dd1a:	461a      	mov	r2, r3
 800dd1c:	f7f3 f94c 	bl	8000fb8 <_lseek>
 800dd20:	1c43      	adds	r3, r0, #1
 800dd22:	d102      	bne.n	800dd2a <_lseek_r+0x1e>
 800dd24:	682b      	ldr	r3, [r5, #0]
 800dd26:	b103      	cbz	r3, 800dd2a <_lseek_r+0x1e>
 800dd28:	6023      	str	r3, [r4, #0]
 800dd2a:	bd38      	pop	{r3, r4, r5, pc}
 800dd2c:	20000898 	.word	0x20000898

0800dd30 <_read_r>:
 800dd30:	b538      	push	{r3, r4, r5, lr}
 800dd32:	4d07      	ldr	r5, [pc, #28]	; (800dd50 <_read_r+0x20>)
 800dd34:	4604      	mov	r4, r0
 800dd36:	4608      	mov	r0, r1
 800dd38:	4611      	mov	r1, r2
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	602a      	str	r2, [r5, #0]
 800dd3e:	461a      	mov	r2, r3
 800dd40:	f7f3 f8dd 	bl	8000efe <_read>
 800dd44:	1c43      	adds	r3, r0, #1
 800dd46:	d102      	bne.n	800dd4e <_read_r+0x1e>
 800dd48:	682b      	ldr	r3, [r5, #0]
 800dd4a:	b103      	cbz	r3, 800dd4e <_read_r+0x1e>
 800dd4c:	6023      	str	r3, [r4, #0]
 800dd4e:	bd38      	pop	{r3, r4, r5, pc}
 800dd50:	20000898 	.word	0x20000898

0800dd54 <_init>:
 800dd54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd56:	bf00      	nop
 800dd58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd5a:	bc08      	pop	{r3}
 800dd5c:	469e      	mov	lr, r3
 800dd5e:	4770      	bx	lr

0800dd60 <_fini>:
 800dd60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd62:	bf00      	nop
 800dd64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd66:	bc08      	pop	{r3}
 800dd68:	469e      	mov	lr, r3
 800dd6a:	4770      	bx	lr
